
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000554c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005880  08005880  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005888  08005888  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000070  08005900  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08005900  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdfb  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ff  00000000  00000000  0002fe93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00032398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  00032f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d64  00000000  00000000  00033a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee31  00000000  00000000  00048784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007aa30  00000000  00000000  000575b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1fe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e4c  00000000  00000000  000d2038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080055f4 	.word	0x080055f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080055f4 	.word	0x080055f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8ba 	bl	8000640 <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8b5 	bl	8000640 <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzdi2>:
 8000640:	b510      	push	{r4, lr}
 8000642:	2900      	cmp	r1, #0
 8000644:	d103      	bne.n	800064e <__clzdi2+0xe>
 8000646:	f000 f807 	bl	8000658 <__clzsi2>
 800064a:	3020      	adds	r0, #32
 800064c:	e002      	b.n	8000654 <__clzdi2+0x14>
 800064e:	1c08      	adds	r0, r1, #0
 8000650:	f000 f802 	bl	8000658 <__clzsi2>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__clzsi2>:
 8000658:	211c      	movs	r1, #28
 800065a:	2301      	movs	r3, #1
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0xe>
 8000662:	0c00      	lsrs	r0, r0, #16
 8000664:	3910      	subs	r1, #16
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	4298      	cmp	r0, r3
 800066a:	d301      	bcc.n	8000670 <__clzsi2+0x18>
 800066c:	0a00      	lsrs	r0, r0, #8
 800066e:	3908      	subs	r1, #8
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	4298      	cmp	r0, r3
 8000674:	d301      	bcc.n	800067a <__clzsi2+0x22>
 8000676:	0900      	lsrs	r0, r0, #4
 8000678:	3904      	subs	r1, #4
 800067a:	a202      	add	r2, pc, #8	; (adr r2, 8000684 <__clzsi2+0x2c>)
 800067c:	5c10      	ldrb	r0, [r2, r0]
 800067e:	1840      	adds	r0, r0, r1
 8000680:	4770      	bx	lr
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	02020304 	.word	0x02020304
 8000688:	01010101 	.word	0x01010101
	...

08000694 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000694:	b5b0      	push	{r4, r5, r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	000a      	movs	r2, r1
 800069e:	1cfb      	adds	r3, r7, #3
 80006a0:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	0019      	movs	r1, r3
 80006ac:	0010      	movs	r0, r2
 80006ae:	f000 fbc5 	bl	8000e3c <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	250f      	movs	r5, #15
 80006b8:	197c      	adds	r4, r7, r5
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fbe0 	bl	8000e80 <SX1278_hw_SPIReadByte>
 80006c0:	0003      	movs	r3, r0
 80006c2:	7023      	strb	r3, [r4, #0]
	SX1278_hw_SetNSS(module->hw, 1);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2101      	movs	r1, #1
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fb7b 	bl	8000dc6 <SX1278_hw_SetNSS>
	return tmp;
 80006d0:	197b      	adds	r3, r7, r5
 80006d2:	781b      	ldrb	r3, [r3, #0]
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b004      	add	sp, #16
 80006da:	bdb0      	pop	{r4, r5, r7, pc}

080006dc <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	0008      	movs	r0, r1
 80006e6:	0011      	movs	r1, r2
 80006e8:	1cfb      	adds	r3, r7, #3
 80006ea:	1c02      	adds	r2, r0, #0
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	1cbb      	adds	r3, r7, #2
 80006f0:	1c0a      	adds	r2, r1, #0
 80006f2:	701a      	strb	r2, [r3, #0]
	SX1278_hw_SetNSS(module->hw, 0);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2100      	movs	r1, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fb63 	bl	8000dc6 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	1cfb      	adds	r3, r7, #3
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	4252      	negs	r2, r2
 800070c:	4313      	orrs	r3, r2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	0019      	movs	r1, r3
 8000712:	f000 fb93 	bl	8000e3c <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	1cbb      	adds	r3, r7, #2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	0019      	movs	r1, r3
 8000720:	0010      	movs	r0, r2
 8000722:	f000 fb8b 	bl	8000e3c <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2101      	movs	r1, #1
 800072c:	0018      	movs	r0, r3
 800072e:	f000 fb4a 	bl	8000dc6 <SX1278_hw_SetNSS>
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}

0800073a <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800073a:	b5b0      	push	{r4, r5, r7, lr}
 800073c:	b086      	sub	sp, #24
 800073e:	af00      	add	r7, sp, #0
 8000740:	60f8      	str	r0, [r7, #12]
 8000742:	0008      	movs	r0, r1
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	0019      	movs	r1, r3
 8000748:	240b      	movs	r4, #11
 800074a:	193b      	adds	r3, r7, r4
 800074c:	1c02      	adds	r2, r0, #0
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	200a      	movs	r0, #10
 8000752:	183b      	adds	r3, r7, r0
 8000754:	1c0a      	adds	r2, r1, #0
 8000756:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	if (length <= 1) {
 8000758:	183b      	adds	r3, r7, r0
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d932      	bls.n	80007c6 <SX1278_SPIBurstRead+0x8c>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2100      	movs	r1, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fb2d 	bl	8000dc6 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	193b      	adds	r3, r7, r4
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	0019      	movs	r1, r3
 8000776:	0010      	movs	r0, r2
 8000778:	f000 fb60 	bl	8000e3c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800077c:	2317      	movs	r3, #23
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e010      	b.n	80007a8 <SX1278_SPIBurstRead+0x6e>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6819      	ldr	r1, [r3, #0]
 800078a:	2517      	movs	r5, #23
 800078c:	197b      	adds	r3, r7, r5
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	18d4      	adds	r4, r2, r3
 8000794:	0008      	movs	r0, r1
 8000796:	f000 fb73 	bl	8000e80 <SX1278_hw_SPIReadByte>
 800079a:	0003      	movs	r3, r0
 800079c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	197b      	adds	r3, r7, r5
 80007a4:	3201      	adds	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	2317      	movs	r3, #23
 80007aa:	18fa      	adds	r2, r7, r3
 80007ac:	230a      	movs	r3, #10
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3e6      	bcc.n	8000786 <SX1278_SPIBurstRead+0x4c>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2101      	movs	r1, #1
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fb01 	bl	8000dc6 <SX1278_hw_SetNSS>
 80007c4:	e000      	b.n	80007c8 <SX1278_SPIBurstRead+0x8e>
		return;
 80007c6:	46c0      	nop			; (mov r8, r8)
	}
}
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b006      	add	sp, #24
 80007cc:	bdb0      	pop	{r4, r5, r7, pc}

080007ce <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80007ce:	b590      	push	{r4, r7, lr}
 80007d0:	b087      	sub	sp, #28
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	0008      	movs	r0, r1
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	0019      	movs	r1, r3
 80007dc:	240b      	movs	r4, #11
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	1c02      	adds	r2, r0, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	200a      	movs	r0, #10
 80007e6:	183b      	adds	r3, r7, r0
 80007e8:	1c0a      	adds	r2, r1, #0
 80007ea:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	if (length <= 1) {
 80007ec:	183b      	adds	r3, r7, r0
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d934      	bls.n	800085e <SX1278_SPIBurstWrite+0x90>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2100      	movs	r1, #0
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fae3 	bl	8000dc6 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	6818      	ldr	r0, [r3, #0]
 8000804:	193b      	adds	r3, r7, r4
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	4252      	negs	r2, r2
 800080c:	4313      	orrs	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	0019      	movs	r1, r3
 8000812:	f000 fb13 	bl	8000e3c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000816:	2317      	movs	r3, #23
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e00f      	b.n	8000840 <SX1278_SPIBurstWrite+0x72>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	2417      	movs	r4, #23
 8000826:	193b      	adds	r3, r7, r4
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	0019      	movs	r1, r3
 8000832:	f000 fb03 	bl	8000e3c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000836:	193b      	adds	r3, r7, r4
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	193b      	adds	r3, r7, r4
 800083c:	3201      	adds	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	2317      	movs	r3, #23
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	230a      	movs	r3, #10
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3e7      	bcc.n	8000820 <SX1278_SPIBurstWrite+0x52>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2101      	movs	r1, #1
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fab5 	bl	8000dc6 <SX1278_hw_SetNSS>
 800085c:	e000      	b.n	8000860 <SX1278_SPIBurstWrite+0x92>
		return;
 800085e:	46c0      	nop			; (mov r8, r8)
	}
}
 8000860:	46bd      	mov	sp, r7
 8000862:	b007      	add	sp, #28
 8000864:	bd90      	pop	{r4, r7, pc}
	...

08000868 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086a:	b08b      	sub	sp, #44	; 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6178      	str	r0, [r7, #20]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	0018      	movs	r0, r3
 8000874:	f000 f935 	bl	8000ae2 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000878:	200f      	movs	r0, #15
 800087a:	f000 fb2c 	bl	8000ed6 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	0018      	movs	r0, r3
 8000882:	f000 f93f 	bl	8000b04 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	0b51      	lsrs	r1, r2, #13
 800088e:	04dd      	lsls	r5, r3, #19
 8000890:	430d      	orrs	r5, r1
 8000892:	04d4      	lsls	r4, r2, #19
 8000894:	4a84      	ldr	r2, [pc, #528]	; (8000aa8 <SX1278_config+0x240>)
 8000896:	2300      	movs	r3, #0
 8000898:	0020      	movs	r0, r4
 800089a:	0029      	movs	r1, r5
 800089c:	f7ff fdbc 	bl	8000418 <__aeabi_uldivmod>
 80008a0:	0002      	movs	r2, r0
 80008a2:	000b      	movs	r3, r1
 80008a4:	623a      	str	r2, [r7, #32]
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	041b      	lsls	r3, r3, #16
 80008ac:	6a3a      	ldr	r2, [r7, #32]
 80008ae:	0c12      	lsrs	r2, r2, #16
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	431a      	orrs	r2, r3
 80008b6:	60ba      	str	r2, [r7, #8]
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	0c1b      	lsrs	r3, r3, #16
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	7a3a      	ldrb	r2, [r7, #8]
 80008c0:	210c      	movs	r1, #12
 80008c2:	2410      	movs	r4, #16
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	185b      	adds	r3, r3, r1
 80008c8:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	061b      	lsls	r3, r3, #24
 80008ce:	6a3a      	ldr	r2, [r7, #32]
 80008d0:	0a12      	lsrs	r2, r2, #8
 80008d2:	603a      	str	r2, [r7, #0]
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	431a      	orrs	r2, r3
 80008d8:	603a      	str	r2, [r7, #0]
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	783a      	ldrb	r2, [r7, #0]
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	185b      	adds	r3, r3, r1
 80008e6:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80008e8:	6a3a      	ldr	r2, [r7, #32]
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	1c13      	adds	r3, r2, #0
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	185b      	adds	r3, r3, r1
 80008f4:	709a      	strb	r2, [r3, #2]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	185a      	adds	r2, r3, r1
 80008fa:	6978      	ldr	r0, [r7, #20]
 80008fc:	2303      	movs	r3, #3
 80008fe:	2106      	movs	r1, #6
 8000900:	f7ff ff65 	bl	80007ce <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	2234      	movs	r2, #52	; 0x34
 8000908:	2139      	movs	r1, #57	; 0x39
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff fee6 	bl	80006dc <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	7c1b      	ldrb	r3, [r3, #16]
 8000914:	001a      	movs	r2, r3
 8000916:	4b65      	ldr	r3, [pc, #404]	; (8000aac <SX1278_config+0x244>)
 8000918:	5c9a      	ldrb	r2, [r3, r2]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	2109      	movs	r1, #9
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fedc 	bl	80006dc <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	220b      	movs	r2, #11
 8000928:	210b      	movs	r1, #11
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff fed6 	bl	80006dc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	2223      	movs	r2, #35	; 0x23
 8000934:	210c      	movs	r1, #12
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fed0 	bl	80006dc <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	7c5b      	ldrb	r3, [r3, #17]
 8000940:	001a      	movs	r2, r3
 8000942:	4b5b      	ldr	r3, [pc, #364]	; (8000ab0 <SX1278_config+0x248>)
 8000944:	5c9b      	ldrb	r3, [r3, r2]
 8000946:	2b06      	cmp	r3, #6
 8000948:	d159      	bne.n	80009fe <SX1278_config+0x196>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	7c9b      	ldrb	r3, [r3, #18]
 800094e:	001a      	movs	r2, r3
 8000950:	4b58      	ldr	r3, [pc, #352]	; (8000ab4 <SX1278_config+0x24c>)
 8000952:	5c9b      	ldrb	r3, [r3, r2]
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	7cdb      	ldrb	r3, [r3, #19]
 800095c:	0019      	movs	r1, r3
 800095e:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <SX1278_config+0x250>)
 8000960:	5c5b      	ldrb	r3, [r3, r1]
 8000962:	18db      	adds	r3, r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	18d3      	adds	r3, r2, r3
 8000968:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	211d      	movs	r1, #29
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff feb2 	bl	80006dc <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	7c5b      	ldrb	r3, [r3, #17]
 800097c:	001a      	movs	r2, r3
 800097e:	4b4c      	ldr	r3, [pc, #304]	; (8000ab0 <SX1278_config+0x248>)
 8000980:	5c9b      	ldrb	r3, [r3, r2]
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	7d1b      	ldrb	r3, [r3, #20]
 800098a:	0019      	movs	r1, r3
 800098c:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <SX1278_config+0x254>)
 800098e:	5c5b      	ldrb	r3, [r3, r1]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	18d3      	adds	r3, r2, r3
 8000996:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000998:	3303      	adds	r3, #3
 800099a:	b2da      	uxtb	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	211e      	movs	r1, #30
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff fe9b 	bl	80006dc <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80009a6:	250f      	movs	r5, #15
 80009a8:	0026      	movs	r6, r4
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	195c      	adds	r4, r3, r5
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	2131      	movs	r1, #49	; 0x31
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff fe6e 	bl	8000694 <SX1278_SPIRead>
 80009b8:	0003      	movs	r3, r0
 80009ba:	7023      	strb	r3, [r4, #0]
		tmp &= 0xF8;
 80009bc:	0028      	movs	r0, r5
 80009be:	0034      	movs	r4, r6
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	181b      	adds	r3, r3, r0
 80009c4:	193a      	adds	r2, r7, r4
 80009c6:	1812      	adds	r2, r2, r0
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	2107      	movs	r1, #7
 80009cc:	438a      	bics	r2, r1
 80009ce:	701a      	strb	r2, [r3, #0]
		tmp |= 0x05;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	181b      	adds	r3, r3, r0
 80009d4:	193a      	adds	r2, r7, r4
 80009d6:	1812      	adds	r2, r2, r0
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	2105      	movs	r1, #5
 80009dc:	430a      	orrs	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]
		SX1278_SPIWrite(module, 0x31, tmp);
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	181b      	adds	r3, r3, r0
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	2131      	movs	r1, #49	; 0x31
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fe76 	bl	80006dc <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	220c      	movs	r2, #12
 80009f4:	2137      	movs	r1, #55	; 0x37
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fe70 	bl	80006dc <SX1278_SPIWrite>
 80009fc:	e029      	b.n	8000a52 <SX1278_config+0x1ea>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	7c9b      	ldrb	r3, [r3, #18]
 8000a02:	001a      	movs	r2, r3
 8000a04:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <SX1278_config+0x24c>)
 8000a06:	5c9b      	ldrb	r3, [r3, r2]
 8000a08:	011b      	lsls	r3, r3, #4
 8000a0a:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	7cdb      	ldrb	r3, [r3, #19]
 8000a10:	0019      	movs	r1, r3
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <SX1278_config+0x250>)
 8000a14:	5c5b      	ldrb	r3, [r3, r1]
 8000a16:	18db      	adds	r3, r3, r3
 8000a18:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	211d      	movs	r1, #29
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff fe5a 	bl	80006dc <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	7c5b      	ldrb	r3, [r3, #17]
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <SX1278_config+0x248>)
 8000a30:	5c9b      	ldrb	r3, [r3, r2]
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	7d1b      	ldrb	r3, [r3, #20]
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <SX1278_config+0x254>)
 8000a3e:	5c5b      	ldrb	r3, [r3, r1]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000a44:	18d3      	adds	r3, r2, r3
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	211e      	movs	r1, #30
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff fe45 	bl	80006dc <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2204      	movs	r2, #4
 8000a56:	2126      	movs	r1, #38	; 0x26
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fe3f 	bl	80006dc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2208      	movs	r2, #8
 8000a62:	211f      	movs	r1, #31
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff fe39 	bl	80006dc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2120      	movs	r1, #32
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fe33 	bl	80006dc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2208      	movs	r2, #8
 8000a7a:	2121      	movs	r1, #33	; 0x21
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fe2d 	bl	80006dc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2201      	movs	r2, #1
 8000a86:	2141      	movs	r1, #65	; 0x41
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff fe27 	bl	80006dc <SX1278_SPIWrite>
	module->readBytes = 0;
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	2318      	movs	r3, #24
 8000a92:	33ff      	adds	r3, #255	; 0xff
 8000a94:	2100      	movs	r1, #0
 8000a96:	54d1      	strb	r1, [r2, r3]
	SX1278_standby(module); //Entry standby mode
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 f810 	bl	8000ac0 <SX1278_standby>
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b00b      	add	sp, #44	; 0x2c
 8000aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa8:	01e84800 	.word	0x01e84800
 8000aac:	08005610 	.word	0x08005610
 8000ab0:	08005614 	.word	0x08005614
 8000ab4:	0800561c 	.word	0x0800561c
 8000ab8:	08005628 	.word	0x08005628
 8000abc:	0800562c 	.word	0x0800562c

08000ac0 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2209      	movs	r2, #9
 8000acc:	2101      	movs	r1, #1
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fe04 	bl	80006dc <SX1278_SPIWrite>
	module->status = STANDBY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	759a      	strb	r2, [r3, #22]
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2208      	movs	r2, #8
 8000aee:	2101      	movs	r1, #1
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fdf3 	bl	80006dc <SX1278_SPIWrite>
	module->status = SLEEP;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	759a      	strb	r2, [r3, #22]
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b002      	add	sp, #8
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2288      	movs	r2, #136	; 0x88
 8000b10:	2101      	movs	r1, #1
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff fde2 	bl	80006dc <SX1278_SPIWrite>
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	22ff      	movs	r2, #255	; 0xff
 8000b2c:	2112      	movs	r1, #18
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fdd4 	bl	80006dc <SX1278_SPIWrite>
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000b3c:	b5b0      	push	{r4, r5, r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	240b      	movs	r4, #11
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	1c0a      	adds	r2, r1, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	uint8_t addr;

	module->packetLength = length;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	193a      	adds	r2, r7, r4
 8000b52:	7812      	ldrb	r2, [r2, #0]
 8000b54:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fe85 	bl	8000868 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2284      	movs	r2, #132	; 0x84
 8000b62:	214d      	movs	r1, #77	; 0x4d
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff fdb9 	bl	80006dc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	22ff      	movs	r2, #255	; 0xff
 8000b6e:	2124      	movs	r1, #36	; 0x24
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fdb3 	bl	80006dc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fdad 	bl	80006dc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	223f      	movs	r2, #63	; 0x3f
 8000b86:	2111      	movs	r1, #17
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff fda7 	bl	80006dc <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ffc5 	bl	8000b20 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2122      	movs	r1, #34	; 0x22
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fd9c 	bl	80006dc <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000ba4:	2517      	movs	r5, #23
 8000ba6:	197c      	adds	r4, r7, r5
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	210f      	movs	r1, #15
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fd71 	bl	8000694 <SX1278_SPIRead>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	7023      	strb	r3, [r4, #0]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000bb6:	197b      	adds	r3, r7, r5
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	210d      	movs	r1, #13
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff fd8c 	bl	80006dc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	228d      	movs	r2, #141	; 0x8d
 8000bc8:	2101      	movs	r1, #1
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fd86 	bl	80006dc <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	2318      	movs	r3, #24
 8000bd4:	33ff      	adds	r3, #255	; 0xff
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	54d1      	strb	r1, [r2, r3]

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2118      	movs	r1, #24
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fd58 	bl	8000694 <SX1278_SPIRead>
 8000be4:	0003      	movs	r3, r0
 8000be6:	001a      	movs	r2, r3
 8000be8:	2304      	movs	r3, #4
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d104      	bne.n	8000bfa <SX1278_LoRaEntryRx+0xbe>
			module->status = RX;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	759a      	strb	r2, [r3, #22]
			return 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e014      	b.n	8000c24 <SX1278_LoRaEntryRx+0xe8>
		}
		if (--timeout == 0) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10a      	bne.n	8000c1c <SX1278_LoRaEntryRx+0xe0>
			SX1278_hw_Reset(module->hw);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 f8f1 	bl	8000df2 <SX1278_hw_Reset>
			SX1278_config(module);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff fe28 	bl	8000868 <SX1278_config>
			return 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e003      	b.n	8000c24 <SX1278_LoRaEntryRx+0xe8>
		}
		SX1278_hw_DelayMs(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 f95a 	bl	8000ed6 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000c22:	e7da      	b.n	8000bda <SX1278_LoRaEntryRx+0x9e>
	}
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b006      	add	sp, #24
 8000c2a:	bdb0      	pop	{r4, r5, r7, pc}

08000c2c <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 f958 	bl	8000eee <SX1278_hw_GetDIO0>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d03e      	beq.n	8000cc0 <SX1278_LoRaRxPacket+0x94>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3317      	adds	r3, #23
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	0052      	lsls	r2, r2, #1
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f004 f812 	bl	8004c76 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000c52:	250e      	movs	r5, #14
 8000c54:	197c      	adds	r4, r7, r5
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2110      	movs	r1, #16
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fd1a 	bl	8000694 <SX1278_SPIRead>
 8000c60:	0003      	movs	r3, r0
 8000c62:	7023      	strb	r3, [r4, #0]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000c64:	197b      	adds	r3, r7, r5
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	210d      	movs	r1, #13
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fd35 	bl	80006dc <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7c5b      	ldrb	r3, [r3, #17]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d105      	bne.n	8000c86 <SX1278_LoRaRxPacket+0x5a>
			packet_size = module->packetLength;
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	7d52      	ldrb	r2, [r2, #21]
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e008      	b.n	8000c98 <SX1278_LoRaRxPacket+0x6c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000c86:	230f      	movs	r3, #15
 8000c88:	18fc      	adds	r4, r7, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2113      	movs	r1, #19
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff fd00 	bl	8000694 <SX1278_SPIRead>
 8000c94:	0003      	movs	r3, r0
 8000c96:	7023      	strb	r3, [r4, #0]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3317      	adds	r3, #23
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	240f      	movs	r4, #15
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f7ff fd47 	bl	800073a <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	1939      	adds	r1, r7, r4
 8000cb0:	2318      	movs	r3, #24
 8000cb2:	33ff      	adds	r3, #255	; 0xff
 8000cb4:	7809      	ldrb	r1, [r1, #0]
 8000cb6:	54d1      	strb	r1, [r2, r3]
		SX1278_clearLoRaIrq(module);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff ff30 	bl	8000b20 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	2318      	movs	r3, #24
 8000cc4:	33ff      	adds	r3, #255	; 0xff
 8000cc6:	5cd3      	ldrb	r3, [r2, r3]
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b004      	add	sp, #16
 8000cce:	bdb0      	pop	{r4, r5, r7, pc}

08000cd0 <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	603a      	str	r2, [r7, #0]
 8000cda:	607b      	str	r3, [r7, #4]
	SX1278_hw_init(module->hw);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 f85a 	bl	8000d9a <SX1278_hw_init>
	module->frequency = frequency;
 8000ce6:	68f9      	ldr	r1, [r7, #12]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	608a      	str	r2, [r1, #8]
 8000cee:	60cb      	str	r3, [r1, #12]
	module->power = power;
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	2318      	movs	r3, #24
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	7413      	strb	r3, [r2, #16]
	module->LoRa_SF = LoRa_SF;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	221c      	movs	r2, #28
 8000cfe:	18ba      	adds	r2, r7, r2
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2220      	movs	r2, #32
 8000d08:	18ba      	adds	r2, r7, r2
 8000d0a:	7812      	ldrb	r2, [r2, #0]
 8000d0c:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2224      	movs	r2, #36	; 0x24
 8000d12:	18ba      	adds	r2, r7, r2
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	7812      	ldrb	r2, [r2, #0]
 8000d20:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	222c      	movs	r2, #44	; 0x2c
 8000d26:	18ba      	adds	r2, r7, r2
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff fd9a 	bl	8000868 <SX1278_config>
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b004      	add	sp, #16
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	701a      	strb	r2, [r3, #0]
	if (length != module->readBytes)
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	2318      	movs	r3, #24
 8000d4e:	33ff      	adds	r3, #255	; 0xff
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	1dfa      	adds	r2, r7, #7
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d005      	beq.n	8000d66 <SX1278_read+0x2a>
		length = module->readBytes;
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	68f9      	ldr	r1, [r7, #12]
 8000d5e:	2218      	movs	r2, #24
 8000d60:	32ff      	adds	r2, #255	; 0xff
 8000d62:	5c8a      	ldrb	r2, [r1, r2]
 8000d64:	701a      	strb	r2, [r3, #0]
	memcpy(rxBuf, module->rxBuffer, length);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3317      	adds	r3, #23
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0018      	movs	r0, r3
 8000d74:	f003 ff76 	bl	8004c64 <memcpy>
	rxBuf[length] = '\0';
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	18d3      	adds	r3, r2, r3
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	2318      	movs	r3, #24
 8000d88:	33ff      	adds	r3, #255	; 0xff
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	54d1      	strb	r1, [r2, r3]
	return length;
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <SX1278_hw_init>:

#include "SX1278_hw.h"
#include <string.h>
#include "stm32l0xx_hal.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2101      	movs	r1, #1
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f80d 	bl	8000dc6 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6858      	ldr	r0, [r3, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	2201      	movs	r2, #1
 8000db8:	0019      	movs	r1, r3
 8000dba:	f001 ffbc 	bl	8002d36 <HAL_GPIO_WritePin>
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6958      	ldr	r0, [r3, #20]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	b299      	uxth	r1, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	425a      	negs	r2, r3
 8000de0:	4153      	adcs	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	001a      	movs	r2, r3
 8000de6:	f001 ffa6 	bl	8002d36 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff ffe1 	bl	8000dc6 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6858      	ldr	r0, [r3, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	0019      	movs	r1, r3
 8000e12:	f001 ff90 	bl	8002d36 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 f85d 	bl	8000ed6 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6858      	ldr	r0, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	2201      	movs	r2, #1
 8000e28:	0019      	movs	r1, r3
 8000e2a:	f001 ff84 	bl	8002d36 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000e2e:	2064      	movs	r0, #100	; 0x64
 8000e30:	f000 f851 	bl	8000ed6 <SX1278_hw_DelayMs>
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	000a      	movs	r2, r1
 8000e46:	1cfb      	adds	r3, r7, #3
 8000e48:	701a      	strb	r2, [r3, #0]
	SX1278_hw_SetNSS(hw, 0);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff ffb9 	bl	8000dc6 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6998      	ldr	r0, [r3, #24]
 8000e58:	23fa      	movs	r3, #250	; 0xfa
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	1cf9      	adds	r1, r7, #3
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f003 fade 	bl	8004420 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f003 fde9 	bl	8004a42 <HAL_SPI_GetState>
 8000e70:	0003      	movs	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d1f7      	bne.n	8000e66 <SX1278_hw_SPICommand+0x2a>
		;
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000e88:	240f      	movs	r4, #15
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
	uint8_t rxByte = 0x00;
 8000e90:	250e      	movs	r5, #14
 8000e92:	197b      	adds	r3, r7, r5
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]

	SX1278_hw_SetNSS(hw, 0);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff ff92 	bl	8000dc6 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6998      	ldr	r0, [r3, #24]
 8000ea6:	197a      	adds	r2, r7, r5
 8000ea8:	1939      	adds	r1, r7, r4
 8000eaa:	23fa      	movs	r3, #250	; 0xfa
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f003 fc0b 	bl	80046cc <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f003 fdc0 	bl	8004a42 <HAL_SPI_GetState>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d1f7      	bne.n	8000eb8 <SX1278_hw_SPIReadByte+0x38>
		;
	return rxByte;
 8000ec8:	230e      	movs	r3, #14
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	781b      	ldrb	r3, [r3, #0]
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b004      	add	sp, #16
 8000ed4:	bdb0      	pop	{r4, r5, r7, pc}

08000ed6 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 f84d 	bl	8001f80 <HAL_Delay>
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}

08000eee <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	0019      	movs	r1, r3
 8000f02:	0010      	movs	r0, r2
 8000f04:	f001 fefa 	bl	8002cfc <HAL_GPIO_ReadPin>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	425a      	negs	r2, r3
 8000f0e:	4153      	adcs	r3, r2
 8000f10:	b2db      	uxtb	r3, r3
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <setBrightness>:
    0b0010010010001001, // }
    0b0000010100100000, // ~
    0b0011111111111111,

};
void setBrightness(uint8_t b) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	0002      	movs	r2, r0
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	701a      	strb	r2, [r3, #0]
  if (b > 15)
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d902      	bls.n	8000f36 <setBrightness+0x1a>
    b = 15;
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	220f      	movs	r2, #15
 8000f34:	701a      	strb	r2, [r3, #0]
  uint8_t pData = HT16K33_CMD_BRIGHTNESS | b;
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	230f      	movs	r3, #15
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	701a      	strb	r2, [r3, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, i2c_addr, &pData, sizeof(pData), 1000) != HAL_OK);
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	18fa      	adds	r2, r7, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <setBrightness+0x50>)
 8000f50:	23fa      	movs	r3, #250	; 0xfa
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	21e0      	movs	r1, #224	; 0xe0
 8000f5a:	f001 ff9f 	bl	8002e9c <HAL_I2C_Master_Transmit>
 8000f5e:	1e03      	subs	r3, r0, #0
 8000f60:	d1f3      	bne.n	8000f4a <setBrightness+0x2e>
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b004      	add	sp, #16
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000f0 	.word	0x200000f0

08000f70 <blinkRate>:

void blinkRate(uint8_t b) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	0002      	movs	r2, r0
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	701a      	strb	r2, [r3, #0]
  if (b > 3)
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d902      	bls.n	8000f8a <blinkRate+0x1a>
    b = 0; // turn off if not sure
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]

  uint8_t pData = HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1);
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	227f      	movs	r2, #127	; 0x7f
 8000f94:	4252      	negs	r2, r2
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	701a      	strb	r2, [r3, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, i2c_addr, &pData, sizeof(pData), 1000) != HAL_OK);
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	18fa      	adds	r2, r7, r3
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <blinkRate+0x58>)
 8000faa:	23fa      	movs	r3, #250	; 0xfa
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	21e0      	movs	r1, #224	; 0xe0
 8000fb4:	f001 ff72 	bl	8002e9c <HAL_I2C_Master_Transmit>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d1f3      	bne.n	8000fa4 <blinkRate+0x34>
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b004      	add	sp, #16
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	200000f0 	.word	0x200000f0

08000fcc <HKbegin>:

void HKbegin(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af02      	add	r7, sp, #8

  uint8_t pData = 0x21;
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	2221      	movs	r2, #33	; 0x21
 8000fd6:	701a      	strb	r2, [r3, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, i2c_addr, &pData, sizeof(pData), 1000) != HAL_OK);
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	1dfa      	adds	r2, r7, #7
 8000fdc:	480b      	ldr	r0, [pc, #44]	; (800100c <HKbegin+0x40>)
 8000fde:	23fa      	movs	r3, #250	; 0xfa
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	21e0      	movs	r1, #224	; 0xe0
 8000fe8:	f001 ff58 	bl	8002e9c <HAL_I2C_Master_Transmit>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d1f4      	bne.n	8000fda <HKbegin+0xe>

  // internal RAM powers up with garbage/random values.
  // ensure internal RAM is cleared before turning on display
  // this ensures that no garbage pixels show up on the display
  // when it is turned on.
  clear();
 8000ff0:	f000 f854 	bl	800109c <clear>
  writeDisplay();
 8000ff4:	f000 f80c 	bl	8001010 <writeDisplay>

  blinkRate(HT16K33_BLINK_OFF);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ffb9 	bl	8000f70 <blinkRate>

  setBrightness(15); // max brightness
 8000ffe:	200f      	movs	r0, #15
 8001000:	f7ff ff8c 	bl	8000f1c <setBrightness>
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000f0 	.word	0x200000f0

08001010 <writeDisplay>:

void writeDisplay(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af02      	add	r7, sp, #8
  uint8_t pData[17];
  pData[0] = 0x00; // start at address $00
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < 8; i++) {
 800101c:	2317      	movs	r3, #23
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e01f      	b.n	8001066 <writeDisplay+0x56>
    pData[2*i+1] = displaybuffer[i] & 0xFF;
 8001026:	2017      	movs	r0, #23
 8001028:	183b      	adds	r3, r7, r0
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <writeDisplay+0x84>)
 800102e:	0052      	lsls	r2, r2, #1
 8001030:	5ad2      	ldrh	r2, [r2, r3]
 8001032:	183b      	adds	r3, r7, r0
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	3301      	adds	r3, #1
 800103a:	b2d1      	uxtb	r1, r2
 800103c:	1d3a      	adds	r2, r7, #4
 800103e:	54d1      	strb	r1, [r2, r3]
    pData[2*i+2] = displaybuffer[i] >> 8;
 8001040:	183b      	adds	r3, r7, r0
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <writeDisplay+0x84>)
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	5ad3      	ldrh	r3, [r2, r3]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	b29a      	uxth	r2, r3
 800104e:	183b      	adds	r3, r7, r0
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	b2d1      	uxtb	r1, r2
 8001058:	1d3a      	adds	r2, r7, #4
 800105a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < 8; i++) {
 800105c:	183b      	adds	r3, r7, r0
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	183b      	adds	r3, r7, r0
 8001062:	3201      	adds	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	2317      	movs	r3, #23
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b07      	cmp	r3, #7
 800106e:	d9da      	bls.n	8001026 <writeDisplay+0x16>
  }
  while(HAL_I2C_Master_Transmit(&hi2c1, i2c_addr, pData, sizeof(pData), 1000) != HAL_OK);
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	1d3a      	adds	r2, r7, #4
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <writeDisplay+0x88>)
 8001076:	23fa      	movs	r3, #250	; 0xfa
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2311      	movs	r3, #17
 800107e:	21e0      	movs	r1, #224	; 0xe0
 8001080:	f001 ff0c 	bl	8002e9c <HAL_I2C_Master_Transmit>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d1f4      	bne.n	8001072 <writeDisplay+0x62>
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b006      	add	sp, #24
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	2000013c 	.word	0x2000013c
 8001098:	200000f0 	.word	0x200000f0

0800109c <clear>:

void clear(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < 8; i++) {
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e00a      	b.n	80010c0 <clear+0x24>
    displaybuffer[i] = 0;
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <clear+0x38>)
 80010b0:	0052      	lsls	r2, r2, #1
 80010b2:	2100      	movs	r1, #0
 80010b4:	52d1      	strh	r1, [r2, r3]
  for (uint8_t i = 0; i < 8; i++) {
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	3201      	adds	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b07      	cmp	r3, #7
 80010c6:	d9f0      	bls.n	80010aa <clear+0xe>
  }
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	2000013c 	.word	0x2000013c

080010d8 <writeDigitRaw>:

/******************************* QUAD ALPHANUM OBJECT */

void writeDigitRaw(uint8_t n, uint16_t bitmask) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	0002      	movs	r2, r0
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	1c0a      	adds	r2, r1, #0
 80010e8:	801a      	strh	r2, [r3, #0]
  displaybuffer[n] = bitmask;
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <writeDigitRaw+0x28>)
 80010f0:	0052      	lsls	r2, r2, #1
 80010f2:	1d39      	adds	r1, r7, #4
 80010f4:	8809      	ldrh	r1, [r1, #0]
 80010f6:	52d1      	strh	r1, [r2, r3]
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000013c 	.word	0x2000013c

08001104 <writeDigitAscii>:

void writeDigitAscii(uint8_t n, uint8_t a) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	0002      	movs	r2, r0
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	1dbb      	adds	r3, r7, #6
 8001112:	1c0a      	adds	r2, r1, #0
 8001114:	701a      	strb	r2, [r3, #0]
  uint16_t font = alphafonttable[a];
 8001116:	1dbb      	adds	r3, r7, #6
 8001118:	7819      	ldrb	r1, [r3, #0]
 800111a:	200e      	movs	r0, #14
 800111c:	183b      	adds	r3, r7, r0
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <writeDigitAscii+0x38>)
 8001120:	0049      	lsls	r1, r1, #1
 8001122:	5a8a      	ldrh	r2, [r1, r2]
 8001124:	801a      	strh	r2, [r3, #0]

  displaybuffer[n] = font;
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <writeDigitAscii+0x3c>)
 800112c:	0052      	lsls	r2, r2, #1
 800112e:	1839      	adds	r1, r7, r0
 8001130:	8809      	ldrh	r1, [r1, #0]
 8001132:	52d1      	strh	r1, [r2, r3]
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}
 800113c:	08005630 	.word	0x08005630
 8001140:	2000013c 	.word	0x2000013c

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114a:	f000 fea9 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114e:	f000 fb1d 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001152:	f000 fc79 	bl	8001a48 <MX_GPIO_Init>
  MX_ADC_Init();
 8001156:	f000 fb7d 	bl	8001854 <MX_ADC_Init>
  MX_I2C1_Init();
 800115a:	f000 fbfd 	bl	8001958 <MX_I2C1_Init>
  MX_SPI2_Init();
 800115e:	f000 fc3b 	bl	80019d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

		//initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001162:	4bec      	ldr	r3, [pc, #944]	; (8001514 <main+0x3d0>)
 8001164:	22a0      	movs	r2, #160	; 0xa0
 8001166:	05d2      	lsls	r2, r2, #23
 8001168:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 800116a:	4bea      	ldr	r3, [pc, #936]	; (8001514 <main+0x3d0>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = EN_GPIO_Port;
 8001172:	4be8      	ldr	r3, [pc, #928]	; (8001514 <main+0x3d0>)
 8001174:	4ae8      	ldr	r2, [pc, #928]	; (8001518 <main+0x3d4>)
 8001176:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = EN_Pin;
 8001178:	4be6      	ldr	r3, [pc, #920]	; (8001514 <main+0x3d0>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	0152      	lsls	r2, r2, #5
 800117e:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 8001180:	4be4      	ldr	r3, [pc, #912]	; (8001514 <main+0x3d0>)
 8001182:	22a0      	movs	r2, #160	; 0xa0
 8001184:	05d2      	lsls	r2, r2, #23
 8001186:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 8001188:	4be2      	ldr	r3, [pc, #904]	; (8001514 <main+0x3d0>)
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	00d2      	lsls	r2, r2, #3
 800118e:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi2;
 8001190:	4be0      	ldr	r3, [pc, #896]	; (8001514 <main+0x3d0>)
 8001192:	4ae2      	ldr	r2, [pc, #904]	; (800151c <main+0x3d8>)
 8001194:	619a      	str	r2, [r3, #24]
  SX1278.hw = &SX1278_hw;
 8001196:	4be2      	ldr	r3, [pc, #904]	; (8001520 <main+0x3dc>)
 8001198:	4ade      	ldr	r2, [pc, #888]	; (8001514 <main+0x3d0>)
 800119a:	601a      	str	r2, [r3, #0]

  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7, SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
 800119c:	4ae1      	ldr	r2, [pc, #900]	; (8001524 <main+0x3e0>)
 800119e:	2300      	movs	r3, #0
 80011a0:	49df      	ldr	r1, [pc, #892]	; (8001520 <main+0x3dc>)
 80011a2:	200a      	movs	r0, #10
 80011a4:	9005      	str	r0, [sp, #20]
 80011a6:	2000      	movs	r0, #0
 80011a8:	9004      	str	r0, [sp, #16]
 80011aa:	2000      	movs	r0, #0
 80011ac:	9003      	str	r0, [sp, #12]
 80011ae:	2007      	movs	r0, #7
 80011b0:	9002      	str	r0, [sp, #8]
 80011b2:	2001      	movs	r0, #1
 80011b4:	9001      	str	r0, [sp, #4]
 80011b6:	2001      	movs	r0, #1
 80011b8:	9000      	str	r0, [sp, #0]
 80011ba:	0008      	movs	r0, r1
 80011bc:	f7ff fd88 	bl	8000cd0 <SX1278_init>
  ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80011c0:	23fa      	movs	r3, #250	; 0xfa
 80011c2:	00da      	lsls	r2, r3, #3
 80011c4:	4bd6      	ldr	r3, [pc, #856]	; (8001520 <main+0x3dc>)
 80011c6:	2110      	movs	r1, #16
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff fcb7 	bl	8000b3c <SX1278_LoRaEntryRx>
 80011ce:	0002      	movs	r2, r0
 80011d0:	4bd5      	ldr	r3, [pc, #852]	; (8001528 <main+0x3e4>)
 80011d2:	601a      	str	r2, [r3, #0]

  HKbegin();  // pass in the address
 80011d4:	f7ff fefa 	bl	8000fcc <HKbegin>
  writeDigitRaw(3, 0x0);
 80011d8:	2100      	movs	r1, #0
 80011da:	2003      	movs	r0, #3
 80011dc:	f7ff ff7c 	bl	80010d8 <writeDigitRaw>
  writeDigitRaw(0, 0xFFFF);
 80011e0:	4bd2      	ldr	r3, [pc, #840]	; (800152c <main+0x3e8>)
 80011e2:	0019      	movs	r1, r3
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff ff77 	bl	80010d8 <writeDigitRaw>
  writeDisplay();
 80011ea:	f7ff ff11 	bl	8001010 <writeDisplay>
  HAL_Delay(200);
 80011ee:	20c8      	movs	r0, #200	; 0xc8
 80011f0:	f000 fec6 	bl	8001f80 <HAL_Delay>
  writeDigitRaw(0, 0x0);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff ff6e 	bl	80010d8 <writeDigitRaw>
  writeDigitRaw(1, 0xFFFF);
 80011fc:	4bcb      	ldr	r3, [pc, #812]	; (800152c <main+0x3e8>)
 80011fe:	0019      	movs	r1, r3
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ff69 	bl	80010d8 <writeDigitRaw>
  writeDisplay();
 8001206:	f7ff ff03 	bl	8001010 <writeDisplay>
  HAL_Delay(200);
 800120a:	20c8      	movs	r0, #200	; 0xc8
 800120c:	f000 feb8 	bl	8001f80 <HAL_Delay>
  writeDigitRaw(1, 0x0);
 8001210:	2100      	movs	r1, #0
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff ff60 	bl	80010d8 <writeDigitRaw>
  writeDigitRaw(2, 0xFFFF);
 8001218:	4bc4      	ldr	r3, [pc, #784]	; (800152c <main+0x3e8>)
 800121a:	0019      	movs	r1, r3
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff ff5b 	bl	80010d8 <writeDigitRaw>
  writeDisplay();
 8001222:	f7ff fef5 	bl	8001010 <writeDisplay>
  HAL_Delay(200);
 8001226:	20c8      	movs	r0, #200	; 0xc8
 8001228:	f000 feaa 	bl	8001f80 <HAL_Delay>
  writeDigitRaw(2, 0x0);
 800122c:	2100      	movs	r1, #0
 800122e:	2002      	movs	r0, #2
 8001230:	f7ff ff52 	bl	80010d8 <writeDigitRaw>
  writeDigitRaw(3, 0xFFFF);
 8001234:	4bbd      	ldr	r3, [pc, #756]	; (800152c <main+0x3e8>)
 8001236:	0019      	movs	r1, r3
 8001238:	2003      	movs	r0, #3
 800123a:	f7ff ff4d 	bl	80010d8 <writeDigitRaw>
  writeDisplay();
 800123e:	f7ff fee7 	bl	8001010 <writeDisplay>
  HAL_Delay(200);
 8001242:	20c8      	movs	r0, #200	; 0xc8
 8001244:	f000 fe9c 	bl	8001f80 <HAL_Delay>

  clear();
 8001248:	f7ff ff28 	bl	800109c <clear>
  writeDisplay();
 800124c:	f7ff fee0 	bl	8001010 <writeDisplay>

 char displaybuffer[4] = {' ', ' ', ' ', ' '};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4ab7      	ldr	r2, [pc, #732]	; (8001530 <main+0x3ec>)
 8001254:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc);
 8001256:	4bb7      	ldr	r3, [pc, #732]	; (8001534 <main+0x3f0>)
 8001258:	0018      	movs	r0, r3
 800125a:	f001 f829 	bl	80022b0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1000);
 800125e:	23fa      	movs	r3, #250	; 0xfa
 8001260:	009a      	lsls	r2, r3, #2
 8001262:	4bb4      	ldr	r3, [pc, #720]	; (8001534 <main+0x3f0>)
 8001264:	0011      	movs	r1, r2
 8001266:	0018      	movs	r0, r3
 8001268:	f001 f8b6 	bl	80023d8 <HAL_ADC_PollForConversion>
	  HAL_Delay(20);
 800126c:	2014      	movs	r0, #20
 800126e:	f000 fe87 	bl	8001f80 <HAL_Delay>
	  set0 =  HAL_ADC_GetValue(&hadc);
 8001272:	4bb0      	ldr	r3, [pc, #704]	; (8001534 <main+0x3f0>)
 8001274:	0018      	movs	r0, r3
 8001276:	f001 f945 	bl	8002504 <HAL_ADC_GetValue>
 800127a:	0003      	movs	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	4bae      	ldr	r3, [pc, #696]	; (8001538 <main+0x3f4>)
 8001280:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc, 1000);
 8001282:	23fa      	movs	r3, #250	; 0xfa
 8001284:	009a      	lsls	r2, r3, #2
 8001286:	4bab      	ldr	r3, [pc, #684]	; (8001534 <main+0x3f0>)
 8001288:	0011      	movs	r1, r2
 800128a:	0018      	movs	r0, r3
 800128c:	f001 f8a4 	bl	80023d8 <HAL_ADC_PollForConversion>
	  HAL_Delay(20);
 8001290:	2014      	movs	r0, #20
 8001292:	f000 fe75 	bl	8001f80 <HAL_Delay>
	  set1 =  HAL_ADC_GetValue(&hadc);
 8001296:	4ba7      	ldr	r3, [pc, #668]	; (8001534 <main+0x3f0>)
 8001298:	0018      	movs	r0, r3
 800129a:	f001 f933 	bl	8002504 <HAL_ADC_GetValue>
 800129e:	0003      	movs	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4ba6      	ldr	r3, [pc, #664]	; (800153c <main+0x3f8>)
 80012a4:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc, 1000);
 80012a6:	23fa      	movs	r3, #250	; 0xfa
 80012a8:	009a      	lsls	r2, r3, #2
 80012aa:	4ba2      	ldr	r3, [pc, #648]	; (8001534 <main+0x3f0>)
 80012ac:	0011      	movs	r1, r2
 80012ae:	0018      	movs	r0, r3
 80012b0:	f001 f892 	bl	80023d8 <HAL_ADC_PollForConversion>
	  HAL_Delay(20);
 80012b4:	2014      	movs	r0, #20
 80012b6:	f000 fe63 	bl	8001f80 <HAL_Delay>
	  set2 =  HAL_ADC_GetValue(&hadc);
 80012ba:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <main+0x3f0>)
 80012bc:	0018      	movs	r0, r3
 80012be:	f001 f921 	bl	8002504 <HAL_ADC_GetValue>
 80012c2:	0003      	movs	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b9e      	ldr	r3, [pc, #632]	; (8001540 <main+0x3fc>)
 80012c8:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 80012ca:	4b9a      	ldr	r3, [pc, #616]	; (8001534 <main+0x3f0>)
 80012cc:	0018      	movs	r0, r3
 80012ce:	f001 f843 	bl	8002358 <HAL_ADC_Stop>

	  if(abs(set0-mem0)>40){
 80012d2:	4b99      	ldr	r3, [pc, #612]	; (8001538 <main+0x3f4>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	001a      	movs	r2, r3
 80012d8:	4b9a      	ldr	r3, [pc, #616]	; (8001544 <main+0x400>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	17da      	asrs	r2, r3, #31
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	4053      	eors	r3, r2
 80012e4:	2b28      	cmp	r3, #40	; 0x28
 80012e6:	dd12      	ble.n	800130e <main+0x1ca>
		  mem0 = set0;
 80012e8:	4b93      	ldr	r3, [pc, #588]	; (8001538 <main+0x3f4>)
 80012ea:	881a      	ldrh	r2, [r3, #0]
 80012ec:	4b95      	ldr	r3, [pc, #596]	; (8001544 <main+0x400>)
 80012ee:	801a      	strh	r2, [r3, #0]
		  setBrightness(set0 * 15/4096);
 80012f0:	4b91      	ldr	r3, [pc, #580]	; (8001538 <main+0x3f4>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	001a      	movs	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	d502      	bpl.n	8001304 <main+0x1c0>
 80012fe:	4a92      	ldr	r2, [pc, #584]	; (8001548 <main+0x404>)
 8001300:	4694      	mov	ip, r2
 8001302:	4463      	add	r3, ip
 8001304:	131b      	asrs	r3, r3, #12
 8001306:	b2db      	uxtb	r3, r3
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff fe07 	bl	8000f1c <setBrightness>
	  }

	  if(abs(set1-mem1)>40){
 800130e:	4b8b      	ldr	r3, [pc, #556]	; (800153c <main+0x3f8>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	001a      	movs	r2, r3
 8001314:	4b8d      	ldr	r3, [pc, #564]	; (800154c <main+0x408>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	17da      	asrs	r2, r3, #31
 800131c:	189b      	adds	r3, r3, r2
 800131e:	4053      	eors	r3, r2
 8001320:	2b28      	cmp	r3, #40	; 0x28
 8001322:	dc00      	bgt.n	8001326 <main+0x1e2>
 8001324:	e0ad      	b.n	8001482 <main+0x33e>
		  mem1 = set1;
 8001326:	4b85      	ldr	r3, [pc, #532]	; (800153c <main+0x3f8>)
 8001328:	881a      	ldrh	r2, [r3, #0]
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <main+0x408>)
 800132c:	801a      	strh	r2, [r3, #0]
		  channel = (set1-40)/410;
 800132e:	4b83      	ldr	r3, [pc, #524]	; (800153c <main+0x3f8>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	3b28      	subs	r3, #40	; 0x28
 8001334:	22cd      	movs	r2, #205	; 0xcd
 8001336:	0051      	lsls	r1, r2, #1
 8001338:	0018      	movs	r0, r3
 800133a:	f7fe ff81 	bl	8000240 <__divsi3>
 800133e:	0003      	movs	r3, r0
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b83      	ldr	r3, [pc, #524]	; (8001550 <main+0x40c>)
 8001344:	701a      	strb	r2, [r3, #0]
		  sprintf(displaybuffer, "%d", channel);
 8001346:	4b82      	ldr	r3, [pc, #520]	; (8001550 <main+0x40c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	001a      	movs	r2, r3
 800134c:	4981      	ldr	r1, [pc, #516]	; (8001554 <main+0x410>)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	0018      	movs	r0, r3
 8001352:	f003 fc99 	bl	8004c88 <siprintf>
		  uint8_t stringleng = strlen(displaybuffer);
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	0018      	movs	r0, r3
 800135a:	f7fe fed5 	bl	8000108 <strlen>
 800135e:	0002      	movs	r2, r0
 8001360:	230a      	movs	r3, #10
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i=0;i<4;i++){
 8001366:	230f      	movs	r3, #15
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	e02c      	b.n	80013ca <main+0x286>
			  if(i < stringleng){
 8001370:	210f      	movs	r1, #15
 8001372:	187a      	adds	r2, r7, r1
 8001374:	200a      	movs	r0, #10
 8001376:	183b      	adds	r3, r7, r0
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d20f      	bcs.n	80013a0 <main+0x25c>
				  writeDigitAscii(4-stringleng+i, displaybuffer[i]);
 8001380:	187a      	adds	r2, r7, r1
 8001382:	183b      	adds	r3, r7, r0
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3304      	adds	r3, #4
 800138e:	b2d8      	uxtb	r0, r3
 8001390:	187b      	adds	r3, r7, r1
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	1d3a      	adds	r2, r7, #4
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	0019      	movs	r1, r3
 800139a:	f7ff feb3 	bl	8001104 <writeDigitAscii>
 800139e:	e00e      	b.n	80013be <main+0x27a>
			  }
			  else {
				  writeDigitAscii(4-stringleng-i, 32);
 80013a0:	230a      	movs	r3, #10
 80013a2:	18fa      	adds	r2, r7, r3
 80013a4:	230f      	movs	r3, #15
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	18d3      	adds	r3, r2, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2204      	movs	r2, #4
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2120      	movs	r1, #32
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fea3 	bl	8001104 <writeDigitAscii>
		  for (uint8_t i=0;i<4;i++){
 80013be:	210f      	movs	r1, #15
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	3201      	adds	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	230f      	movs	r3, #15
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d9cd      	bls.n	8001370 <main+0x22c>
			  }
		  }
		  writeDigitAscii(0,'C');
 80013d4:	2143      	movs	r1, #67	; 0x43
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff fe94 	bl	8001104 <writeDigitAscii>
		  writeDisplay();
 80013dc:	f7ff fe18 	bl	8001010 <writeDisplay>
		  HAL_Delay(2000);
 80013e0:	23fa      	movs	r3, #250	; 0xfa
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	0018      	movs	r0, r3
 80013e6:	f000 fdcb 	bl	8001f80 <HAL_Delay>
		  sprintf(displaybuffer, "%d", dis);
 80013ea:	4b5b      	ldr	r3, [pc, #364]	; (8001558 <main+0x414>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	001a      	movs	r2, r3
 80013f0:	4958      	ldr	r1, [pc, #352]	; (8001554 <main+0x410>)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	0018      	movs	r0, r3
 80013f6:	f003 fc47 	bl	8004c88 <siprintf>
		  stringleng = strlen(displaybuffer);
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7fe fe83 	bl	8000108 <strlen>
 8001402:	0002      	movs	r2, r0
 8001404:	230a      	movs	r3, #10
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i=0;i<4;i++){
 800140a:	230e      	movs	r3, #14
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e02c      	b.n	800146e <main+0x32a>
			  if(i < stringleng){
 8001414:	210e      	movs	r1, #14
 8001416:	187a      	adds	r2, r7, r1
 8001418:	200a      	movs	r0, #10
 800141a:	183b      	adds	r3, r7, r0
 800141c:	7812      	ldrb	r2, [r2, #0]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d20f      	bcs.n	8001444 <main+0x300>
				  writeDigitAscii(4-stringleng+i, displaybuffer[i]);
 8001424:	187a      	adds	r2, r7, r1
 8001426:	183b      	adds	r3, r7, r0
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	3304      	adds	r3, #4
 8001432:	b2d8      	uxtb	r0, r3
 8001434:	187b      	adds	r3, r7, r1
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	1d3a      	adds	r2, r7, #4
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	0019      	movs	r1, r3
 800143e:	f7ff fe61 	bl	8001104 <writeDigitAscii>
 8001442:	e00e      	b.n	8001462 <main+0x31e>
			  }
			  else {
				  writeDigitAscii(4-stringleng-i, 32);
 8001444:	230a      	movs	r3, #10
 8001446:	18fa      	adds	r2, r7, r3
 8001448:	230e      	movs	r3, #14
 800144a:	18fb      	adds	r3, r7, r3
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	18d3      	adds	r3, r2, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2204      	movs	r2, #4
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2120      	movs	r1, #32
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fe51 	bl	8001104 <writeDigitAscii>
		  for (uint8_t i=0;i<4;i++){
 8001462:	210e      	movs	r1, #14
 8001464:	187b      	adds	r3, r7, r1
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	187b      	adds	r3, r7, r1
 800146a:	3201      	adds	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	230e      	movs	r3, #14
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d9cd      	bls.n	8001414 <main+0x2d0>
			  }
		  }
		  writeDisplay();
 8001478:	f7ff fdca 	bl	8001010 <writeDisplay>
		  HAL_Delay(200);
 800147c:	20c8      	movs	r0, #200	; 0xc8
 800147e:	f000 fd7f 	bl	8001f80 <HAL_Delay>
	  }

	  if(abs(set2-mem2)>40){
 8001482:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <main+0x3fc>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	001a      	movs	r2, r3
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <main+0x418>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	17da      	asrs	r2, r3, #31
 8001490:	189b      	adds	r3, r3, r2
 8001492:	4053      	eors	r3, r2
 8001494:	2b28      	cmp	r3, #40	; 0x28
 8001496:	dc00      	bgt.n	800149a <main+0x356>
 8001498:	e0d5      	b.n	8001646 <main+0x502>
		  mem2 = set2;
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <main+0x3fc>)
 800149c:	881a      	ldrh	r2, [r3, #0]
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <main+0x418>)
 80014a0:	801a      	strh	r2, [r3, #0]
		  offset = (set2-40)/100;
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <main+0x3fc>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	3b28      	subs	r3, #40	; 0x28
 80014a8:	2164      	movs	r1, #100	; 0x64
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7fe fec8 	bl	8000240 <__divsi3>
 80014b0:	0003      	movs	r3, r0
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <main+0x41c>)
 80014b6:	701a      	strb	r2, [r3, #0]
		  sprintf(displaybuffer, "%d", offset);
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <main+0x41c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	001a      	movs	r2, r3
 80014be:	4925      	ldr	r1, [pc, #148]	; (8001554 <main+0x410>)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	0018      	movs	r0, r3
 80014c4:	f003 fbe0 	bl	8004c88 <siprintf>
		  uint8_t stringleng = strlen(displaybuffer);
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7fe fe1c 	bl	8000108 <strlen>
 80014d0:	0002      	movs	r2, r0
 80014d2:	2309      	movs	r3, #9
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i=0;i<4;i++){
 80014d8:	230d      	movs	r3, #13
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e055      	b.n	800158e <main+0x44a>
			  if(i < stringleng){
 80014e2:	210d      	movs	r1, #13
 80014e4:	187a      	adds	r2, r7, r1
 80014e6:	2009      	movs	r0, #9
 80014e8:	183b      	adds	r3, r7, r0
 80014ea:	7812      	ldrb	r2, [r2, #0]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d238      	bcs.n	8001564 <main+0x420>
				  writeDigitAscii(4-stringleng+i, displaybuffer[i]);
 80014f2:	187a      	adds	r2, r7, r1
 80014f4:	183b      	adds	r3, r7, r0
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3304      	adds	r3, #4
 8001500:	b2d8      	uxtb	r0, r3
 8001502:	187b      	adds	r3, r7, r1
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	1d3a      	adds	r2, r7, #4
 8001508:	5cd3      	ldrb	r3, [r2, r3]
 800150a:	0019      	movs	r1, r3
 800150c:	f7ff fdfa 	bl	8001104 <writeDigitAscii>
 8001510:	e037      	b.n	8001582 <main+0x43e>
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	20000508 	.word	0x20000508
 8001518:	50000400 	.word	0x50000400
 800151c:	20000098 	.word	0x20000098
 8001520:	200003e8 	.word	0x200003e8
 8001524:	19de5080 	.word	0x19de5080
 8001528:	20000504 	.word	0x20000504
 800152c:	0000ffff 	.word	0x0000ffff
 8001530:	20202020 	.word	0x20202020
 8001534:	20000144 	.word	0x20000144
 8001538:	200001d2 	.word	0x200001d2
 800153c:	200003de 	.word	0x200003de
 8001540:	200001a0 	.word	0x200001a0
 8001544:	200001d0 	.word	0x200001d0
 8001548:	00000fff 	.word	0x00000fff
 800154c:	200003da 	.word	0x200003da
 8001550:	200003dc 	.word	0x200003dc
 8001554:	0800560c 	.word	0x0800560c
 8001558:	20000500 	.word	0x20000500
 800155c:	200001d6 	.word	0x200001d6
 8001560:	200003e0 	.word	0x200003e0
			  }
			  else {
				  writeDigitAscii(4-stringleng-i, 32);
 8001564:	2309      	movs	r3, #9
 8001566:	18fa      	adds	r2, r7, r3
 8001568:	230d      	movs	r3, #13
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	18d3      	adds	r3, r2, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2204      	movs	r2, #4
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2120      	movs	r1, #32
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff fdc1 	bl	8001104 <writeDigitAscii>
		  for (uint8_t i=0;i<4;i++){
 8001582:	210d      	movs	r1, #13
 8001584:	187b      	adds	r3, r7, r1
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	187b      	adds	r3, r7, r1
 800158a:	3201      	adds	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	230d      	movs	r3, #13
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d9a4      	bls.n	80014e2 <main+0x39e>
			  }
		  }
		  writeDigitAscii(0,'+');
 8001598:	212b      	movs	r1, #43	; 0x2b
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fdb2 	bl	8001104 <writeDigitAscii>
		  writeDisplay();
 80015a0:	f7ff fd36 	bl	8001010 <writeDisplay>
		  HAL_Delay(2000);
 80015a4:	23fa      	movs	r3, #250	; 0xfa
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 fce9 	bl	8001f80 <HAL_Delay>
		  sprintf(displaybuffer, "%d", dis);
 80015ae:	4b6e      	ldr	r3, [pc, #440]	; (8001768 <main+0x624>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	001a      	movs	r2, r3
 80015b4:	496d      	ldr	r1, [pc, #436]	; (800176c <main+0x628>)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	0018      	movs	r0, r3
 80015ba:	f003 fb65 	bl	8004c88 <siprintf>
		  stringleng = strlen(displaybuffer);
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7fe fda1 	bl	8000108 <strlen>
 80015c6:	0002      	movs	r2, r0
 80015c8:	2309      	movs	r3, #9
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	701a      	strb	r2, [r3, #0]
		  for (uint8_t i=0;i<4;i++){
 80015ce:	230c      	movs	r3, #12
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	e02c      	b.n	8001632 <main+0x4ee>
			  if(i < stringleng){
 80015d8:	210c      	movs	r1, #12
 80015da:	187a      	adds	r2, r7, r1
 80015dc:	2009      	movs	r0, #9
 80015de:	183b      	adds	r3, r7, r0
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d20f      	bcs.n	8001608 <main+0x4c4>
				  writeDigitAscii(4-stringleng+i, displaybuffer[i]);
 80015e8:	187a      	adds	r2, r7, r1
 80015ea:	183b      	adds	r3, r7, r0
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	3304      	adds	r3, #4
 80015f6:	b2d8      	uxtb	r0, r3
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	1d3a      	adds	r2, r7, #4
 80015fe:	5cd3      	ldrb	r3, [r2, r3]
 8001600:	0019      	movs	r1, r3
 8001602:	f7ff fd7f 	bl	8001104 <writeDigitAscii>
 8001606:	e00e      	b.n	8001626 <main+0x4e2>
			  }
			  else {
				  writeDigitAscii(4-stringleng-i, 32);
 8001608:	2309      	movs	r3, #9
 800160a:	18fa      	adds	r2, r7, r3
 800160c:	230c      	movs	r3, #12
 800160e:	18fb      	adds	r3, r7, r3
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2204      	movs	r2, #4
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2120      	movs	r1, #32
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff fd6f 	bl	8001104 <writeDigitAscii>
		  for (uint8_t i=0;i<4;i++){
 8001626:	210c      	movs	r1, #12
 8001628:	187b      	adds	r3, r7, r1
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	187b      	adds	r3, r7, r1
 800162e:	3201      	adds	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	230c      	movs	r3, #12
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d9cd      	bls.n	80015d8 <main+0x494>
			  }
		  }
		  writeDisplay();
 800163c:	f7ff fce8 	bl	8001010 <writeDisplay>
		  HAL_Delay(200);
 8001640:	20c8      	movs	r0, #200	; 0xc8
 8001642:	f000 fc9d 	bl	8001f80 <HAL_Delay>
	  }

	  ret = SX1278_LoRaRxPacket(&SX1278);
 8001646:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <main+0x62c>)
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff faef 	bl	8000c2c <SX1278_LoRaRxPacket>
 800164e:	0003      	movs	r3, r0
 8001650:	001a      	movs	r2, r3
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <main+0x630>)
 8001654:	601a      	str	r2, [r3, #0]
	  if (ret > 0) {
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <main+0x630>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	dc00      	bgt.n	8001660 <main+0x51c>
 800165e:	e5fa      	b.n	8001256 <main+0x112>
		  SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8001660:	4b44      	ldr	r3, [pc, #272]	; (8001774 <main+0x630>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4944      	ldr	r1, [pc, #272]	; (8001778 <main+0x634>)
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <main+0x62c>)
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff fb66 	bl	8000d3c <SX1278_read>
		  chnl = getChannel(buffer);
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <main+0x634>)
 8001672:	0018      	movs	r0, r3
 8001674:	f000 fa6a 	bl	8001b4c <getChannel>
 8001678:	0003      	movs	r3, r0
 800167a:	001a      	movs	r2, r3
 800167c:	4b3f      	ldr	r3, [pc, #252]	; (800177c <main+0x638>)
 800167e:	701a      	strb	r2, [r3, #0]
		  distance = getDistance(buffer);
 8001680:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <main+0x634>)
 8001682:	0018      	movs	r0, r3
 8001684:	f000 fa88 	bl	8001b98 <getDistance>
 8001688:	0003      	movs	r3, r0
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <main+0x63c>)
 800168e:	701a      	strb	r2, [r3, #0]
		  if((chnl == channel) && (abs(distance-dis+offset)>=1)){
 8001690:	4b3a      	ldr	r3, [pc, #232]	; (800177c <main+0x638>)
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <main+0x640>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d000      	beq.n	800169e <main+0x55a>
 800169c:	e5db      	b.n	8001256 <main+0x112>
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <main+0x63c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	001a      	movs	r2, r3
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <main+0x624>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4a37      	ldr	r2, [pc, #220]	; (8001788 <main+0x644>)
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	189b      	adds	r3, r3, r2
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	189b      	adds	r3, r3, r2
 80016b4:	4053      	eors	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dc00      	bgt.n	80016bc <main+0x578>
 80016ba:	e5cc      	b.n	8001256 <main+0x112>
			  dis =  distance+offset;
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <main+0x63c>)
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b31      	ldr	r3, [pc, #196]	; (8001788 <main+0x644>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <main+0x624>)
 80016ca:	701a      	strb	r2, [r3, #0]
			  sprintf(displaybuffer, "%d", dis);
 80016cc:	4b26      	ldr	r3, [pc, #152]	; (8001768 <main+0x624>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	001a      	movs	r2, r3
 80016d2:	4926      	ldr	r1, [pc, #152]	; (800176c <main+0x628>)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	0018      	movs	r0, r3
 80016d8:	f003 fad6 	bl	8004c88 <siprintf>
			  uint8_t stringleng = strlen(displaybuffer);
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	0018      	movs	r0, r3
 80016e0:	f7fe fd12 	bl	8000108 <strlen>
 80016e4:	0002      	movs	r2, r0
 80016e6:	2308      	movs	r3, #8
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	701a      	strb	r2, [r3, #0]
			  for (uint8_t i=0;i<4;i++){
 80016ec:	230b      	movs	r3, #11
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e02c      	b.n	8001750 <main+0x60c>
				  if(i < stringleng){
 80016f6:	210b      	movs	r1, #11
 80016f8:	187a      	adds	r2, r7, r1
 80016fa:	2008      	movs	r0, #8
 80016fc:	183b      	adds	r3, r7, r0
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20f      	bcs.n	8001726 <main+0x5e2>
					  writeDigitAscii(4-stringleng+i, displaybuffer[i]);
 8001706:	187a      	adds	r2, r7, r1
 8001708:	183b      	adds	r3, r7, r0
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3304      	adds	r3, #4
 8001714:	b2d8      	uxtb	r0, r3
 8001716:	187b      	adds	r3, r7, r1
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	1d3a      	adds	r2, r7, #4
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	0019      	movs	r1, r3
 8001720:	f7ff fcf0 	bl	8001104 <writeDigitAscii>
 8001724:	e00e      	b.n	8001744 <main+0x600>
				  }
				  else {
					  writeDigitAscii(4-stringleng-i, 32);
 8001726:	2308      	movs	r3, #8
 8001728:	18fa      	adds	r2, r7, r3
 800172a:	230b      	movs	r3, #11
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	18d3      	adds	r3, r2, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2204      	movs	r2, #4
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2120      	movs	r1, #32
 800173e:	0018      	movs	r0, r3
 8001740:	f7ff fce0 	bl	8001104 <writeDigitAscii>
			  for (uint8_t i=0;i<4;i++){
 8001744:	210b      	movs	r1, #11
 8001746:	187b      	adds	r3, r7, r1
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	187b      	adds	r3, r7, r1
 800174c:	3201      	adds	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	230b      	movs	r3, #11
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d9cd      	bls.n	80016f6 <main+0x5b2>
				  }
			  }
			  writeDisplay();
 800175a:	f7ff fc59 	bl	8001010 <writeDisplay>
			  HAL_Delay(200);
 800175e:	20c8      	movs	r0, #200	; 0xc8
 8001760:	f000 fc0e 	bl	8001f80 <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 8001764:	e577      	b.n	8001256 <main+0x112>
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	20000500 	.word	0x20000500
 800176c:	0800560c 	.word	0x0800560c
 8001770:	200003e8 	.word	0x200003e8
 8001774:	20000504 	.word	0x20000504
 8001778:	200001d8 	.word	0x200001d8
 800177c:	200003d8 	.word	0x200003d8
 8001780:	200001d4 	.word	0x200001d4
 8001784:	200003dc 	.word	0x200003dc
 8001788:	200003e0 	.word	0x200003e0

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b09d      	sub	sp, #116	; 0x74
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	2438      	movs	r4, #56	; 0x38
 8001794:	193b      	adds	r3, r7, r4
 8001796:	0018      	movs	r0, r3
 8001798:	2338      	movs	r3, #56	; 0x38
 800179a:	001a      	movs	r2, r3
 800179c:	2100      	movs	r1, #0
 800179e:	f003 fa6a 	bl	8004c76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a2:	2324      	movs	r3, #36	; 0x24
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	0018      	movs	r0, r3
 80017a8:	2314      	movs	r3, #20
 80017aa:	001a      	movs	r2, r3
 80017ac:	2100      	movs	r1, #0
 80017ae:	f003 fa62 	bl	8004c76 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b2:	003b      	movs	r3, r7
 80017b4:	0018      	movs	r0, r3
 80017b6:	2324      	movs	r3, #36	; 0x24
 80017b8:	001a      	movs	r2, r3
 80017ba:	2100      	movs	r1, #0
 80017bc:	f003 fa5b 	bl	8004c76 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <SystemClock_Config+0xc0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a22      	ldr	r2, [pc, #136]	; (8001850 <SystemClock_Config+0xc4>)
 80017c6:	401a      	ands	r2, r3
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <SystemClock_Config+0xc0>)
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	0109      	lsls	r1, r1, #4
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d8:	193b      	adds	r3, r7, r4
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	0252      	lsls	r2, r2, #9
 80017de:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	2200      	movs	r2, #0
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	0018      	movs	r0, r3
 80017ea:	f001 fe6f 	bl	80034cc <HAL_RCC_OscConfig>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80017f2:	f000 f9f7 	bl	8001be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	2124      	movs	r1, #36	; 0x24
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	220f      	movs	r2, #15
 80017fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2202      	movs	r2, #2
 8001802:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	187b      	adds	r3, r7, r1
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800180a:	187b      	adds	r3, r7, r1
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	187b      	adds	r3, r7, r1
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001816:	187b      	adds	r3, r7, r1
 8001818:	2100      	movs	r1, #0
 800181a:	0018      	movs	r0, r3
 800181c:	f002 fa1a 	bl	8003c54 <HAL_RCC_ClockConfig>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001824:	f000 f9de 	bl	8001be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001828:	003b      	movs	r3, r7
 800182a:	2208      	movs	r2, #8
 800182c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800182e:	003b      	movs	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001834:	003b      	movs	r3, r7
 8001836:	0018      	movs	r0, r3
 8001838:	f002 fbfa 	bl	8004030 <HAL_RCCEx_PeriphCLKConfig>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001840:	f000 f9d0 	bl	8001be4 <Error_Handler>
  }
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b01d      	add	sp, #116	; 0x74
 800184a:	bd90      	pop	{r4, r7, pc}
 800184c:	40007000 	.word	0x40007000
 8001850:	ffffe7ff 	.word	0xffffe7ff

08001854 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800185a:	003b      	movs	r3, r7
 800185c:	0018      	movs	r0, r3
 800185e:	2308      	movs	r3, #8
 8001860:	001a      	movs	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	f003 fa07 	bl	8004c76 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001868:	4b37      	ldr	r3, [pc, #220]	; (8001948 <MX_ADC_Init+0xf4>)
 800186a:	4a38      	ldr	r2, [pc, #224]	; (800194c <MX_ADC_Init+0xf8>)
 800186c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <MX_ADC_Init+0xf4>)
 8001870:	2200      	movs	r2, #0
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001874:	4b34      	ldr	r3, [pc, #208]	; (8001948 <MX_ADC_Init+0xf4>)
 8001876:	22c0      	movs	r2, #192	; 0xc0
 8001878:	0612      	lsls	r2, r2, #24
 800187a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <MX_ADC_Init+0xf4>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <MX_ADC_Init+0xf4>)
 8001884:	2205      	movs	r2, #5
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <MX_ADC_Init+0xf4>)
 800188a:	2201      	movs	r2, #1
 800188c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <MX_ADC_Init+0xf4>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <MX_ADC_Init+0xf4>)
 8001896:	2220      	movs	r2, #32
 8001898:	2100      	movs	r1, #0
 800189a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <MX_ADC_Init+0xf4>)
 800189e:	2221      	movs	r2, #33	; 0x21
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <MX_ADC_Init+0xf4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <MX_ADC_Init+0xf4>)
 80018ac:	22c2      	movs	r2, #194	; 0xc2
 80018ae:	32ff      	adds	r2, #255	; 0xff
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <MX_ADC_Init+0xf4>)
 80018b4:	222c      	movs	r2, #44	; 0x2c
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <MX_ADC_Init+0xf4>)
 80018bc:	2204      	movs	r2, #4
 80018be:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <MX_ADC_Init+0xf4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <MX_ADC_Init+0xf4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <MX_ADC_Init+0xf4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <MX_ADC_Init+0xf4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MX_ADC_Init+0xf4>)
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 fb74 	bl	8001fc8 <HAL_ADC_Init>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d001      	beq.n	80018e8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80018e4:	f000 f97e 	bl	8001be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018e8:	003b      	movs	r3, r7
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80018ee:	003b      	movs	r3, r7
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	0152      	lsls	r2, r2, #5
 80018f4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018f6:	003a      	movs	r2, r7
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <MX_ADC_Init+0xf4>)
 80018fa:	0011      	movs	r1, r2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f000 fe0d 	bl	800251c <HAL_ADC_ConfigChannel>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d001      	beq.n	800190a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001906:	f000 f96d 	bl	8001be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800190a:	003b      	movs	r3, r7
 800190c:	4a10      	ldr	r2, [pc, #64]	; (8001950 <MX_ADC_Init+0xfc>)
 800190e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001910:	003a      	movs	r2, r7
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <MX_ADC_Init+0xf4>)
 8001914:	0011      	movs	r1, r2
 8001916:	0018      	movs	r0, r3
 8001918:	f000 fe00 	bl	800251c <HAL_ADC_ConfigChannel>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8001920:	f000 f960 	bl	8001be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001924:	003b      	movs	r3, r7
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <MX_ADC_Init+0x100>)
 8001928:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800192a:	003a      	movs	r2, r7
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_ADC_Init+0xf4>)
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f000 fdf3 	bl	800251c <HAL_ADC_ConfigChannel>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d001      	beq.n	800193e <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800193a:	f000 f953 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b002      	add	sp, #8
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	20000144 	.word	0x20000144
 800194c:	40012400 	.word	0x40012400
 8001950:	04000002 	.word	0x04000002
 8001954:	08000004 	.word	0x08000004

08001958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_I2C1_Init+0x74>)
 800195e:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <MX_I2C1_Init+0x78>)
 8001960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_I2C1_Init+0x74>)
 8001964:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <MX_I2C1_Init+0x7c>)
 8001966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_I2C1_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <MX_I2C1_Init+0x74>)
 8001970:	2201      	movs	r2, #1
 8001972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_I2C1_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_I2C1_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MX_I2C1_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_I2C1_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_I2C1_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_I2C1_Init+0x74>)
 8001994:	0018      	movs	r0, r3
 8001996:	f001 f9eb 	bl	8002d70 <HAL_I2C_Init>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d001      	beq.n	80019a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800199e:	f000 f921 	bl	8001be4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <MX_I2C1_Init+0x74>)
 80019a4:	2100      	movs	r1, #0
 80019a6:	0018      	movs	r0, r3
 80019a8:	f001 fcf8 	bl	800339c <HAL_I2CEx_ConfigAnalogFilter>
 80019ac:	1e03      	subs	r3, r0, #0
 80019ae:	d001      	beq.n	80019b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019b0:	f000 f918 	bl	8001be4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <MX_I2C1_Init+0x74>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	0018      	movs	r0, r3
 80019ba:	f001 fd3b 	bl	8003434 <HAL_I2CEx_ConfigDigitalFilter>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d001      	beq.n	80019c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019c2:	f000 f90f 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200000f0 	.word	0x200000f0
 80019d0:	40005400 	.word	0x40005400
 80019d4:	2000090e 	.word	0x2000090e

080019d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019de:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <MX_SPI2_Init+0x6c>)
 80019e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019e4:	2282      	movs	r2, #130	; 0x82
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f002 fc64 	bl	80042f8 <HAL_SPI_Init>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a34:	f000 f8d6 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	20000098 	.word	0x20000098
 8001a44:	40003800 	.word	0x40003800

08001a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4e:	240c      	movs	r4, #12
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	2314      	movs	r3, #20
 8001a56:	001a      	movs	r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f003 f90c 	bl	8004c76 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5e:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <MX_GPIO_Init+0xfc>)
 8001a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a62:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <MX_GPIO_Init+0xfc>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	430a      	orrs	r2, r1
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <MX_GPIO_Init+0xfc>)
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <MX_GPIO_Init+0xfc>)
 8001a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7a:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <MX_GPIO_Init+0xfc>)
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <MX_GPIO_Init+0xfc>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	2201      	movs	r2, #1
 8001a88:	4013      	ands	r3, r2
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <MX_GPIO_Init+0xfc>)
 8001a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <MX_GPIO_Init+0xfc>)
 8001a94:	2102      	movs	r1, #2
 8001a96:	430a      	orrs	r2, r1
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <MX_GPIO_Init+0xfc>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	015b      	lsls	r3, r3, #5
 8001aaa:	4827      	ldr	r0, [pc, #156]	; (8001b48 <MX_GPIO_Init+0x100>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	0019      	movs	r1, r3
 8001ab0:	f001 f941 	bl	8002d36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	00d9      	lsls	r1, r3, #3
 8001ab8:	23a0      	movs	r3, #160	; 0xa0
 8001aba:	05db      	lsls	r3, r3, #23
 8001abc:	2200      	movs	r2, #0
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f001 f939 	bl	8002d36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	0152      	lsls	r2, r2, #5
 8001aca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	193b      	adds	r3, r7, r4
 8001ace:	2201      	movs	r2, #1
 8001ad0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <MX_GPIO_Init+0x100>)
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	0010      	movs	r0, r2
 8001ae6:	f000 ff93 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001aea:	0021      	movs	r1, r4
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	00d2      	lsls	r2, r2, #3
 8001af2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	000c      	movs	r4, r1
 8001af6:	193b      	adds	r3, r7, r4
 8001af8:	2201      	movs	r2, #1
 8001afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	193b      	adds	r3, r7, r4
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001b08:	193a      	adds	r2, r7, r4
 8001b0a:	23a0      	movs	r3, #160	; 0xa0
 8001b0c:	05db      	lsls	r3, r3, #23
 8001b0e:	0011      	movs	r1, r2
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 ff7d 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001b16:	0021      	movs	r1, r4
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2200      	movs	r2, #0
 8001b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	187a      	adds	r2, r7, r1
 8001b2e:	23a0      	movs	r3, #160	; 0xa0
 8001b30:	05db      	lsls	r3, r3, #23
 8001b32:	0011      	movs	r1, r2
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 ff6b 	bl	8002a10 <HAL_GPIO_Init>

}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b009      	add	sp, #36	; 0x24
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40021000 	.word	0x40021000
 8001b48:	50000400 	.word	0x50000400

08001b4c <getChannel>:

/* USER CODE BEGIN 4 */
uint8_t getChannel(char* reply)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8001b54:	230f      	movs	r3, #15
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
	while(true)
	{
		if(reply[index] == ':')
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b3a      	cmp	r3, #58	; 0x3a
 8001b6a:	d10a      	bne.n	8001b82 <getChannel+0x36>
			return atoi(&reply[index-1]);
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	18d3      	adds	r3, r2, r3
 8001b76:	0018      	movs	r0, r3
 8001b78:	f003 f844 	bl	8004c04 <atoi>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	e006      	b.n	8001b90 <getChannel+0x44>
		++index;
 8001b82:	220f      	movs	r2, #15
 8001b84:	18bb      	adds	r3, r7, r2
 8001b86:	18ba      	adds	r2, r7, r2
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	3201      	adds	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
		if(reply[index] == ':')
 8001b8e:	e7e5      	b.n	8001b5c <getChannel+0x10>
	}
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <getDistance>:

uint16_t getDistance(char* reply)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
	while(true)
	{
		if(reply[index] == ':')
 8001ba8:	210f      	movs	r1, #15
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	18d3      	adds	r3, r2, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b3a      	cmp	r3, #58	; 0x3a
 8001bb6:	d10a      	bne.n	8001bce <getDistance+0x36>
			return atoi(reply+index+1);
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	18d3      	adds	r3, r2, r3
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f003 f81e 	bl	8004c04 <atoi>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	e006      	b.n	8001bdc <getDistance+0x44>
		++index;
 8001bce:	220f      	movs	r2, #15
 8001bd0:	18bb      	adds	r3, r7, r2
 8001bd2:	18ba      	adds	r2, r7, r2
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	3201      	adds	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
		if(reply[index] == ':')
 8001bda:	e7e5      	b.n	8001ba8 <getDistance+0x10>
	}
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b004      	add	sp, #16
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	e7fe      	b.n	8001bec <Error_Handler+0x8>
	...

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_MspInit+0x24>)
 8001bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_MspInit+0x24>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <HAL_MspInit+0x24>)
 8001c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_MspInit+0x24>)
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	0549      	lsls	r1, r1, #21
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	240c      	movs	r4, #12
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	0018      	movs	r0, r3
 8001c26:	2314      	movs	r3, #20
 8001c28:	001a      	movs	r2, r3
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	f003 f823 	bl	8004c76 <memset>
  if(hadc->Instance==ADC1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <HAL_ADC_MspInit+0x70>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d122      	bne.n	8001c80 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_ADC_MspInit+0x74>)
 8001c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_ADC_MspInit+0x74>)
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	0089      	lsls	r1, r1, #2
 8001c44:	430a      	orrs	r2, r1
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_ADC_MspInit+0x74>)
 8001c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_ADC_MspInit+0x74>)
 8001c4e:	2101      	movs	r1, #1
 8001c50:	430a      	orrs	r2, r1
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_ADC_MspInit+0x74>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	2207      	movs	r2, #7
 8001c64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	2203      	movs	r2, #3
 8001c6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	193b      	adds	r3, r7, r4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	193a      	adds	r2, r7, r4
 8001c74:	23a0      	movs	r3, #160	; 0xa0
 8001c76:	05db      	lsls	r3, r3, #23
 8001c78:	0011      	movs	r1, r2
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 fec8 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b009      	add	sp, #36	; 0x24
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	40012400 	.word	0x40012400
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	240c      	movs	r4, #12
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	2314      	movs	r3, #20
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	f002 ffe7 	bl	8004c76 <memset>
  if(hi2c->Instance==I2C1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_I2C_MspInit+0x7c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d128      	bne.n	8001d04 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cb8:	2102      	movs	r1, #2
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cca:	0021      	movs	r1, r4
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	22c0      	movs	r2, #192	; 0xc0
 8001cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2212      	movs	r2, #18
 8001cd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2201      	movs	r2, #1
 8001cdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_I2C_MspInit+0x84>)
 8001cee:	0019      	movs	r1, r3
 8001cf0:	0010      	movs	r0, r2
 8001cf2:	f000 fe8d 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_I2C_MspInit+0x80>)
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0389      	lsls	r1, r1, #14
 8001d00:	430a      	orrs	r2, r1
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b009      	add	sp, #36	; 0x24
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	40005400 	.word	0x40005400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	50000400 	.word	0x50000400

08001d18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	240c      	movs	r4, #12
 8001d22:	193b      	adds	r3, r7, r4
 8001d24:	0018      	movs	r0, r3
 8001d26:	2314      	movs	r3, #20
 8001d28:	001a      	movs	r2, r3
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	f002 ffa3 	bl	8004c76 <memset>
  if(hspi->Instance==SPI2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_SPI_MspInit+0x80>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d129      	bne.n	8001d8e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_SPI_MspInit+0x84>)
 8001d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_SPI_MspInit+0x84>)
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	01c9      	lsls	r1, r1, #7
 8001d44:	430a      	orrs	r2, r1
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_SPI_MspInit+0x84>)
 8001d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_SPI_MspInit+0x84>)
 8001d4e:	2102      	movs	r1, #2
 8001d50:	430a      	orrs	r2, r1
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_SPI_MspInit+0x84>)
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	2202      	movs	r2, #2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d60:	193b      	adds	r3, r7, r4
 8001d62:	22e0      	movs	r2, #224	; 0xe0
 8001d64:	0212      	lsls	r2, r2, #8
 8001d66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	0021      	movs	r1, r4
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	4a06      	ldr	r2, [pc, #24]	; (8001da0 <HAL_SPI_MspInit+0x88>)
 8001d86:	0019      	movs	r1, r3
 8001d88:	0010      	movs	r0, r2
 8001d8a:	f000 fe41 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b009      	add	sp, #36	; 0x24
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	40003800 	.word	0x40003800
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	50000400 	.word	0x50000400

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler+0x4>

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler+0x4>

08001db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc8:	f000 f8be 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	18d3      	adds	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f002 ff04 	bl	8004c10 <__errno>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	425b      	negs	r3, r3
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	18d2      	adds	r2, r2, r3
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b006      	add	sp, #24
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20002000 	.word	0x20002000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	2000008c 	.word	0x2000008c
 8001e3c:	20000540 	.word	0x20000540

08001e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e52:	490e      	ldr	r1, [pc, #56]	; (8001e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <LoopForever+0xe>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e68:	4c0b      	ldr	r4, [pc, #44]	; (8001e98 <LoopForever+0x16>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e76:	f7ff ffe3 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f002 fecf 	bl	8004c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7ff f961 	bl	8001144 <main>

08001e82 <LoopForever>:

LoopForever:
    b LoopForever
 8001e82:	e7fe      	b.n	8001e82 <LoopForever>
  ldr   r0, =_estack
 8001e84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e90:	08005890 	.word	0x08005890
  ldr r2, =_sbss
 8001e94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e98:	2000053c 	.word	0x2000053c

08001e9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC1_COMP_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_Init+0x3c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_Init+0x3c>)
 8001eb2:	2140      	movs	r1, #64	; 0x40
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f000 f811 	bl	8001ee0 <HAL_InitTick>
 8001ebe:	1e03      	subs	r3, r0, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e001      	b.n	8001ece <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eca:	f7ff fe91 	bl	8001bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	781b      	ldrb	r3, [r3, #0]
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	40022000 	.word	0x40022000

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_InitTick+0x5c>)
 8001eea:	681c      	ldr	r4, [r3, #0]
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_InitTick+0x60>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	23fa      	movs	r3, #250	; 0xfa
 8001ef4:	0098      	lsls	r0, r3, #2
 8001ef6:	f7fe f919 	bl	800012c <__udivsi3>
 8001efa:	0003      	movs	r3, r0
 8001efc:	0019      	movs	r1, r3
 8001efe:	0020      	movs	r0, r4
 8001f00:	f7fe f914 	bl	800012c <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fd75 	bl	80029f6 <HAL_SYSTICK_Config>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e00f      	b.n	8001f34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d80b      	bhi.n	8001f32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	425b      	negs	r3, r3
 8001f20:	2200      	movs	r2, #0
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 fd52 	bl	80029cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_InitTick+0x64>)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b003      	add	sp, #12
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000008 	.word	0x20000008
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_IncTick+0x1c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	001a      	movs	r2, r3
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_IncTick+0x20>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	18d2      	adds	r2, r2, r3
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <HAL_IncTick+0x20>)
 8001f5a:	601a      	str	r2, [r3, #0]
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	20000008 	.word	0x20000008
 8001f68:	20000528 	.word	0x20000528

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <HAL_GetTick+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	20000528 	.word	0x20000528

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	f7ff ffe0 	bl	8001f6c <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b004      	add	sp, #16
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e159      	b.n	800228e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2250      	movs	r2, #80	; 0x50
 8001fec:	2100      	movs	r1, #0
 8001fee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff fe10 	bl	8001c18 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b10      	cmp	r3, #16
 8002002:	d005      	beq.n	8002010 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2204      	movs	r2, #4
 800200c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800200e:	d00b      	beq.n	8002028 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	2210      	movs	r2, #16
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2250      	movs	r2, #80	; 0x50
 8002020:	2100      	movs	r1, #0
 8002022:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e132      	b.n	800228e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	4a9a      	ldr	r2, [pc, #616]	; (8002298 <HAL_ADC_Init+0x2d0>)
 800202e:	4013      	ands	r3, r2
 8002030:	2202      	movs	r2, #2
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2203      	movs	r2, #3
 8002040:	4013      	ands	r3, r2
 8002042:	2b01      	cmp	r3, #1
 8002044:	d108      	bne.n	8002058 <HAL_ADC_Init+0x90>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_ADC_Init+0x90>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_ADC_Init+0x92>
 8002058:	2300      	movs	r3, #0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d149      	bne.n	80020f2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	23c0      	movs	r3, #192	; 0xc0
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	429a      	cmp	r2, r3
 8002068:	d00b      	beq.n	8002082 <HAL_ADC_Init+0xba>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	05db      	lsls	r3, r3, #23
 8002072:	429a      	cmp	r2, r3
 8002074:	d005      	beq.n	8002082 <HAL_ADC_Init+0xba>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	429a      	cmp	r2, r3
 8002080:	d111      	bne.n	80020a6 <HAL_ADC_Init+0xde>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	0892      	lsrs	r2, r2, #2
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6919      	ldr	r1, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	611a      	str	r2, [r3, #16]
 80020a4:	e014      	b.n	80020d0 <HAL_ADC_Init+0x108>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	0892      	lsrs	r2, r2, #2
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	4b79      	ldr	r3, [pc, #484]	; (800229c <HAL_ADC_Init+0x2d4>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b78      	ldr	r3, [pc, #480]	; (800229c <HAL_ADC_Init+0x2d4>)
 80020bc:	4978      	ldr	r1, [pc, #480]	; (80022a0 <HAL_ADC_Init+0x2d8>)
 80020be:	400a      	ands	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_ADC_Init+0x2d4>)
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4b74      	ldr	r3, [pc, #464]	; (800229c <HAL_ADC_Init+0x2d4>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2118      	movs	r1, #24
 80020dc:	438a      	bics	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68d9      	ldr	r1, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80020f2:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_ADC_Init+0x2d4>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b69      	ldr	r3, [pc, #420]	; (800229c <HAL_ADC_Init+0x2d4>)
 80020f8:	496a      	ldr	r1, [pc, #424]	; (80022a4 <HAL_ADC_Init+0x2dc>)
 80020fa:	400a      	ands	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80020fe:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_ADC_Init+0x2d4>)
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002106:	065a      	lsls	r2, r3, #25
 8002108:	4b64      	ldr	r3, [pc, #400]	; (800229c <HAL_ADC_Init+0x2d4>)
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	055b      	lsls	r3, r3, #21
 8002118:	4013      	ands	r3, r2
 800211a:	d108      	bne.n	800212e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2180      	movs	r1, #128	; 0x80
 8002128:	0549      	lsls	r1, r1, #21
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	495b      	ldr	r1, [pc, #364]	; (80022a8 <HAL_ADC_Init+0x2e0>)
 800213a:	400a      	ands	r2, r1
 800213c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68d9      	ldr	r1, [r3, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d101      	bne.n	8002154 <HAL_ADC_Init+0x18c>
 8002150:	2304      	movs	r3, #4
 8002152:	e000      	b.n	8002156 <HAL_ADC_Init+0x18e>
 8002154:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002156:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2020      	movs	r0, #32
 800215c:	5c1b      	ldrb	r3, [r3, r0]
 800215e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002160:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	202c      	movs	r0, #44	; 0x2c
 8002166:	5c1b      	ldrb	r3, [r3, r0]
 8002168:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800216a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002170:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002178:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002180:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800218e:	23c2      	movs	r3, #194	; 0xc2
 8002190:	33ff      	adds	r3, #255	; 0xff
 8002192:	429a      	cmp	r2, r3
 8002194:	d00b      	beq.n	80021ae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68d9      	ldr	r1, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2221      	movs	r2, #33	; 0x21
 80021b2:	5c9b      	ldrb	r3, [r3, r2]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d11a      	bne.n	80021ee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	5c9b      	ldrb	r3, [r3, r2]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	0249      	lsls	r1, r1, #9
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	e00b      	b.n	80021ee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	2220      	movs	r2, #32
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	2201      	movs	r2, #1
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d11f      	bne.n	8002236 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	492a      	ldr	r1, [pc, #168]	; (80022ac <HAL_ADC_Init+0x2e4>)
 8002202:	400a      	ands	r2, r1
 8002204:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6919      	ldr	r1, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002214:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800221a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	430a      	orrs	r2, r1
 8002232:	611a      	str	r2, [r3, #16]
 8002234:	e00e      	b.n	8002254 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2201      	movs	r2, #1
 800223e:	4013      	ands	r3, r2
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	438a      	bics	r2, r1
 8002252:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2107      	movs	r1, #7
 8002260:	438a      	bics	r2, r1
 8002262:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6959      	ldr	r1, [r3, #20]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	2203      	movs	r2, #3
 8002282:	4393      	bics	r3, r2
 8002284:	2201      	movs	r2, #1
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b002      	add	sp, #8
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	fffffefd 	.word	0xfffffefd
 800229c:	40012708 	.word	0x40012708
 80022a0:	ffc3ffff 	.word	0xffc3ffff
 80022a4:	fdffffff 	.word	0xfdffffff
 80022a8:	fffe0219 	.word	0xfffe0219
 80022ac:	fffffc03 	.word	0xfffffc03

080022b0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2204      	movs	r2, #4
 80022c8:	4013      	ands	r3, r2
 80022ca:	d138      	bne.n	800233e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2250      	movs	r2, #80	; 0x50
 80022d0:	5c9b      	ldrb	r3, [r3, r2]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_ADC_Start+0x2a>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e038      	b.n	800234c <HAL_ADC_Start+0x9c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2250      	movs	r2, #80	; 0x50
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d007      	beq.n	80022fa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80022ea:	230f      	movs	r3, #15
 80022ec:	18fc      	adds	r4, r7, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 f9b3 	bl	800265c <ADC_Enable>
 80022f6:	0003      	movs	r3, r0
 80022f8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022fa:	230f      	movs	r3, #15
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d120      	bne.n	8002346 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_ADC_Start+0xa4>)
 800230a:	4013      	ands	r3, r2
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	0052      	lsls	r2, r2, #1
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2250      	movs	r2, #80	; 0x50
 8002320:	2100      	movs	r1, #0
 8002322:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	221c      	movs	r2, #28
 800232a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2104      	movs	r1, #4
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	e003      	b.n	8002346 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800233e:	230f      	movs	r3, #15
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	2202      	movs	r2, #2
 8002344:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002346:	230f      	movs	r3, #15
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	781b      	ldrb	r3, [r3, #0]
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b005      	add	sp, #20
 8002352:	bd90      	pop	{r4, r7, pc}
 8002354:	fffff0fe 	.word	0xfffff0fe

08002358 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002360:	230f      	movs	r3, #15
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2250      	movs	r2, #80	; 0x50
 800236c:	5c9b      	ldrb	r3, [r3, r2]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Stop+0x1e>
 8002372:	2302      	movs	r3, #2
 8002374:	e029      	b.n	80023ca <HAL_ADC_Stop+0x72>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2250      	movs	r2, #80	; 0x50
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800237e:	250f      	movs	r5, #15
 8002380:	197c      	adds	r4, r7, r5
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 fa29 	bl	80027dc <ADC_ConversionStop>
 800238a:	0003      	movs	r3, r0
 800238c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800238e:	197b      	adds	r3, r7, r5
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d112      	bne.n	80023bc <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002396:	197c      	adds	r4, r7, r5
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f9be 	bl	800271c <ADC_Disable>
 80023a0:	0003      	movs	r3, r0
 80023a2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023a4:	197b      	adds	r3, r7, r5
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_ADC_Stop+0x7c>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	2201      	movs	r2, #1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2250      	movs	r2, #80	; 0x50
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80023c4:	230f      	movs	r3, #15
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	781b      	ldrb	r3, [r3, #0]
}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b004      	add	sp, #16
 80023d0:	bdb0      	pop	{r4, r5, r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	fffffefe 	.word	0xfffffefe

080023d8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d102      	bne.n	80023f8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80023f2:	2308      	movs	r3, #8
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e014      	b.n	8002422 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	4013      	ands	r3, r2
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10b      	bne.n	800241e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	2220      	movs	r2, #32
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2250      	movs	r2, #80	; 0x50
 8002416:	2100      	movs	r1, #0
 8002418:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06c      	b.n	80024f8 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800241e:	230c      	movs	r3, #12
 8002420:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002422:	f7ff fda3 	bl	8001f6c <HAL_GetTick>
 8002426:	0003      	movs	r3, r0
 8002428:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800242a:	e019      	b.n	8002460 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	d016      	beq.n	8002460 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d007      	beq.n	8002448 <HAL_ADC_PollForConversion+0x70>
 8002438:	f7ff fd98 	bl	8001f6c <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d20b      	bcs.n	8002460 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	2204      	movs	r2, #4
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2250      	movs	r2, #80	; 0x50
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e04b      	b.n	80024f8 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	d0df      	beq.n	800242c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	23c0      	movs	r3, #192	; 0xc0
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4013      	ands	r3, r2
 8002486:	d12e      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800248e:	2b00      	cmp	r3, #0
 8002490:	d129      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2208      	movs	r2, #8
 800249a:	4013      	ands	r3, r2
 800249c:	2b08      	cmp	r3, #8
 800249e:	d122      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2204      	movs	r2, #4
 80024a8:	4013      	ands	r3, r2
 80024aa:	d110      	bne.n	80024ce <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	210c      	movs	r1, #12
 80024b8:	438a      	bics	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <HAL_ADC_PollForConversion+0x128>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	2201      	movs	r2, #1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
 80024cc:	e00b      	b.n	80024e6 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	2220      	movs	r2, #32
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	2201      	movs	r2, #1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	220c      	movs	r2, #12
 80024f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b004      	add	sp, #16
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	fffffefe 	.word	0xfffffefe

08002504 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2250      	movs	r2, #80	; 0x50
 800252a:	5c9b      	ldrb	r3, [r3, r2]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x18>
 8002530:	2302      	movs	r3, #2
 8002532:	e085      	b.n	8002640 <HAL_ADC_ConfigChannel+0x124>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2250      	movs	r2, #80	; 0x50
 8002538:	2101      	movs	r1, #1
 800253a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2204      	movs	r2, #4
 8002544:	4013      	ands	r3, r2
 8002546:	d00b      	beq.n	8002560 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	2220      	movs	r2, #32
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2250      	movs	r2, #80	; 0x50
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e06f      	b.n	8002640 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_ADC_ConfigChannel+0x12c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d035      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	035b      	lsls	r3, r3, #13
 8002576:	0b5a      	lsrs	r2, r3, #13
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	02db      	lsls	r3, r3, #11
 8002588:	4013      	ands	r3, r2
 800258a:	d009      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b2e      	ldr	r3, [pc, #184]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	0409      	lsls	r1, r1, #16
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800259a:	200a      	movs	r0, #10
 800259c:	f000 f964 	bl	8002868 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	4013      	ands	r3, r2
 80025aa:	d006      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	03c9      	lsls	r1, r1, #15
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	025b      	lsls	r3, r3, #9
 80025c2:	4013      	ands	r3, r2
 80025c4:	d037      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80025c6:	4b21      	ldr	r3, [pc, #132]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	0449      	lsls	r1, r1, #17
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e02f      	b.n	8002636 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	035b      	lsls	r3, r3, #13
 80025e2:	0b5b      	lsrs	r3, r3, #13
 80025e4:	43d9      	mvns	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	400a      	ands	r2, r1
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	02db      	lsls	r3, r3, #11
 80025f6:	4013      	ands	r3, r2
 80025f8:	d005      	beq.n	8002606 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 8002600:	4913      	ldr	r1, [pc, #76]	; (8002650 <HAL_ADC_ConfigChannel+0x134>)
 8002602:	400a      	ands	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	029b      	lsls	r3, r3, #10
 800260e:	4013      	ands	r3, r2
 8002610:	d005      	beq.n	800261e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 8002618:	490e      	ldr	r1, [pc, #56]	; (8002654 <HAL_ADC_ConfigChannel+0x138>)
 800261a:	400a      	ands	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	025b      	lsls	r3, r3, #9
 8002626:	4013      	ands	r3, r2
 8002628:	d005      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <HAL_ADC_ConfigChannel+0x130>)
 8002630:	4909      	ldr	r1, [pc, #36]	; (8002658 <HAL_ADC_ConfigChannel+0x13c>)
 8002632:	400a      	ands	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2250      	movs	r2, #80	; 0x50
 800263a:	2100      	movs	r1, #0
 800263c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}
 8002648:	00001001 	.word	0x00001001
 800264c:	40012708 	.word	0x40012708
 8002650:	ff7fffff 	.word	0xff7fffff
 8002654:	ffbfffff 	.word	0xffbfffff
 8002658:	feffffff 	.word	0xfeffffff

0800265c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2203      	movs	r2, #3
 8002670:	4013      	ands	r3, r2
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <ADC_Enable+0x2c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2201      	movs	r2, #1
 800267e:	4013      	ands	r3, r2
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <ADC_Enable+0x2c>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <ADC_Enable+0x2e>
 8002688:	2300      	movs	r3, #0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d13f      	bne.n	800270e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a20      	ldr	r2, [pc, #128]	; (8002718 <ADC_Enable+0xbc>)
 8002696:	4013      	ands	r3, r2
 8002698:	d00d      	beq.n	80026b6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	2210      	movs	r2, #16
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	2201      	movs	r2, #1
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e02c      	b.n	8002710 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2101      	movs	r1, #1
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f000 f8ce 	bl	8002868 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80026cc:	f7ff fc4e 	bl	8001f6c <HAL_GetTick>
 80026d0:	0003      	movs	r3, r0
 80026d2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026d4:	e014      	b.n	8002700 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026d6:	f7ff fc49 	bl	8001f6c <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b0a      	cmp	r3, #10
 80026e2:	d90d      	bls.n	8002700 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	2210      	movs	r2, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	2201      	movs	r2, #1
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e007      	b.n	8002710 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	2b01      	cmp	r3, #1
 800270c:	d1e3      	bne.n	80026d6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b004      	add	sp, #16
 8002716:	bd80      	pop	{r7, pc}
 8002718:	80000017 	.word	0x80000017

0800271c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2203      	movs	r2, #3
 8002730:	4013      	ands	r3, r2
 8002732:	2b01      	cmp	r3, #1
 8002734:	d108      	bne.n	8002748 <ADC_Disable+0x2c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	4013      	ands	r3, r2
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <ADC_Disable+0x2c>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <ADC_Disable+0x2e>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d041      	beq.n	80027d2 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2205      	movs	r2, #5
 8002756:	4013      	ands	r3, r2
 8002758:	2b01      	cmp	r3, #1
 800275a:	d110      	bne.n	800277e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2102      	movs	r1, #2
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2203      	movs	r2, #3
 8002772:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002774:	f7ff fbfa 	bl	8001f6c <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800277c:	e022      	b.n	80027c4 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	2210      	movs	r2, #16
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	2201      	movs	r2, #1
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e01c      	b.n	80027d4 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800279a:	f7ff fbe7 	bl	8001f6c <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b0a      	cmp	r3, #10
 80027a6:	d90d      	bls.n	80027c4 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	2210      	movs	r2, #16
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	2201      	movs	r2, #1
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d0e3      	beq.n	800279a <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b004      	add	sp, #16
 80027da:	bd80      	pop	{r7, pc}

080027dc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2204      	movs	r2, #4
 80027f0:	4013      	ands	r3, r2
 80027f2:	d034      	beq.n	800285e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2204      	movs	r2, #4
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d10d      	bne.n	800281e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2202      	movs	r2, #2
 800280a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800280c:	d107      	bne.n	800281e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2110      	movs	r1, #16
 800281a:	430a      	orrs	r2, r1
 800281c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800281e:	f7ff fba5 	bl	8001f6c <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002826:	e014      	b.n	8002852 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002828:	f7ff fba0 	bl	8001f6c <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b0a      	cmp	r3, #10
 8002834:	d90d      	bls.n	8002852 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	2210      	movs	r2, #16
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	2201      	movs	r2, #1
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e006      	b.n	8002860 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2204      	movs	r2, #4
 800285a:	4013      	ands	r3, r2
 800285c:	d1e4      	bne.n	8002828 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b004      	add	sp, #16
 8002866:	bd80      	pop	{r7, pc}

08002868 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <ADC_DelayMicroSecond+0x38>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	490b      	ldr	r1, [pc, #44]	; (80028a4 <ADC_DelayMicroSecond+0x3c>)
 8002876:	0018      	movs	r0, r3
 8002878:	f7fd fc58 	bl	800012c <__udivsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	001a      	movs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4353      	muls	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002886:	e002      	b.n	800288e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3b01      	subs	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f9      	bne.n	8002888 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b004      	add	sp, #16
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	20000000 	.word	0x20000000
 80028a4:	000f4240 	.word	0x000f4240

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	0002      	movs	r2, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b7f      	cmp	r3, #127	; 0x7f
 80028bc:	d828      	bhi.n	8002910 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028be:	4a2f      	ldr	r2, [pc, #188]	; (800297c <__NVIC_SetPriority+0xd4>)
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	33c0      	adds	r3, #192	; 0xc0
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	589b      	ldr	r3, [r3, r2]
 80028ce:	1dfa      	adds	r2, r7, #7
 80028d0:	7812      	ldrb	r2, [r2, #0]
 80028d2:	0011      	movs	r1, r2
 80028d4:	2203      	movs	r2, #3
 80028d6:	400a      	ands	r2, r1
 80028d8:	00d2      	lsls	r2, r2, #3
 80028da:	21ff      	movs	r1, #255	; 0xff
 80028dc:	4091      	lsls	r1, r2
 80028de:	000a      	movs	r2, r1
 80028e0:	43d2      	mvns	r2, r2
 80028e2:	401a      	ands	r2, r3
 80028e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	22ff      	movs	r2, #255	; 0xff
 80028ec:	401a      	ands	r2, r3
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	0018      	movs	r0, r3
 80028f4:	2303      	movs	r3, #3
 80028f6:	4003      	ands	r3, r0
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028fc:	481f      	ldr	r0, [pc, #124]	; (800297c <__NVIC_SetPriority+0xd4>)
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	430a      	orrs	r2, r1
 8002908:	33c0      	adds	r3, #192	; 0xc0
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800290e:	e031      	b.n	8002974 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002910:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <__NVIC_SetPriority+0xd8>)
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	0019      	movs	r1, r3
 8002918:	230f      	movs	r3, #15
 800291a:	400b      	ands	r3, r1
 800291c:	3b08      	subs	r3, #8
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3306      	adds	r3, #6
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	18d3      	adds	r3, r2, r3
 8002926:	3304      	adds	r3, #4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	1dfa      	adds	r2, r7, #7
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	0011      	movs	r1, r2
 8002930:	2203      	movs	r2, #3
 8002932:	400a      	ands	r2, r1
 8002934:	00d2      	lsls	r2, r2, #3
 8002936:	21ff      	movs	r1, #255	; 0xff
 8002938:	4091      	lsls	r1, r2
 800293a:	000a      	movs	r2, r1
 800293c:	43d2      	mvns	r2, r2
 800293e:	401a      	ands	r2, r3
 8002940:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	22ff      	movs	r2, #255	; 0xff
 8002948:	401a      	ands	r2, r3
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	0018      	movs	r0, r3
 8002950:	2303      	movs	r3, #3
 8002952:	4003      	ands	r3, r0
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002958:	4809      	ldr	r0, [pc, #36]	; (8002980 <__NVIC_SetPriority+0xd8>)
 800295a:	1dfb      	adds	r3, r7, #7
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	001c      	movs	r4, r3
 8002960:	230f      	movs	r3, #15
 8002962:	4023      	ands	r3, r4
 8002964:	3b08      	subs	r3, #8
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	430a      	orrs	r2, r1
 800296a:	3306      	adds	r3, #6
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	18c3      	adds	r3, r0, r3
 8002970:	3304      	adds	r3, #4
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b003      	add	sp, #12
 800297a:	bd90      	pop	{r4, r7, pc}
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	1e5a      	subs	r2, r3, #1
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	045b      	lsls	r3, r3, #17
 8002994:	429a      	cmp	r2, r3
 8002996:	d301      	bcc.n	800299c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002998:	2301      	movs	r3, #1
 800299a:	e010      	b.n	80029be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <SysTick_Config+0x44>)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	3a01      	subs	r2, #1
 80029a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a4:	2301      	movs	r3, #1
 80029a6:	425b      	negs	r3, r3
 80029a8:	2103      	movs	r1, #3
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7ff ff7c 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <SysTick_Config+0x44>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <SysTick_Config+0x44>)
 80029b8:	2207      	movs	r2, #7
 80029ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029bc:	2300      	movs	r3, #0
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	210f      	movs	r1, #15
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	1c02      	adds	r2, r0, #0
 80029dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	0011      	movs	r1, r2
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7ff ff5d 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b004      	add	sp, #16
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7ff ffbf 	bl	8002984 <SysTick_Config>
 8002a06:	0003      	movs	r3, r0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a26:	e14f      	b.n	8002cc8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4091      	lsls	r1, r2
 8002a32:	000a      	movs	r2, r1
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d100      	bne.n	8002a40 <HAL_GPIO_Init+0x30>
 8002a3e:	e140      	b.n	8002cc2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d00b      	beq.n	8002a60 <HAL_GPIO_Init+0x50>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d007      	beq.n	8002a60 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a54:	2b11      	cmp	r3, #17
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b12      	cmp	r3, #18
 8002a5e:	d130      	bne.n	8002ac2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	0013      	movs	r3, r2
 8002a70:	43da      	mvns	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	409a      	lsls	r2, r3
 8002a82:	0013      	movs	r3, r2
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a96:	2201      	movs	r2, #1
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	2201      	movs	r2, #1
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0xf2>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b12      	cmp	r3, #18
 8002b00:	d123      	bne.n	8002b4a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	58d3      	ldr	r3, [r2, r3]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2207      	movs	r2, #7
 8002b14:	4013      	ands	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	0013      	movs	r3, r2
 8002b1e:	43da      	mvns	r2, r3
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2107      	movs	r1, #7
 8002b2e:	400b      	ands	r3, r1
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	409a      	lsls	r2, r3
 8002b34:	0013      	movs	r3, r2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	0092      	lsls	r2, r2, #2
 8002b46:	6939      	ldr	r1, [r7, #16]
 8002b48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	409a      	lsls	r2, r3
 8002b58:	0013      	movs	r3, r2
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2203      	movs	r2, #3
 8002b68:	401a      	ands	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	0013      	movs	r3, r2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	055b      	lsls	r3, r3, #21
 8002b86:	4013      	ands	r3, r2
 8002b88:	d100      	bne.n	8002b8c <HAL_GPIO_Init+0x17c>
 8002b8a:	e09a      	b.n	8002cc2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8c:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_GPIO_Init+0x2d0>)
 8002b92:	2101      	movs	r1, #1
 8002b94:	430a      	orrs	r2, r1
 8002b96:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b98:	4a52      	ldr	r2, [pc, #328]	; (8002ce4 <HAL_GPIO_Init+0x2d4>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	589b      	ldr	r3, [r3, r2]
 8002ba4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	4013      	ands	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	220f      	movs	r2, #15
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	23a0      	movs	r3, #160	; 0xa0
 8002bc0:	05db      	lsls	r3, r3, #23
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d019      	beq.n	8002bfa <HAL_GPIO_Init+0x1ea>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a47      	ldr	r2, [pc, #284]	; (8002ce8 <HAL_GPIO_Init+0x2d8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0x1e6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a46      	ldr	r2, [pc, #280]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_Init+0x1e2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a45      	ldr	r2, [pc, #276]	; (8002cf0 <HAL_GPIO_Init+0x2e0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x1de>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a44      	ldr	r2, [pc, #272]	; (8002cf4 <HAL_GPIO_Init+0x2e4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_Init+0x1da>
 8002be6:	2305      	movs	r3, #5
 8002be8:	e008      	b.n	8002bfc <HAL_GPIO_Init+0x1ec>
 8002bea:	2306      	movs	r3, #6
 8002bec:	e006      	b.n	8002bfc <HAL_GPIO_Init+0x1ec>
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e004      	b.n	8002bfc <HAL_GPIO_Init+0x1ec>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_Init+0x1ec>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_GPIO_Init+0x1ec>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	2103      	movs	r1, #3
 8002c00:	400a      	ands	r2, r1
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	4093      	lsls	r3, r2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c0c:	4935      	ldr	r1, [pc, #212]	; (8002ce4 <HAL_GPIO_Init+0x2d4>)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3302      	adds	r3, #2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1a:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	025b      	lsls	r3, r3, #9
 8002c32:	4013      	ands	r3, r2
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c44:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	029b      	lsls	r3, r3, #10
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	035b      	lsls	r3, r3, #13
 8002c86:	4013      	ands	r3, r2
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	039b      	lsls	r3, r3, #14
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	40da      	lsrs	r2, r3
 8002cd0:	1e13      	subs	r3, r2, #0
 8002cd2:	d000      	beq.n	8002cd6 <HAL_GPIO_Init+0x2c6>
 8002cd4:	e6a8      	b.n	8002a28 <HAL_GPIO_Init+0x18>
  }
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b006      	add	sp, #24
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	50000400 	.word	0x50000400
 8002cec:	50000800 	.word	0x50000800
 8002cf0:	50000c00 	.word	0x50000c00
 8002cf4:	50001c00 	.word	0x50001c00
 8002cf8:	40010400 	.word	0x40010400

08002cfc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	000a      	movs	r2, r1
 8002d06:	1cbb      	adds	r3, r7, #2
 8002d08:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	1cba      	adds	r2, r7, #2
 8002d10:	8812      	ldrh	r2, [r2, #0]
 8002d12:	4013      	ands	r3, r2
 8002d14:	d004      	beq.n	8002d20 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d16:	230f      	movs	r3, #15
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	e003      	b.n	8002d28 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d20:	230f      	movs	r3, #15
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d28:	230f      	movs	r3, #15
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	781b      	ldrb	r3, [r3, #0]
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b004      	add	sp, #16
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	0008      	movs	r0, r1
 8002d40:	0011      	movs	r1, r2
 8002d42:	1cbb      	adds	r3, r7, #2
 8002d44:	1c02      	adds	r2, r0, #0
 8002d46:	801a      	strh	r2, [r3, #0]
 8002d48:	1c7b      	adds	r3, r7, #1
 8002d4a:	1c0a      	adds	r2, r1, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d4e:	1c7b      	adds	r3, r7, #1
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d56:	1cbb      	adds	r3, r7, #2
 8002d58:	881a      	ldrh	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002d5e:	e003      	b.n	8002d68 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002d60:	1cbb      	adds	r3, r7, #2
 8002d62:	881a      	ldrh	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e082      	b.n	8002e88 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2241      	movs	r2, #65	; 0x41
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d107      	bne.n	8002d9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2240      	movs	r2, #64	; 0x40
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7fe ff79 	bl	8001c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2241      	movs	r2, #65	; 0x41
 8002da2:	2124      	movs	r1, #36	; 0x24
 8002da4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	438a      	bics	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4934      	ldr	r1, [pc, #208]	; (8002e90 <HAL_I2C_Init+0x120>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4931      	ldr	r1, [pc, #196]	; (8002e94 <HAL_I2C_Init+0x124>)
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d108      	bne.n	8002dee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	0209      	lsls	r1, r1, #8
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	e007      	b.n	8002dfe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2184      	movs	r1, #132	; 0x84
 8002df8:	0209      	lsls	r1, r1, #8
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d104      	bne.n	8002e10 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	491f      	ldr	r1, [pc, #124]	; (8002e98 <HAL_I2C_Init+0x128>)
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	491a      	ldr	r1, [pc, #104]	; (8002e94 <HAL_I2C_Init+0x124>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	0011      	movs	r1, r2
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	021a      	lsls	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69d9      	ldr	r1, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1a      	ldr	r2, [r3, #32]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2101      	movs	r1, #1
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2241      	movs	r2, #65	; 0x41
 8002e74:	2120      	movs	r1, #32
 8002e76:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2242      	movs	r2, #66	; 0x42
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	f0ffffff 	.word	0xf0ffffff
 8002e94:	ffff7fff 	.word	0xffff7fff
 8002e98:	02008000 	.word	0x02008000

08002e9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	0008      	movs	r0, r1
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	230a      	movs	r3, #10
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	1c02      	adds	r2, r0, #0
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	1c0a      	adds	r2, r1, #0
 8002eb8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2241      	movs	r2, #65	; 0x41
 8002ebe:	5c9b      	ldrb	r3, [r3, r2]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d000      	beq.n	8002ec8 <HAL_I2C_Master_Transmit+0x2c>
 8002ec6:	e0e7      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	5c9b      	ldrb	r3, [r3, r2]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2C_Master_Transmit+0x3a>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0e1      	b.n	800309a <HAL_I2C_Master_Transmit+0x1fe>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2240      	movs	r2, #64	; 0x40
 8002eda:	2101      	movs	r1, #1
 8002edc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ede:	f7ff f845 	bl	8001f6c <HAL_GetTick>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	0219      	lsls	r1, r3, #8
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2319      	movs	r3, #25
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f000 f8fc 	bl	80030f0 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0cc      	b.n	800309a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2241      	movs	r2, #65	; 0x41
 8002f04:	2121      	movs	r1, #33	; 0x21
 8002f06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2242      	movs	r2, #66	; 0x42
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2208      	movs	r2, #8
 8002f20:	18ba      	adds	r2, r7, r2
 8002f22:	8812      	ldrh	r2, [r2, #0]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2bff      	cmp	r3, #255	; 0xff
 8002f34:	d911      	bls.n	8002f5a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	22ff      	movs	r2, #255	; 0xff
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	045c      	lsls	r4, r3, #17
 8002f46:	230a      	movs	r3, #10
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	8819      	ldrh	r1, [r3, #0]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	4b55      	ldr	r3, [pc, #340]	; (80030a4 <HAL_I2C_Master_Transmit+0x208>)
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	0023      	movs	r3, r4
 8002f54:	f000 f9ec 	bl	8003330 <I2C_TransferConfig>
 8002f58:	e075      	b.n	8003046 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	049c      	lsls	r4, r3, #18
 8002f6e:	230a      	movs	r3, #10
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	8819      	ldrh	r1, [r3, #0]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <HAL_I2C_Master_Transmit+0x208>)
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	0023      	movs	r3, r4
 8002f7c:	f000 f9d8 	bl	8003330 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002f80:	e061      	b.n	8003046 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f8f0 	bl	800316e <I2C_WaitOnTXISFlagUntilTimeout>
 8002f8e:	1e03      	subs	r3, r0, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e081      	b.n	800309a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d03a      	beq.n	8003046 <HAL_I2C_Master_Transmit+0x1aa>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d136      	bne.n	8003046 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	f000 f883 	bl	80030f0 <I2C_WaitOnFlagUntilTimeout>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e053      	b.n	800309a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2bff      	cmp	r3, #255	; 0xff
 8002ffa:	d911      	bls.n	8003020 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	b2da      	uxtb	r2, r3
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	045c      	lsls	r4, r3, #17
 800300c:	230a      	movs	r3, #10
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	8819      	ldrh	r1, [r3, #0]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	2300      	movs	r3, #0
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	0023      	movs	r3, r4
 800301a:	f000 f989 	bl	8003330 <I2C_TransferConfig>
 800301e:	e012      	b.n	8003046 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	b2da      	uxtb	r2, r3
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	049c      	lsls	r4, r3, #18
 8003034:	230a      	movs	r3, #10
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	8819      	ldrh	r1, [r3, #0]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	2300      	movs	r3, #0
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	0023      	movs	r3, r4
 8003042:	f000 f975 	bl	8003330 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d198      	bne.n	8002f82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 f8c8 	bl	80031ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800305c:	1e03      	subs	r3, r0, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e01a      	b.n	800309a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2220      	movs	r2, #32
 800306a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	490c      	ldr	r1, [pc, #48]	; (80030a8 <HAL_I2C_Master_Transmit+0x20c>)
 8003078:	400a      	ands	r2, r1
 800307a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2241      	movs	r2, #65	; 0x41
 8003080:	2120      	movs	r1, #32
 8003082:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2242      	movs	r2, #66	; 0x42
 8003088:	2100      	movs	r1, #0
 800308a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b007      	add	sp, #28
 80030a0:	bd90      	pop	{r4, r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	80002000 	.word	0x80002000
 80030a8:	fe00e800 	.word	0xfe00e800

080030ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2202      	movs	r2, #2
 80030bc:	4013      	ands	r3, r2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d103      	bne.n	80030ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d007      	beq.n	80030e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2101      	movs	r1, #1
 80030e4:	430a      	orrs	r2, r1
 80030e6:	619a      	str	r2, [r3, #24]
  }
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	1dfb      	adds	r3, r7, #7
 80030fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003100:	e021      	b.n	8003146 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	3301      	adds	r3, #1
 8003106:	d01e      	beq.n	8003146 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003108:	f7fe ff30 	bl	8001f6c <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d302      	bcc.n	800311e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d113      	bne.n	8003146 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	2220      	movs	r2, #32
 8003124:	431a      	orrs	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2241      	movs	r2, #65	; 0x41
 800312e:	2120      	movs	r1, #32
 8003130:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2242      	movs	r2, #66	; 0x42
 8003136:	2100      	movs	r1, #0
 8003138:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2240      	movs	r2, #64	; 0x40
 800313e:	2100      	movs	r1, #0
 8003140:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	4013      	ands	r3, r2
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	425a      	negs	r2, r3
 8003156:	4153      	adcs	r3, r2
 8003158:	b2db      	uxtb	r3, r3
 800315a:	001a      	movs	r2, r3
 800315c:	1dfb      	adds	r3, r7, #7
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d0ce      	beq.n	8003102 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b004      	add	sp, #16
 800316c:	bd80      	pop	{r7, pc}

0800316e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800317a:	e02b      	b.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 f86e 	bl	8003264 <I2C_IsAcknowledgeFailed>
 8003188:	1e03      	subs	r3, r0, #0
 800318a:	d001      	beq.n	8003190 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e029      	b.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	3301      	adds	r3, #1
 8003194:	d01e      	beq.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003196:	f7fe fee9 	bl	8001f6c <HAL_GetTick>
 800319a:	0002      	movs	r2, r0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d302      	bcc.n	80031ac <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d113      	bne.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	2220      	movs	r2, #32
 80031b2:	431a      	orrs	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2241      	movs	r2, #65	; 0x41
 80031bc:	2120      	movs	r1, #32
 80031be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2242      	movs	r2, #66	; 0x42
 80031c4:	2100      	movs	r1, #0
 80031c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	2100      	movs	r1, #0
 80031ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e007      	b.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2202      	movs	r2, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d1cc      	bne.n	800317c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b004      	add	sp, #16
 80031ea:	bd80      	pop	{r7, pc}

080031ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f8:	e028      	b.n	800324c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	0018      	movs	r0, r3
 8003202:	f000 f82f 	bl	8003264 <I2C_IsAcknowledgeFailed>
 8003206:	1e03      	subs	r3, r0, #0
 8003208:	d001      	beq.n	800320e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e026      	b.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7fe fead 	bl	8001f6c <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d113      	bne.n	800324c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	2220      	movs	r2, #32
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2241      	movs	r2, #65	; 0x41
 8003234:	2120      	movs	r1, #32
 8003236:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2242      	movs	r2, #66	; 0x42
 800323c:	2100      	movs	r1, #0
 800323e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e007      	b.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2220      	movs	r2, #32
 8003254:	4013      	ands	r3, r2
 8003256:	2b20      	cmp	r3, #32
 8003258:	d1cf      	bne.n	80031fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b004      	add	sp, #16
 8003262:	bd80      	pop	{r7, pc}

08003264 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2210      	movs	r2, #16
 8003278:	4013      	ands	r3, r2
 800327a:	2b10      	cmp	r3, #16
 800327c:	d151      	bne.n	8003322 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800327e:	e021      	b.n	80032c4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	3301      	adds	r3, #1
 8003284:	d01e      	beq.n	80032c4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003286:	f7fe fe71 	bl	8001f6c <HAL_GetTick>
 800328a:	0002      	movs	r2, r0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	429a      	cmp	r2, r3
 8003294:	d302      	bcc.n	800329c <I2C_IsAcknowledgeFailed+0x38>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d113      	bne.n	80032c4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	2220      	movs	r2, #32
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2241      	movs	r2, #65	; 0x41
 80032ac:	2120      	movs	r1, #32
 80032ae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2242      	movs	r2, #66	; 0x42
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e02f      	b.n	8003324 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2220      	movs	r2, #32
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d1d6      	bne.n	8003280 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2210      	movs	r2, #16
 80032d8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2220      	movs	r2, #32
 80032e0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7ff fee1 	bl	80030ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	490d      	ldr	r1, [pc, #52]	; (800332c <I2C_IsAcknowledgeFailed+0xc8>)
 80032f6:	400a      	ands	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	2204      	movs	r2, #4
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2241      	movs	r2, #65	; 0x41
 800330a:	2120      	movs	r1, #32
 800330c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2242      	movs	r2, #66	; 0x42
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2240      	movs	r2, #64	; 0x40
 800331a:	2100      	movs	r1, #0
 800331c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b004      	add	sp, #16
 800332a:	bd80      	pop	{r7, pc}
 800332c:	fe00e800 	.word	0xfe00e800

08003330 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	0008      	movs	r0, r1
 800333a:	0011      	movs	r1, r2
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	240a      	movs	r4, #10
 8003340:	193b      	adds	r3, r7, r4
 8003342:	1c02      	adds	r2, r0, #0
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	2009      	movs	r0, #9
 8003348:	183b      	adds	r3, r7, r0
 800334a:	1c0a      	adds	r2, r1, #0
 800334c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	6a3a      	ldr	r2, [r7, #32]
 8003356:	0d51      	lsrs	r1, r2, #21
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	00d2      	lsls	r2, r2, #3
 800335c:	400a      	ands	r2, r1
 800335e:	490e      	ldr	r1, [pc, #56]	; (8003398 <I2C_TransferConfig+0x68>)
 8003360:	430a      	orrs	r2, r1
 8003362:	43d2      	mvns	r2, r2
 8003364:	401a      	ands	r2, r3
 8003366:	0011      	movs	r1, r2
 8003368:	193b      	adds	r3, r7, r4
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	059b      	lsls	r3, r3, #22
 800336e:	0d9a      	lsrs	r2, r3, #22
 8003370:	183b      	adds	r3, r7, r0
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	0418      	lsls	r0, r3, #16
 8003376:	23ff      	movs	r3, #255	; 0xff
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	4003      	ands	r3, r0
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	431a      	orrs	r2, r3
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	b005      	add	sp, #20
 8003394:	bd90      	pop	{r4, r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	03ff63ff 	.word	0x03ff63ff

0800339c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2241      	movs	r2, #65	; 0x41
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d138      	bne.n	8003424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	5c9b      	ldrb	r3, [r3, r2]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033bc:	2302      	movs	r3, #2
 80033be:	e032      	b.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	2101      	movs	r1, #1
 80033c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2241      	movs	r2, #65	; 0x41
 80033cc:	2124      	movs	r1, #36	; 0x24
 80033ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2101      	movs	r1, #1
 80033dc:	438a      	bics	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4911      	ldr	r1, [pc, #68]	; (8003430 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2101      	movs	r1, #1
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2241      	movs	r2, #65	; 0x41
 8003414:	2120      	movs	r1, #32
 8003416:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2240      	movs	r2, #64	; 0x40
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b002      	add	sp, #8
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	ffffefff 	.word	0xffffefff

08003434 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2241      	movs	r2, #65	; 0x41
 8003442:	5c9b      	ldrb	r3, [r3, r2]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	d139      	bne.n	80034be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2240      	movs	r2, #64	; 0x40
 800344e:	5c9b      	ldrb	r3, [r3, r2]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003454:	2302      	movs	r3, #2
 8003456:	e033      	b.n	80034c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2240      	movs	r2, #64	; 0x40
 800345c:	2101      	movs	r1, #1
 800345e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2241      	movs	r2, #65	; 0x41
 8003464:	2124      	movs	r1, #36	; 0x24
 8003466:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2101      	movs	r1, #1
 8003474:	438a      	bics	r2, r1
 8003476:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003484:	4013      	ands	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	430a      	orrs	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2241      	movs	r2, #65	; 0x41
 80034ae:	2120      	movs	r1, #32
 80034b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2240      	movs	r2, #64	; 0x40
 80034b6:	2100      	movs	r1, #0
 80034b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
  }
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b004      	add	sp, #16
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	fffff0ff 	.word	0xfffff0ff

080034cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f000 fbaf 	bl	8003c3e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e0:	4bcf      	ldr	r3, [pc, #828]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	220c      	movs	r2, #12
 80034e6:	4013      	ands	r3, r2
 80034e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ea:	4bcd      	ldr	r3, [pc, #820]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	025b      	lsls	r3, r3, #9
 80034f2:	4013      	ands	r3, r2
 80034f4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2201      	movs	r2, #1
 80034fc:	4013      	ands	r3, r2
 80034fe:	d100      	bne.n	8003502 <HAL_RCC_OscConfig+0x36>
 8003500:	e07e      	b.n	8003600 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d007      	beq.n	8003518 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	2b0c      	cmp	r3, #12
 800350c:	d112      	bne.n	8003534 <HAL_RCC_OscConfig+0x68>
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	025b      	lsls	r3, r3, #9
 8003514:	429a      	cmp	r2, r3
 8003516:	d10d      	bne.n	8003534 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	4bc1      	ldr	r3, [pc, #772]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	029b      	lsls	r3, r3, #10
 8003520:	4013      	ands	r3, r2
 8003522:	d100      	bne.n	8003526 <HAL_RCC_OscConfig+0x5a>
 8003524:	e06b      	b.n	80035fe <HAL_RCC_OscConfig+0x132>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d167      	bne.n	80035fe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f000 fb85 	bl	8003c3e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	025b      	lsls	r3, r3, #9
 800353c:	429a      	cmp	r2, r3
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x84>
 8003540:	4bb7      	ldr	r3, [pc, #732]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4bb6      	ldr	r3, [pc, #728]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003546:	2180      	movs	r1, #128	; 0x80
 8003548:	0249      	lsls	r1, r1, #9
 800354a:	430a      	orrs	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e027      	b.n	80035a0 <HAL_RCC_OscConfig+0xd4>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	23a0      	movs	r3, #160	; 0xa0
 8003556:	02db      	lsls	r3, r3, #11
 8003558:	429a      	cmp	r2, r3
 800355a:	d10e      	bne.n	800357a <HAL_RCC_OscConfig+0xae>
 800355c:	4bb0      	ldr	r3, [pc, #704]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4baf      	ldr	r3, [pc, #700]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	02c9      	lsls	r1, r1, #11
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	4bad      	ldr	r3, [pc, #692]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4bac      	ldr	r3, [pc, #688]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	0249      	lsls	r1, r1, #9
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e012      	b.n	80035a0 <HAL_RCC_OscConfig+0xd4>
 800357a:	4ba9      	ldr	r3, [pc, #676]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4ba8      	ldr	r3, [pc, #672]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003580:	49a8      	ldr	r1, [pc, #672]	; (8003824 <HAL_RCC_OscConfig+0x358>)
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	4ba6      	ldr	r3, [pc, #664]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	025b      	lsls	r3, r3, #9
 800358e:	4013      	ands	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4ba2      	ldr	r3, [pc, #648]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4ba1      	ldr	r3, [pc, #644]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800359a:	49a3      	ldr	r1, [pc, #652]	; (8003828 <HAL_RCC_OscConfig+0x35c>)
 800359c:	400a      	ands	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d015      	beq.n	80035d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe fce0 	bl	8001f6c <HAL_GetTick>
 80035ac:	0003      	movs	r3, r0
 80035ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035b0:	e009      	b.n	80035c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b2:	f7fe fcdb 	bl	8001f6c <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b64      	cmp	r3, #100	; 0x64
 80035be:	d902      	bls.n	80035c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	f000 fb3c 	bl	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035c6:	4b96      	ldr	r3, [pc, #600]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	029b      	lsls	r3, r3, #10
 80035ce:	4013      	ands	r3, r2
 80035d0:	d0ef      	beq.n	80035b2 <HAL_RCC_OscConfig+0xe6>
 80035d2:	e015      	b.n	8003600 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe fcca 	bl	8001f6c <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035de:	f7fe fcc5 	bl	8001f6c <HAL_GetTick>
 80035e2:	0002      	movs	r2, r0
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b64      	cmp	r3, #100	; 0x64
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e326      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035f0:	4b8b      	ldr	r3, [pc, #556]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	029b      	lsls	r3, r3, #10
 80035f8:	4013      	ands	r3, r2
 80035fa:	d1f0      	bne.n	80035de <HAL_RCC_OscConfig+0x112>
 80035fc:	e000      	b.n	8003600 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2202      	movs	r2, #2
 8003606:	4013      	ands	r3, r2
 8003608:	d100      	bne.n	800360c <HAL_RCC_OscConfig+0x140>
 800360a:	e08b      	b.n	8003724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d005      	beq.n	8003624 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d13e      	bne.n	800369c <HAL_RCC_OscConfig+0x1d0>
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d13b      	bne.n	800369c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003624:	4b7e      	ldr	r3, [pc, #504]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2204      	movs	r2, #4
 800362a:	4013      	ands	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_RCC_OscConfig+0x16c>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e302      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b79      	ldr	r3, [pc, #484]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a7b      	ldr	r2, [pc, #492]	; (800382c <HAL_RCC_OscConfig+0x360>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	021a      	lsls	r2, r3, #8
 8003648:	4b75      	ldr	r3, [pc, #468]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800364e:	4b74      	ldr	r3, [pc, #464]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2209      	movs	r2, #9
 8003654:	4393      	bics	r3, r2
 8003656:	0019      	movs	r1, r3
 8003658:	4b71      	ldr	r3, [pc, #452]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	430a      	orrs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003660:	f000 fc40 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003664:	0001      	movs	r1, r0
 8003666:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	220f      	movs	r2, #15
 800366e:	4013      	ands	r3, r2
 8003670:	4a6f      	ldr	r2, [pc, #444]	; (8003830 <HAL_RCC_OscConfig+0x364>)
 8003672:	5cd3      	ldrb	r3, [r2, r3]
 8003674:	000a      	movs	r2, r1
 8003676:	40da      	lsrs	r2, r3
 8003678:	4b6e      	ldr	r3, [pc, #440]	; (8003834 <HAL_RCC_OscConfig+0x368>)
 800367a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800367c:	4b6e      	ldr	r3, [pc, #440]	; (8003838 <HAL_RCC_OscConfig+0x36c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2513      	movs	r5, #19
 8003682:	197c      	adds	r4, r7, r5
 8003684:	0018      	movs	r0, r3
 8003686:	f7fe fc2b 	bl	8001ee0 <HAL_InitTick>
 800368a:	0003      	movs	r3, r0
 800368c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800368e:	197b      	adds	r3, r7, r5
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d046      	beq.n	8003724 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003696:	197b      	adds	r3, r7, r5
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	e2d0      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d027      	beq.n	80036f2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80036a2:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2209      	movs	r2, #9
 80036a8:	4393      	bics	r3, r2
 80036aa:	0019      	movs	r1, r3
 80036ac:	4b5c      	ldr	r3, [pc, #368]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe fc5a 	bl	8001f6c <HAL_GetTick>
 80036b8:	0003      	movs	r3, r0
 80036ba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036be:	f7fe fc55 	bl	8001f6c <HAL_GetTick>
 80036c2:	0002      	movs	r2, r0
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e2b6      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036d0:	4b53      	ldr	r3, [pc, #332]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2204      	movs	r2, #4
 80036d6:	4013      	ands	r3, r2
 80036d8:	d0f1      	beq.n	80036be <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036da:	4b51      	ldr	r3, [pc, #324]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4a53      	ldr	r2, [pc, #332]	; (800382c <HAL_RCC_OscConfig+0x360>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	021a      	lsls	r2, r3, #8
 80036ea:	4b4d      	ldr	r3, [pc, #308]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	e018      	b.n	8003724 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f2:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80036f8:	2101      	movs	r1, #1
 80036fa:	438a      	bics	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fe fc35 	bl	8001f6c <HAL_GetTick>
 8003702:	0003      	movs	r3, r0
 8003704:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003708:	f7fe fc30 	bl	8001f6c <HAL_GetTick>
 800370c:	0002      	movs	r2, r0
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e291      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800371a:	4b41      	ldr	r3, [pc, #260]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2204      	movs	r2, #4
 8003720:	4013      	ands	r3, r2
 8003722:	d1f1      	bne.n	8003708 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2210      	movs	r2, #16
 800372a:	4013      	ands	r3, r2
 800372c:	d100      	bne.n	8003730 <HAL_RCC_OscConfig+0x264>
 800372e:	e0a1      	b.n	8003874 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d140      	bne.n	80037b8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003736:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4013      	ands	r3, r2
 8003740:	d005      	beq.n	800374e <HAL_RCC_OscConfig+0x282>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e277      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800374e:	4b34      	ldr	r3, [pc, #208]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4a3a      	ldr	r2, [pc, #232]	; (800383c <HAL_RCC_OscConfig+0x370>)
 8003754:	4013      	ands	r3, r2
 8003756:	0019      	movs	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800375c:	4b30      	ldr	r3, [pc, #192]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003762:	4b2f      	ldr	r3, [pc, #188]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	0a19      	lsrs	r1, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	061a      	lsls	r2, r3, #24
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	0b5b      	lsrs	r3, r3, #13
 800377c:	3301      	adds	r3, #1
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	0212      	lsls	r2, r2, #8
 8003782:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003784:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	210f      	movs	r1, #15
 800378c:	400b      	ands	r3, r1
 800378e:	4928      	ldr	r1, [pc, #160]	; (8003830 <HAL_RCC_OscConfig+0x364>)
 8003790:	5ccb      	ldrb	r3, [r1, r3]
 8003792:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_RCC_OscConfig+0x368>)
 8003796:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003798:	4b27      	ldr	r3, [pc, #156]	; (8003838 <HAL_RCC_OscConfig+0x36c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2513      	movs	r5, #19
 800379e:	197c      	adds	r4, r7, r5
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7fe fb9d 	bl	8001ee0 <HAL_InitTick>
 80037a6:	0003      	movs	r3, r0
 80037a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80037aa:	197b      	adds	r3, r7, r5
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d060      	beq.n	8003874 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80037b2:	197b      	adds	r3, r7, r5
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	e242      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d03f      	beq.n	8003840 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80037c6:	2180      	movs	r1, #128	; 0x80
 80037c8:	0049      	lsls	r1, r1, #1
 80037ca:	430a      	orrs	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe fbcd 	bl	8001f6c <HAL_GetTick>
 80037d2:	0003      	movs	r3, r0
 80037d4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037d8:	f7fe fbc8 	bl	8001f6c <HAL_GetTick>
 80037dc:	0002      	movs	r2, r0
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e229      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a10      	ldr	r2, [pc, #64]	; (800383c <HAL_RCC_OscConfig+0x370>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	0a19      	lsrs	r1, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	061a      	lsls	r2, r3, #24
 8003818:	4b01      	ldr	r3, [pc, #4]	; (8003820 <HAL_RCC_OscConfig+0x354>)
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	e029      	b.n	8003874 <HAL_RCC_OscConfig+0x3a8>
 8003820:	40021000 	.word	0x40021000
 8003824:	fffeffff 	.word	0xfffeffff
 8003828:	fffbffff 	.word	0xfffbffff
 800382c:	ffffe0ff 	.word	0xffffe0ff
 8003830:	08005730 	.word	0x08005730
 8003834:	20000000 	.word	0x20000000
 8003838:	20000004 	.word	0x20000004
 800383c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003840:	4bbd      	ldr	r3, [pc, #756]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4bbc      	ldr	r3, [pc, #752]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003846:	49bd      	ldr	r1, [pc, #756]	; (8003b3c <HAL_RCC_OscConfig+0x670>)
 8003848:	400a      	ands	r2, r1
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fb8e 	bl	8001f6c <HAL_GetTick>
 8003850:	0003      	movs	r3, r0
 8003852:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003856:	f7fe fb89 	bl	8001f6c <HAL_GetTick>
 800385a:	0002      	movs	r2, r0
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e1ea      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003868:	4bb3      	ldr	r3, [pc, #716]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4013      	ands	r3, r2
 8003872:	d1f0      	bne.n	8003856 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2208      	movs	r2, #8
 800387a:	4013      	ands	r3, r2
 800387c:	d036      	beq.n	80038ec <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d019      	beq.n	80038ba <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003886:	4bac      	ldr	r3, [pc, #688]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800388a:	4bab      	ldr	r3, [pc, #684]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 800388c:	2101      	movs	r1, #1
 800388e:	430a      	orrs	r2, r1
 8003890:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7fe fb6b 	bl	8001f6c <HAL_GetTick>
 8003896:	0003      	movs	r3, r0
 8003898:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389c:	f7fe fb66 	bl	8001f6c <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e1c7      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038ae:	4ba2      	ldr	r3, [pc, #648]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80038b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b2:	2202      	movs	r2, #2
 80038b4:	4013      	ands	r3, r2
 80038b6:	d0f1      	beq.n	800389c <HAL_RCC_OscConfig+0x3d0>
 80038b8:	e018      	b.n	80038ec <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ba:	4b9f      	ldr	r3, [pc, #636]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80038bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038be:	4b9e      	ldr	r3, [pc, #632]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80038c0:	2101      	movs	r1, #1
 80038c2:	438a      	bics	r2, r1
 80038c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fe fb51 	bl	8001f6c <HAL_GetTick>
 80038ca:	0003      	movs	r3, r0
 80038cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fe fb4c 	bl	8001f6c <HAL_GetTick>
 80038d4:	0002      	movs	r2, r0
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1ad      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038e2:	4b95      	ldr	r3, [pc, #596]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80038e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e6:	2202      	movs	r2, #2
 80038e8:	4013      	ands	r3, r2
 80038ea:	d1f1      	bne.n	80038d0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2204      	movs	r2, #4
 80038f2:	4013      	ands	r3, r2
 80038f4:	d100      	bne.n	80038f8 <HAL_RCC_OscConfig+0x42c>
 80038f6:	e0ae      	b.n	8003a56 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f8:	2027      	movs	r0, #39	; 0x27
 80038fa:	183b      	adds	r3, r7, r0
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003900:	4b8d      	ldr	r3, [pc, #564]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	055b      	lsls	r3, r3, #21
 8003908:	4013      	ands	r3, r2
 800390a:	d109      	bne.n	8003920 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b8a      	ldr	r3, [pc, #552]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 800390e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003910:	4b89      	ldr	r3, [pc, #548]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	0549      	lsls	r1, r1, #21
 8003916:	430a      	orrs	r2, r1
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800391a:	183b      	adds	r3, r7, r0
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	4b87      	ldr	r3, [pc, #540]	; (8003b40 <HAL_RCC_OscConfig+0x674>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4013      	ands	r3, r2
 800392a:	d11a      	bne.n	8003962 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392c:	4b84      	ldr	r3, [pc, #528]	; (8003b40 <HAL_RCC_OscConfig+0x674>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b83      	ldr	r3, [pc, #524]	; (8003b40 <HAL_RCC_OscConfig+0x674>)
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	0049      	lsls	r1, r1, #1
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393a:	f7fe fb17 	bl	8001f6c <HAL_GetTick>
 800393e:	0003      	movs	r3, r0
 8003940:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003944:	f7fe fb12 	bl	8001f6c <HAL_GetTick>
 8003948:	0002      	movs	r2, r0
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e173      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b7a      	ldr	r3, [pc, #488]	; (8003b40 <HAL_RCC_OscConfig+0x674>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4013      	ands	r3, r2
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	429a      	cmp	r2, r3
 800396c:	d107      	bne.n	800397e <HAL_RCC_OscConfig+0x4b2>
 800396e:	4b72      	ldr	r3, [pc, #456]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003972:	4b71      	ldr	r3, [pc, #452]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	0049      	lsls	r1, r1, #1
 8003978:	430a      	orrs	r2, r1
 800397a:	651a      	str	r2, [r3, #80]	; 0x50
 800397c:	e031      	b.n	80039e2 <HAL_RCC_OscConfig+0x516>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x4d4>
 8003986:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800398a:	4b6b      	ldr	r3, [pc, #428]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 800398c:	496b      	ldr	r1, [pc, #428]	; (8003b3c <HAL_RCC_OscConfig+0x670>)
 800398e:	400a      	ands	r2, r1
 8003990:	651a      	str	r2, [r3, #80]	; 0x50
 8003992:	4b69      	ldr	r3, [pc, #420]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003996:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003998:	496a      	ldr	r1, [pc, #424]	; (8003b44 <HAL_RCC_OscConfig+0x678>)
 800399a:	400a      	ands	r2, r1
 800399c:	651a      	str	r2, [r3, #80]	; 0x50
 800399e:	e020      	b.n	80039e2 <HAL_RCC_OscConfig+0x516>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	23a0      	movs	r3, #160	; 0xa0
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d10e      	bne.n	80039ca <HAL_RCC_OscConfig+0x4fe>
 80039ac:	4b62      	ldr	r3, [pc, #392]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80039ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039b0:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	00c9      	lsls	r1, r1, #3
 80039b6:	430a      	orrs	r2, r1
 80039b8:	651a      	str	r2, [r3, #80]	; 0x50
 80039ba:	4b5f      	ldr	r3, [pc, #380]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80039bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039be:	4b5e      	ldr	r3, [pc, #376]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	0049      	lsls	r1, r1, #1
 80039c4:	430a      	orrs	r2, r1
 80039c6:	651a      	str	r2, [r3, #80]	; 0x50
 80039c8:	e00b      	b.n	80039e2 <HAL_RCC_OscConfig+0x516>
 80039ca:	4b5b      	ldr	r3, [pc, #364]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80039cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039ce:	4b5a      	ldr	r3, [pc, #360]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80039d0:	495a      	ldr	r1, [pc, #360]	; (8003b3c <HAL_RCC_OscConfig+0x670>)
 80039d2:	400a      	ands	r2, r1
 80039d4:	651a      	str	r2, [r3, #80]	; 0x50
 80039d6:	4b58      	ldr	r3, [pc, #352]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80039d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039da:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 80039dc:	4959      	ldr	r1, [pc, #356]	; (8003b44 <HAL_RCC_OscConfig+0x678>)
 80039de:	400a      	ands	r2, r1
 80039e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d015      	beq.n	8003a16 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fe fabf 	bl	8001f6c <HAL_GetTick>
 80039ee:	0003      	movs	r3, r0
 80039f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f2:	e009      	b.n	8003a08 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fe faba 	bl	8001f6c <HAL_GetTick>
 80039f8:	0002      	movs	r2, r0
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_RCC_OscConfig+0x67c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e11a      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a08:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4013      	ands	r3, r2
 8003a12:	d0ef      	beq.n	80039f4 <HAL_RCC_OscConfig+0x528>
 8003a14:	e014      	b.n	8003a40 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe faa9 	bl	8001f6c <HAL_GetTick>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a1e:	e009      	b.n	8003a34 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7fe faa4 	bl	8001f6c <HAL_GetTick>
 8003a24:	0002      	movs	r2, r0
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	4a47      	ldr	r2, [pc, #284]	; (8003b48 <HAL_RCC_OscConfig+0x67c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e104      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a34:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d1ef      	bne.n	8003a20 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a40:	2327      	movs	r3, #39	; 0x27
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a4e:	4b3a      	ldr	r3, [pc, #232]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003a50:	493e      	ldr	r1, [pc, #248]	; (8003b4c <HAL_RCC_OscConfig+0x680>)
 8003a52:	400a      	ands	r2, r1
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d049      	beq.n	8003af4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d026      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a68:	4b33      	ldr	r3, [pc, #204]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	4b32      	ldr	r3, [pc, #200]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003a6e:	2101      	movs	r1, #1
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a78:	4b2f      	ldr	r3, [pc, #188]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	635a      	str	r2, [r3, #52]	; 0x34
 8003a80:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <HAL_RCC_OscConfig+0x684>)
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <HAL_RCC_OscConfig+0x684>)
 8003a86:	2180      	movs	r1, #128	; 0x80
 8003a88:	0189      	lsls	r1, r1, #6
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7fe fa6d 	bl	8001f6c <HAL_GetTick>
 8003a92:	0003      	movs	r3, r0
 8003a94:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a98:	f7fe fa68 	bl	8001f6c <HAL_GetTick>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0c9      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003aaa:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d0f1      	beq.n	8003a98 <HAL_RCC_OscConfig+0x5cc>
 8003ab4:	e01e      	b.n	8003af4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003abc:	2101      	movs	r1, #1
 8003abe:	438a      	bics	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <HAL_RCC_OscConfig+0x684>)
 8003ac4:	6a1a      	ldr	r2, [r3, #32]
 8003ac6:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <HAL_RCC_OscConfig+0x684>)
 8003ac8:	4922      	ldr	r1, [pc, #136]	; (8003b54 <HAL_RCC_OscConfig+0x688>)
 8003aca:	400a      	ands	r2, r1
 8003acc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fe fa4d 	bl	8001f6c <HAL_GetTick>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad8:	f7fe fa48 	bl	8001f6c <HAL_GetTick>
 8003adc:	0002      	movs	r2, r0
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e0a9      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aea:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2202      	movs	r2, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	d1f1      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d100      	bne.n	8003afe <HAL_RCC_OscConfig+0x632>
 8003afc:	e09e      	b.n	8003c3c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	d100      	bne.n	8003b06 <HAL_RCC_OscConfig+0x63a>
 8003b04:	e077      	b.n	8003bf6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d158      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_OscConfig+0x66c>)
 8003b14:	4910      	ldr	r1, [pc, #64]	; (8003b58 <HAL_RCC_OscConfig+0x68c>)
 8003b16:	400a      	ands	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fa27 	bl	8001f6c <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b22:	e01b      	b.n	8003b5c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fa22 	bl	8001f6c <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d914      	bls.n	8003b5c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e083      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	fffffeff 	.word	0xfffffeff
 8003b40:	40007000 	.word	0x40007000
 8003b44:	fffffbff 	.word	0xfffffbff
 8003b48:	00001388 	.word	0x00001388
 8003b4c:	efffffff 	.word	0xefffffff
 8003b50:	40010000 	.word	0x40010000
 8003b54:	ffffdfff 	.word	0xffffdfff
 8003b58:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b5c:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	049b      	lsls	r3, r3, #18
 8003b64:	4013      	ands	r3, r2
 8003b66:	d1dd      	bne.n	8003b24 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b68:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <HAL_RCC_OscConfig+0x780>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	431a      	orrs	r2, r3
 8003b82:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b88:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	0449      	lsls	r1, r1, #17
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fe f9e9 	bl	8001f6c <HAL_GetTick>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe f9e4 	bl	8001f6c <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e045      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003bb2:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	049b      	lsls	r3, r3, #18
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x6d4>
 8003bbe:	e03d      	b.n	8003c3c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003bc6:	4922      	ldr	r1, [pc, #136]	; (8003c50 <HAL_RCC_OscConfig+0x784>)
 8003bc8:	400a      	ands	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fe f9ce 	bl	8001f6c <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe f9c9 	bl	8001f6c <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e02a      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	049b      	lsls	r3, r3, #18
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x70a>
 8003bf4:	e022      	b.n	8003c3c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e01d      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_RCC_OscConfig+0x77c>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	401a      	ands	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d10f      	bne.n	8003c38 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	23f0      	movs	r3, #240	; 0xf0
 8003c1c:	039b      	lsls	r3, r3, #14
 8003c1e:	401a      	ands	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	23c0      	movs	r3, #192	; 0xc0
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	401a      	ands	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b00a      	add	sp, #40	; 0x28
 8003c44:	bdb0      	pop	{r4, r5, r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	ff02ffff 	.word	0xff02ffff
 8003c50:	feffffff 	.word	0xfeffffff

08003c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b5b0      	push	{r4, r5, r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e128      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b96      	ldr	r3, [pc, #600]	; (8003ec4 <HAL_RCC_ClockConfig+0x270>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4013      	ands	r3, r2
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d91e      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b93      	ldr	r3, [pc, #588]	; (8003ec4 <HAL_RCC_ClockConfig+0x270>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4393      	bics	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	4b90      	ldr	r3, [pc, #576]	; (8003ec4 <HAL_RCC_ClockConfig+0x270>)
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c88:	f7fe f970 	bl	8001f6c <HAL_GetTick>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c90:	e009      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c92:	f7fe f96b 	bl	8001f6c <HAL_GetTick>
 8003c96:	0002      	movs	r2, r0
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	4a8a      	ldr	r2, [pc, #552]	; (8003ec8 <HAL_RCC_ClockConfig+0x274>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e109      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b87      	ldr	r3, [pc, #540]	; (8003ec4 <HAL_RCC_ClockConfig+0x270>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2201      	movs	r2, #1
 8003cac:	4013      	ands	r3, r2
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1ee      	bne.n	8003c92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cbe:	4b83      	ldr	r3, [pc, #524]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	22f0      	movs	r2, #240	; 0xf0
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	4b7f      	ldr	r3, [pc, #508]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d100      	bne.n	8003cde <HAL_RCC_ClockConfig+0x8a>
 8003cdc:	e089      	b.n	8003df2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ce6:	4b79      	ldr	r3, [pc, #484]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	029b      	lsls	r3, r3, #10
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d120      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e0e1      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cfe:	4b73      	ldr	r3, [pc, #460]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	049b      	lsls	r3, r3, #18
 8003d06:	4013      	ands	r3, r2
 8003d08:	d114      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e0d5      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d106      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d16:	4b6d      	ldr	r3, [pc, #436]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d109      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0ca      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d24:	4b69      	ldr	r3, [pc, #420]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0c2      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d34:	4b65      	ldr	r3, [pc, #404]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2203      	movs	r2, #3
 8003d3a:	4393      	bics	r3, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	4b62      	ldr	r3, [pc, #392]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003d44:	430a      	orrs	r2, r1
 8003d46:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fe f910 	bl	8001f6c <HAL_GetTick>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d111      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d58:	e009      	b.n	8003d6e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5a:	f7fe f907 	bl	8001f6c <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	4a58      	ldr	r2, [pc, #352]	; (8003ec8 <HAL_RCC_ClockConfig+0x274>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e0a5      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d6e:	4b57      	ldr	r3, [pc, #348]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	220c      	movs	r2, #12
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d1ef      	bne.n	8003d5a <HAL_RCC_ClockConfig+0x106>
 8003d7a:	e03a      	b.n	8003df2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d111      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d84:	e009      	b.n	8003d9a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d86:	f7fe f8f1 	bl	8001f6c <HAL_GetTick>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	4a4d      	ldr	r2, [pc, #308]	; (8003ec8 <HAL_RCC_ClockConfig+0x274>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e08f      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d9a:	4b4c      	ldr	r3, [pc, #304]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	220c      	movs	r2, #12
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d1ef      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x132>
 8003da6:	e024      	b.n	8003df2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d11b      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003db0:	e009      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db2:	f7fe f8db 	bl	8001f6c <HAL_GetTick>
 8003db6:	0002      	movs	r2, r0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	4a42      	ldr	r2, [pc, #264]	; (8003ec8 <HAL_RCC_ClockConfig+0x274>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e079      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dc6:	4b41      	ldr	r3, [pc, #260]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	220c      	movs	r2, #12
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d1ef      	bne.n	8003db2 <HAL_RCC_ClockConfig+0x15e>
 8003dd2:	e00e      	b.n	8003df2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd4:	f7fe f8ca 	bl	8001f6c <HAL_GetTick>
 8003dd8:	0002      	movs	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	4a3a      	ldr	r2, [pc, #232]	; (8003ec8 <HAL_RCC_ClockConfig+0x274>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e068      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003de8:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	220c      	movs	r2, #12
 8003dee:	4013      	ands	r3, r2
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003df2:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <HAL_RCC_ClockConfig+0x270>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	4013      	ands	r3, r2
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d21e      	bcs.n	8003e3e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e00:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <HAL_RCC_ClockConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2201      	movs	r2, #1
 8003e06:	4393      	bics	r3, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_RCC_ClockConfig+0x270>)
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e12:	f7fe f8ab 	bl	8001f6c <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1a:	e009      	b.n	8003e30 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fe f8a6 	bl	8001f6c <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <HAL_RCC_ClockConfig+0x274>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e044      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_RCC_ClockConfig+0x270>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2201      	movs	r2, #1
 8003e36:	4013      	ands	r3, r2
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2204      	movs	r2, #4
 8003e44:	4013      	ands	r3, r2
 8003e46:	d009      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e48:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <HAL_RCC_ClockConfig+0x27c>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	0019      	movs	r1, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2208      	movs	r2, #8
 8003e62:	4013      	ands	r3, r2
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e66:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <HAL_RCC_ClockConfig+0x280>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	00da      	lsls	r2, r3, #3
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e7c:	f000 f832 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003e80:	0001      	movs	r1, r0
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCC_ClockConfig+0x278>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	220f      	movs	r2, #15
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <HAL_RCC_ClockConfig+0x284>)
 8003e8e:	5cd3      	ldrb	r3, [r2, r3]
 8003e90:	000a      	movs	r2, r1
 8003e92:	40da      	lsrs	r2, r3
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_RCC_ClockConfig+0x288>)
 8003e96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_RCC_ClockConfig+0x28c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	250b      	movs	r5, #11
 8003e9e:	197c      	adds	r4, r7, r5
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7fe f81d 	bl	8001ee0 <HAL_InitTick>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003eaa:	197b      	adds	r3, r7, r5
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003eb2:	197b      	adds	r3, r7, r5
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b004      	add	sp, #16
 8003ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	40022000 	.word	0x40022000
 8003ec8:	00001388 	.word	0x00001388
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	fffff8ff 	.word	0xfffff8ff
 8003ed4:	ffffc7ff 	.word	0xffffc7ff
 8003ed8:	08005730 	.word	0x08005730
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	20000004 	.word	0x20000004

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	b08e      	sub	sp, #56	; 0x38
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003eea:	4b4c      	ldr	r3, [pc, #304]	; (800401c <HAL_RCC_GetSysClockFreq+0x138>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b0c      	cmp	r3, #12
 8003ef8:	d014      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x40>
 8003efa:	d900      	bls.n	8003efe <HAL_RCC_GetSysClockFreq+0x1a>
 8003efc:	e07b      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x112>
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d002      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x24>
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d00b      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f06:	e076      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f08:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_RCC_GetSysClockFreq+0x138>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003f12:	4b43      	ldr	r3, [pc, #268]	; (8004020 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003f16:	e07c      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <HAL_RCC_GetSysClockFreq+0x140>)
 8003f1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f1c:	e079      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f1e:	4b42      	ldr	r3, [pc, #264]	; (8004028 <HAL_RCC_GetSysClockFreq+0x144>)
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f22:	e076      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	0c9a      	lsrs	r2, r3, #18
 8003f28:	230f      	movs	r3, #15
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	4b3f      	ldr	r3, [pc, #252]	; (800402c <HAL_RCC_GetSysClockFreq+0x148>)
 8003f2e:	5c9b      	ldrb	r3, [r3, r2]
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	0d9a      	lsrs	r2, r3, #22
 8003f36:	2303      	movs	r3, #3
 8003f38:	4013      	ands	r3, r2
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <HAL_RCC_GetSysClockFreq+0x138>)
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	025b      	lsls	r3, r3, #9
 8003f46:	4013      	ands	r3, r2
 8003f48:	d01a      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	4a35      	ldr	r2, [pc, #212]	; (8004028 <HAL_RCC_GetSysClockFreq+0x144>)
 8003f54:	2300      	movs	r3, #0
 8003f56:	69b8      	ldr	r0, [r7, #24]
 8003f58:	69f9      	ldr	r1, [r7, #28]
 8003f5a:	f7fc fa7d 	bl	8000458 <__aeabi_lmul>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	000b      	movs	r3, r1
 8003f62:	0010      	movs	r0, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f7fc fa51 	bl	8000418 <__aeabi_uldivmod>
 8003f76:	0002      	movs	r2, r0
 8003f78:	000b      	movs	r3, r1
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7e:	e037      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f80:	4b26      	ldr	r3, [pc, #152]	; (800401c <HAL_RCC_GetSysClockFreq+0x138>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2210      	movs	r2, #16
 8003f86:	4013      	ands	r3, r2
 8003f88:	d01a      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4a23      	ldr	r2, [pc, #140]	; (8004020 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f94:	2300      	movs	r3, #0
 8003f96:	68b8      	ldr	r0, [r7, #8]
 8003f98:	68f9      	ldr	r1, [r7, #12]
 8003f9a:	f7fc fa5d 	bl	8000458 <__aeabi_lmul>
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	000b      	movs	r3, r1
 8003fa2:	0010      	movs	r0, r2
 8003fa4:	0019      	movs	r1, r3
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f7fc fa31 	bl	8000418 <__aeabi_uldivmod>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	000b      	movs	r3, r1
 8003fba:	0013      	movs	r3, r2
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbe:	e017      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	4a16      	ldr	r2, [pc, #88]	; (8004024 <HAL_RCC_GetSysClockFreq+0x140>)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f7fc fa44 	bl	8000458 <__aeabi_lmul>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	000b      	movs	r3, r1
 8003fd4:	0010      	movs	r0, r2
 8003fd6:	0019      	movs	r1, r3
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	001c      	movs	r4, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	001d      	movs	r5, r3
 8003fe0:	0022      	movs	r2, r4
 8003fe2:	002b      	movs	r3, r5
 8003fe4:	f7fc fa18 	bl	8000418 <__aeabi_uldivmod>
 8003fe8:	0002      	movs	r2, r0
 8003fea:	000b      	movs	r3, r1
 8003fec:	0013      	movs	r3, r2
 8003fee:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ff4:	e00d      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_GetSysClockFreq+0x138>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	0b5b      	lsrs	r3, r3, #13
 8003ffc:	2207      	movs	r2, #7
 8003ffe:	4013      	ands	r3, r2
 8004000:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	3301      	adds	r3, #1
 8004006:	2280      	movs	r2, #128	; 0x80
 8004008:	0212      	lsls	r2, r2, #8
 800400a:	409a      	lsls	r2, r3
 800400c:	0013      	movs	r3, r2
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004010:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004014:	0018      	movs	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	b00e      	add	sp, #56	; 0x38
 800401a:	bdb0      	pop	{r4, r5, r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	003d0900 	.word	0x003d0900
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200
 800402c:	08005740 	.word	0x08005740

08004030 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004038:	2317      	movs	r3, #23
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2220      	movs	r2, #32
 8004046:	4013      	ands	r3, r2
 8004048:	d106      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	4013      	ands	r3, r2
 8004054:	d100      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004056:	e0d9      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004058:	4b9c      	ldr	r3, [pc, #624]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800405a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	055b      	lsls	r3, r3, #21
 8004060:	4013      	ands	r3, r2
 8004062:	d10a      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004064:	4b99      	ldr	r3, [pc, #612]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004068:	4b98      	ldr	r3, [pc, #608]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800406a:	2180      	movs	r1, #128	; 0x80
 800406c:	0549      	lsls	r1, r1, #21
 800406e:	430a      	orrs	r2, r1
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004072:	2317      	movs	r3, #23
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407a:	4b95      	ldr	r3, [pc, #596]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4013      	ands	r3, r2
 8004084:	d11a      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004086:	4b92      	ldr	r3, [pc, #584]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b91      	ldr	r3, [pc, #580]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800408c:	2180      	movs	r1, #128	; 0x80
 800408e:	0049      	lsls	r1, r1, #1
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004094:	f7fd ff6a 	bl	8001f6c <HAL_GetTick>
 8004098:	0003      	movs	r3, r0
 800409a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fd ff65 	bl	8001f6c <HAL_GetTick>
 80040a2:	0002      	movs	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b64      	cmp	r3, #100	; 0x64
 80040aa:	d901      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e108      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b87      	ldr	r3, [pc, #540]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4013      	ands	r3, r2
 80040ba:	d0f0      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80040bc:	4b83      	ldr	r3, [pc, #524]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	23c0      	movs	r3, #192	; 0xc0
 80040c2:	039b      	lsls	r3, r3, #14
 80040c4:	4013      	ands	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	23c0      	movs	r3, #192	; 0xc0
 80040ce:	039b      	lsls	r3, r3, #14
 80040d0:	4013      	ands	r3, r2
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d107      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	23c0      	movs	r3, #192	; 0xc0
 80040de:	039b      	lsls	r3, r3, #14
 80040e0:	4013      	ands	r3, r2
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d013      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	23c0      	movs	r3, #192	; 0xc0
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	401a      	ands	r2, r3
 80040f2:	23c0      	movs	r3, #192	; 0xc0
 80040f4:	029b      	lsls	r3, r3, #10
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d10a      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040fa:	4b74      	ldr	r3, [pc, #464]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	029b      	lsls	r3, r3, #10
 8004102:	401a      	ands	r2, r3
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	429a      	cmp	r2, r3
 800410a:	d101      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0d8      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004110:	4b6e      	ldr	r3, [pc, #440]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004112:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004114:	23c0      	movs	r3, #192	; 0xc0
 8004116:	029b      	lsls	r3, r3, #10
 8004118:	4013      	ands	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d049      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	23c0      	movs	r3, #192	; 0xc0
 8004128:	029b      	lsls	r3, r3, #10
 800412a:	4013      	ands	r3, r2
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	429a      	cmp	r2, r3
 8004130:	d004      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2220      	movs	r2, #32
 8004138:	4013      	ands	r3, r2
 800413a:	d10d      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	23c0      	movs	r3, #192	; 0xc0
 8004142:	029b      	lsls	r3, r3, #10
 8004144:	4013      	ands	r3, r2
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	429a      	cmp	r2, r3
 800414a:	d034      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	4013      	ands	r3, r2
 8004156:	d02e      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004158:	4b5c      	ldr	r3, [pc, #368]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	4a5d      	ldr	r2, [pc, #372]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800415e:	4013      	ands	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004162:	4b5a      	ldr	r3, [pc, #360]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004166:	4b59      	ldr	r3, [pc, #356]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	0309      	lsls	r1, r1, #12
 800416c:	430a      	orrs	r2, r1
 800416e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004170:	4b56      	ldr	r3, [pc, #344]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004174:	4b55      	ldr	r3, [pc, #340]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004176:	4958      	ldr	r1, [pc, #352]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004178:	400a      	ands	r2, r1
 800417a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800417c:	4b53      	ldr	r3, [pc, #332]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4013      	ands	r3, r2
 800418a:	d014      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fd feee 	bl	8001f6c <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004194:	e009      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fd fee9 	bl	8001f6c <HAL_GetTick>
 800419a:	0002      	movs	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	4a4e      	ldr	r2, [pc, #312]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e08b      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041aa:	4b48      	ldr	r3, [pc, #288]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80041ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4013      	ands	r3, r2
 80041b4:	d0ef      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	23c0      	movs	r3, #192	; 0xc0
 80041bc:	029b      	lsls	r3, r3, #10
 80041be:	401a      	ands	r2, r3
 80041c0:	23c0      	movs	r3, #192	; 0xc0
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d10c      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80041c8:	4b40      	ldr	r3, [pc, #256]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a44      	ldr	r2, [pc, #272]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	23c0      	movs	r3, #192	; 0xc0
 80041d8:	039b      	lsls	r3, r3, #14
 80041da:	401a      	ands	r2, r3
 80041dc:	4b3b      	ldr	r3, [pc, #236]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80041de:	430a      	orrs	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	4b3a      	ldr	r3, [pc, #232]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80041e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	23c0      	movs	r3, #192	; 0xc0
 80041ec:	029b      	lsls	r3, r3, #10
 80041ee:	401a      	ands	r2, r3
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80041f2:	430a      	orrs	r2, r1
 80041f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041f6:	2317      	movs	r3, #23
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004200:	4b32      	ldr	r3, [pc, #200]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004206:	4937      	ldr	r1, [pc, #220]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004208:	400a      	ands	r2, r1
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	4013      	ands	r3, r2
 8004214:	d009      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004216:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	2203      	movs	r2, #3
 800421c:	4393      	bics	r3, r2
 800421e:	0019      	movs	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	4b29      	ldr	r3, [pc, #164]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004226:	430a      	orrs	r2, r1
 8004228:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2202      	movs	r2, #2
 8004230:	4013      	ands	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004234:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004238:	220c      	movs	r2, #12
 800423a:	4393      	bics	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004244:	430a      	orrs	r2, r1
 8004246:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2204      	movs	r2, #4
 800424e:	4013      	ands	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004252:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	4a24      	ldr	r2, [pc, #144]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004258:	4013      	ands	r3, r2
 800425a:	0019      	movs	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004262:	430a      	orrs	r2, r1
 8004264:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2208      	movs	r2, #8
 800426c:	4013      	ands	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004270:	4b16      	ldr	r3, [pc, #88]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004274:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004276:	4013      	ands	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004280:	430a      	orrs	r2, r1
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2240      	movs	r2, #64	; 0x40
 800428a:	4013      	ands	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	4013      	ands	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80042ac:	4b07      	ldr	r3, [pc, #28]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80042ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b0:	4a10      	ldr	r2, [pc, #64]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80042bc:	430a      	orrs	r2, r1
 80042be:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	0018      	movs	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b006      	add	sp, #24
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
 80042d4:	fffcffff 	.word	0xfffcffff
 80042d8:	fff7ffff 	.word	0xfff7ffff
 80042dc:	00001388 	.word	0x00001388
 80042e0:	ffcfffff 	.word	0xffcfffff
 80042e4:	efffffff 	.word	0xefffffff
 80042e8:	fffff3ff 	.word	0xfffff3ff
 80042ec:	ffffcfff 	.word	0xffffcfff
 80042f0:	fbffffff 	.word	0xfbffffff
 80042f4:	fff3ffff 	.word	0xfff3ffff

080042f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e083      	b.n	8004412 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	2382      	movs	r3, #130	; 0x82
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	429a      	cmp	r2, r3
 800431c:	d009      	beq.n	8004332 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	61da      	str	r2, [r3, #28]
 8004324:	e005      	b.n	8004332 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2251      	movs	r2, #81	; 0x51
 800433c:	5c9b      	ldrb	r3, [r3, r2]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d107      	bne.n	8004354 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2250      	movs	r2, #80	; 0x50
 8004348:	2100      	movs	r1, #0
 800434a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	0018      	movs	r0, r3
 8004350:	f7fd fce2 	bl	8001d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2251      	movs	r2, #81	; 0x51
 8004358:	2102      	movs	r1, #2
 800435a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2140      	movs	r1, #64	; 0x40
 8004368:	438a      	bics	r2, r1
 800436a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	2382      	movs	r3, #130	; 0x82
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	401a      	ands	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6899      	ldr	r1, [r3, #8]
 800437a:	2384      	movs	r3, #132	; 0x84
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	400b      	ands	r3, r1
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68d9      	ldr	r1, [r3, #12]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	400b      	ands	r3, r1
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2102      	movs	r1, #2
 8004394:	400b      	ands	r3, r1
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	2101      	movs	r1, #1
 800439e:	400b      	ands	r3, r1
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6999      	ldr	r1, [r3, #24]
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	400b      	ands	r3, r1
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	2138      	movs	r1, #56	; 0x38
 80043b4:	400b      	ands	r3, r1
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	2180      	movs	r1, #128	; 0x80
 80043be:	400b      	ands	r3, r1
 80043c0:	431a      	orrs	r2, r3
 80043c2:	0011      	movs	r1, r2
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	019b      	lsls	r3, r3, #6
 80043cc:	401a      	ands	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	0c1b      	lsrs	r3, r3, #16
 80043dc:	2204      	movs	r2, #4
 80043de:	4013      	ands	r3, r2
 80043e0:	0019      	movs	r1, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2210      	movs	r2, #16
 80043e8:	401a      	ands	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4907      	ldr	r1, [pc, #28]	; (800441c <HAL_SPI_Init+0x124>)
 80043fe:	400a      	ands	r2, r1
 8004400:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2251      	movs	r2, #81	; 0x51
 800440c:	2101      	movs	r1, #1
 800440e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	fffff7ff 	.word	0xfffff7ff

08004420 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	1dbb      	adds	r3, r7, #6
 800442e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004430:	231f      	movs	r3, #31
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2250      	movs	r2, #80	; 0x50
 800443c:	5c9b      	ldrb	r3, [r3, r2]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_SPI_Transmit+0x26>
 8004442:	2302      	movs	r3, #2
 8004444:	e13e      	b.n	80046c4 <HAL_SPI_Transmit+0x2a4>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2250      	movs	r2, #80	; 0x50
 800444a:	2101      	movs	r1, #1
 800444c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800444e:	f7fd fd8d 	bl	8001f6c <HAL_GetTick>
 8004452:	0003      	movs	r3, r0
 8004454:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004456:	2316      	movs	r3, #22
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	1dba      	adds	r2, r7, #6
 800445c:	8812      	ldrh	r2, [r2, #0]
 800445e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2251      	movs	r2, #81	; 0x51
 8004464:	5c9b      	ldrb	r3, [r3, r2]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d004      	beq.n	8004476 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800446c:	231f      	movs	r3, #31
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	2202      	movs	r2, #2
 8004472:	701a      	strb	r2, [r3, #0]
    goto error;
 8004474:	e11b      	b.n	80046ae <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_SPI_Transmit+0x64>
 800447c:	1dbb      	adds	r3, r7, #6
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004484:	231f      	movs	r3, #31
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
    goto error;
 800448c:	e10f      	b.n	80046ae <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2251      	movs	r2, #81	; 0x51
 8004492:	2103      	movs	r1, #3
 8004494:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1dba      	adds	r2, r7, #6
 80044a6:	8812      	ldrh	r2, [r2, #0]
 80044a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1dba      	adds	r2, r7, #6
 80044ae:	8812      	ldrh	r2, [r2, #0]
 80044b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	429a      	cmp	r2, r3
 80044da:	d110      	bne.n	80044fe <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2140      	movs	r1, #64	; 0x40
 80044e8:	438a      	bics	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	01c9      	lsls	r1, r1, #7
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	4013      	ands	r3, r2
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d007      	beq.n	800451c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2140      	movs	r1, #64	; 0x40
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	429a      	cmp	r2, r3
 8004526:	d14e      	bne.n	80045c6 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d004      	beq.n	800453a <HAL_SPI_Transmit+0x11a>
 8004530:	2316      	movs	r3, #22
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d13f      	bne.n	80045ba <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	881a      	ldrh	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	1c9a      	adds	r2, r3, #2
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800455e:	e02c      	b.n	80045ba <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2202      	movs	r2, #2
 8004568:	4013      	ands	r3, r2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d112      	bne.n	8004594 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	881a      	ldrh	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	1c9a      	adds	r2, r3, #2
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	86da      	strh	r2, [r3, #54]	; 0x36
 8004592:	e012      	b.n	80045ba <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004594:	f7fd fcea 	bl	8001f6c <HAL_GetTick>
 8004598:	0002      	movs	r2, r0
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d802      	bhi.n	80045aa <HAL_SPI_Transmit+0x18a>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	d102      	bne.n	80045b0 <HAL_SPI_Transmit+0x190>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80045b0:	231f      	movs	r3, #31
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	2203      	movs	r2, #3
 80045b6:	701a      	strb	r2, [r3, #0]
          goto error;
 80045b8:	e079      	b.n	80046ae <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1cd      	bne.n	8004560 <HAL_SPI_Transmit+0x140>
 80045c4:	e04f      	b.n	8004666 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <HAL_SPI_Transmit+0x1b8>
 80045ce:	2316      	movs	r3, #22
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d141      	bne.n	800465c <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	330c      	adds	r3, #12
 80045e2:	7812      	ldrb	r2, [r2, #0]
 80045e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045fe:	e02d      	b.n	800465c <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2202      	movs	r2, #2
 8004608:	4013      	ands	r3, r2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d113      	bne.n	8004636 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	86da      	strh	r2, [r3, #54]	; 0x36
 8004634:	e012      	b.n	800465c <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004636:	f7fd fc99 	bl	8001f6c <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d802      	bhi.n	800464c <HAL_SPI_Transmit+0x22c>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	d102      	bne.n	8004652 <HAL_SPI_Transmit+0x232>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8004652:	231f      	movs	r3, #31
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2203      	movs	r2, #3
 8004658:	701a      	strb	r2, [r3, #0]
          goto error;
 800465a:	e028      	b.n	80046ae <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1cc      	bne.n	8004600 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	0018      	movs	r0, r3
 800466e:	f000 fa83 	bl	8004b78 <SPI_EndRxTxTransaction>
 8004672:	1e03      	subs	r3, r0, #0
 8004674:	d002      	beq.n	800467c <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d004      	beq.n	80046ac <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80046a2:	231f      	movs	r3, #31
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e000      	b.n	80046ae <HAL_SPI_Transmit+0x28e>
  }

error:
 80046ac:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2251      	movs	r2, #81	; 0x51
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2250      	movs	r2, #80	; 0x50
 80046ba:	2100      	movs	r1, #0
 80046bc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80046be:	231f      	movs	r3, #31
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	781b      	ldrb	r3, [r3, #0]
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b008      	add	sp, #32
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	001a      	movs	r2, r3
 80046da:	1cbb      	adds	r3, r7, #2
 80046dc:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046de:	2301      	movs	r3, #1
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046e2:	232b      	movs	r3, #43	; 0x2b
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2250      	movs	r2, #80	; 0x50
 80046ee:	5c9b      	ldrb	r3, [r3, r2]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x2c>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e1a0      	b.n	8004a3a <HAL_SPI_TransmitReceive+0x36e>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2250      	movs	r2, #80	; 0x50
 80046fc:	2101      	movs	r1, #1
 80046fe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004700:	f7fd fc34 	bl	8001f6c <HAL_GetTick>
 8004704:	0003      	movs	r3, r0
 8004706:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004708:	2023      	movs	r0, #35	; 0x23
 800470a:	183b      	adds	r3, r7, r0
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	2151      	movs	r1, #81	; 0x51
 8004710:	5c52      	ldrb	r2, [r2, r1]
 8004712:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800471a:	231a      	movs	r3, #26
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	1cba      	adds	r2, r7, #2
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004724:	183b      	adds	r3, r7, r0
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d011      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x84>
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	2382      	movs	r3, #130	; 0x82
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	429a      	cmp	r2, r3
 8004734:	d107      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x7a>
 800473e:	183b      	adds	r3, r7, r0
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b04      	cmp	r3, #4
 8004744:	d004      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004746:	232b      	movs	r3, #43	; 0x2b
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2202      	movs	r2, #2
 800474c:	701a      	strb	r2, [r3, #0]
    goto error;
 800474e:	e169      	b.n	8004a24 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x98>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x98>
 800475c:	1cbb      	adds	r3, r7, #2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d104      	bne.n	800476e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004764:	232b      	movs	r3, #43	; 0x2b
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2201      	movs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
    goto error;
 800476c:	e15a      	b.n	8004a24 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2251      	movs	r2, #81	; 0x51
 8004772:	5c9b      	ldrb	r3, [r3, r2]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b04      	cmp	r3, #4
 8004778:	d003      	beq.n	8004782 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2251      	movs	r2, #81	; 0x51
 800477e:	2105      	movs	r1, #5
 8004780:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1cba      	adds	r2, r7, #2
 8004792:	8812      	ldrh	r2, [r2, #0]
 8004794:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1cba      	adds	r2, r7, #2
 800479a:	8812      	ldrh	r2, [r2, #0]
 800479c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1cba      	adds	r2, r7, #2
 80047a8:	8812      	ldrh	r2, [r2, #0]
 80047aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1cba      	adds	r2, r7, #2
 80047b0:	8812      	ldrh	r2, [r2, #0]
 80047b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2240      	movs	r2, #64	; 0x40
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d007      	beq.n	80047de <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d000      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x120>
 80047ea:	e07a      	b.n	80048e2 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x132>
 80047f4:	231a      	movs	r3, #26
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d166      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	881a      	ldrh	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	1c9a      	adds	r2, r3, #2
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004822:	e053      	b.n	80048cc <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	2b02      	cmp	r3, #2
 8004830:	d11b      	bne.n	800486a <HAL_SPI_TransmitReceive+0x19e>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d016      	beq.n	800486a <HAL_SPI_TransmitReceive+0x19e>
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d113      	bne.n	800486a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	881a      	ldrh	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	1c9a      	adds	r2, r3, #2
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2201      	movs	r2, #1
 8004872:	4013      	ands	r3, r2
 8004874:	2b01      	cmp	r3, #1
 8004876:	d119      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x1e0>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d014      	beq.n	80048ac <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	b292      	uxth	r2, r2
 800488e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	1c9a      	adds	r2, r3, #2
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048a8:	2301      	movs	r3, #1
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048ac:	f7fd fb5e 	bl	8001f6c <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d807      	bhi.n	80048cc <HAL_SPI_TransmitReceive+0x200>
 80048bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048be:	3301      	adds	r3, #1
 80048c0:	d004      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80048c2:	232b      	movs	r3, #43	; 0x2b
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	2203      	movs	r2, #3
 80048c8:	701a      	strb	r2, [r3, #0]
        goto error;
 80048ca:	e0ab      	b.n	8004a24 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1a6      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x158>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1a1      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x158>
 80048e0:	e07f      	b.n	80049e2 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_SPI_TransmitReceive+0x22a>
 80048ea:	231a      	movs	r3, #26
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d000      	beq.n	80048f6 <HAL_SPI_TransmitReceive+0x22a>
 80048f4:	e06b      	b.n	80049ce <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491c:	e057      	b.n	80049ce <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2202      	movs	r2, #2
 8004926:	4013      	ands	r3, r2
 8004928:	2b02      	cmp	r3, #2
 800492a:	d11c      	bne.n	8004966 <HAL_SPI_TransmitReceive+0x29a>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d017      	beq.n	8004966 <HAL_SPI_TransmitReceive+0x29a>
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d114      	bne.n	8004966 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2201      	movs	r2, #1
 800496e:	4013      	ands	r3, r2
 8004970:	2b01      	cmp	r3, #1
 8004972:	d119      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x2dc>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d014      	beq.n	80049a8 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a4:	2301      	movs	r3, #1
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049a8:	f7fd fae0 	bl	8001f6c <HAL_GetTick>
 80049ac:	0002      	movs	r2, r0
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d802      	bhi.n	80049be <HAL_SPI_TransmitReceive+0x2f2>
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	3301      	adds	r3, #1
 80049bc:	d102      	bne.n	80049c4 <HAL_SPI_TransmitReceive+0x2f8>
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80049c4:	232b      	movs	r3, #43	; 0x2b
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	2203      	movs	r2, #3
 80049ca:	701a      	strb	r2, [r3, #0]
        goto error;
 80049cc:	e02a      	b.n	8004a24 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1a2      	bne.n	800491e <HAL_SPI_TransmitReceive+0x252>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d19d      	bne.n	800491e <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 f8c5 	bl	8004b78 <SPI_EndRxTxTransaction>
 80049ee:	1e03      	subs	r3, r0, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80049f2:	232b      	movs	r3, #43	; 0x2b
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a00:	e010      	b.n	8004a24 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	e000      	b.n	8004a24 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8004a22:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2251      	movs	r2, #81	; 0x51
 8004a28:	2101      	movs	r1, #1
 8004a2a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2250      	movs	r2, #80	; 0x50
 8004a30:	2100      	movs	r1, #0
 8004a32:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a34:	232b      	movs	r3, #43	; 0x2b
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	781b      	ldrb	r3, [r3, #0]
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b00c      	add	sp, #48	; 0x30
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2251      	movs	r2, #81	; 0x51
 8004a4e:	5c9b      	ldrb	r3, [r3, r2]
 8004a50:	b2db      	uxtb	r3, r3
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	1dfb      	adds	r3, r7, #7
 8004a6a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a6c:	f7fd fa7e 	bl	8001f6c <HAL_GetTick>
 8004a70:	0002      	movs	r2, r0
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	18d3      	adds	r3, r2, r3
 8004a7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a7c:	f7fd fa76 	bl	8001f6c <HAL_GetTick>
 8004a80:	0003      	movs	r3, r0
 8004a82:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a84:	4b3a      	ldr	r3, [pc, #232]	; (8004b70 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	015b      	lsls	r3, r3, #5
 8004a8a:	0d1b      	lsrs	r3, r3, #20
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	4353      	muls	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a92:	e058      	b.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	d055      	beq.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a9a:	f7fd fa67 	bl	8001f6c <HAL_GetTick>
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d902      	bls.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d142      	bne.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	21e0      	movs	r1, #224	; 0xe0
 8004abc:	438a      	bics	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	2382      	movs	r3, #130	; 0x82
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d113      	bne.n	8004af4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d005      	beq.n	8004ae4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d107      	bne.n	8004af4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2140      	movs	r1, #64	; 0x40
 8004af0:	438a      	bics	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	019b      	lsls	r3, r3, #6
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d110      	bne.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	491a      	ldr	r1, [pc, #104]	; (8004b74 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	0189      	lsls	r1, r1, #6
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2251      	movs	r2, #81	; 0x51
 8004b26:	2101      	movs	r1, #1
 8004b28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2250      	movs	r2, #80	; 0x50
 8004b2e:	2100      	movs	r1, #0
 8004b30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e017      	b.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	425a      	negs	r2, r3
 8004b56:	4153      	adcs	r3, r2
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	1dfb      	adds	r3, r7, #7
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d197      	bne.n	8004a94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	0018      	movs	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b008      	add	sp, #32
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	20000000 	.word	0x20000000
 8004b74:	ffffdfff 	.word	0xffffdfff

08004b78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <SPI_EndRxTxTransaction+0x84>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	491d      	ldr	r1, [pc, #116]	; (8004c00 <SPI_EndRxTxTransaction+0x88>)
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fb face 	bl	800012c <__udivsi3>
 8004b90:	0003      	movs	r3, r0
 8004b92:	001a      	movs	r2, r3
 8004b94:	0013      	movs	r3, r2
 8004b96:	015b      	lsls	r3, r3, #5
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	189b      	adds	r3, r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	2382      	movs	r3, #130	; 0x82
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d112      	bne.n	8004bd4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	0013      	movs	r3, r2
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	f7ff ff4e 	bl	8004a5c <SPI_WaitFlagStateUntilTimeout>
 8004bc0:	1e03      	subs	r3, r0, #0
 8004bc2:	d016      	beq.n	8004bf2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc8:	2220      	movs	r2, #32
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e00f      	b.n	8004bf4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b80      	cmp	r3, #128	; 0x80
 8004bec:	d0f2      	beq.n	8004bd4 <SPI_EndRxTxTransaction+0x5c>
 8004bee:	e000      	b.n	8004bf2 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004bf0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000000 	.word	0x20000000
 8004c00:	016e3600 	.word	0x016e3600

08004c04 <atoi>:
 8004c04:	b510      	push	{r4, lr}
 8004c06:	220a      	movs	r2, #10
 8004c08:	2100      	movs	r1, #0
 8004c0a:	f000 f8eb 	bl	8004de4 <strtol>
 8004c0e:	bd10      	pop	{r4, pc}

08004c10 <__errno>:
 8004c10:	4b01      	ldr	r3, [pc, #4]	; (8004c18 <__errno+0x8>)
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	4770      	bx	lr
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	2000000c 	.word	0x2000000c

08004c1c <__libc_init_array>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	2600      	movs	r6, #0
 8004c20:	4d0c      	ldr	r5, [pc, #48]	; (8004c54 <__libc_init_array+0x38>)
 8004c22:	4c0d      	ldr	r4, [pc, #52]	; (8004c58 <__libc_init_array+0x3c>)
 8004c24:	1b64      	subs	r4, r4, r5
 8004c26:	10a4      	asrs	r4, r4, #2
 8004c28:	42a6      	cmp	r6, r4
 8004c2a:	d109      	bne.n	8004c40 <__libc_init_array+0x24>
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	f000 fce1 	bl	80055f4 <_init>
 8004c32:	4d0a      	ldr	r5, [pc, #40]	; (8004c5c <__libc_init_array+0x40>)
 8004c34:	4c0a      	ldr	r4, [pc, #40]	; (8004c60 <__libc_init_array+0x44>)
 8004c36:	1b64      	subs	r4, r4, r5
 8004c38:	10a4      	asrs	r4, r4, #2
 8004c3a:	42a6      	cmp	r6, r4
 8004c3c:	d105      	bne.n	8004c4a <__libc_init_array+0x2e>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	00b3      	lsls	r3, r6, #2
 8004c42:	58eb      	ldr	r3, [r5, r3]
 8004c44:	4798      	blx	r3
 8004c46:	3601      	adds	r6, #1
 8004c48:	e7ee      	b.n	8004c28 <__libc_init_array+0xc>
 8004c4a:	00b3      	lsls	r3, r6, #2
 8004c4c:	58eb      	ldr	r3, [r5, r3]
 8004c4e:	4798      	blx	r3
 8004c50:	3601      	adds	r6, #1
 8004c52:	e7f2      	b.n	8004c3a <__libc_init_array+0x1e>
 8004c54:	08005888 	.word	0x08005888
 8004c58:	08005888 	.word	0x08005888
 8004c5c:	08005888 	.word	0x08005888
 8004c60:	0800588c 	.word	0x0800588c

08004c64 <memcpy>:
 8004c64:	2300      	movs	r3, #0
 8004c66:	b510      	push	{r4, lr}
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d100      	bne.n	8004c6e <memcpy+0xa>
 8004c6c:	bd10      	pop	{r4, pc}
 8004c6e:	5ccc      	ldrb	r4, [r1, r3]
 8004c70:	54c4      	strb	r4, [r0, r3]
 8004c72:	3301      	adds	r3, #1
 8004c74:	e7f8      	b.n	8004c68 <memcpy+0x4>

08004c76 <memset>:
 8004c76:	0003      	movs	r3, r0
 8004c78:	1882      	adds	r2, r0, r2
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d100      	bne.n	8004c80 <memset+0xa>
 8004c7e:	4770      	bx	lr
 8004c80:	7019      	strb	r1, [r3, #0]
 8004c82:	3301      	adds	r3, #1
 8004c84:	e7f9      	b.n	8004c7a <memset+0x4>
	...

08004c88 <siprintf>:
 8004c88:	b40e      	push	{r1, r2, r3}
 8004c8a:	b500      	push	{lr}
 8004c8c:	490b      	ldr	r1, [pc, #44]	; (8004cbc <siprintf+0x34>)
 8004c8e:	b09c      	sub	sp, #112	; 0x70
 8004c90:	ab1d      	add	r3, sp, #116	; 0x74
 8004c92:	9002      	str	r0, [sp, #8]
 8004c94:	9006      	str	r0, [sp, #24]
 8004c96:	9107      	str	r1, [sp, #28]
 8004c98:	9104      	str	r1, [sp, #16]
 8004c9a:	4809      	ldr	r0, [pc, #36]	; (8004cc0 <siprintf+0x38>)
 8004c9c:	4909      	ldr	r1, [pc, #36]	; (8004cc4 <siprintf+0x3c>)
 8004c9e:	cb04      	ldmia	r3!, {r2}
 8004ca0:	9105      	str	r1, [sp, #20]
 8004ca2:	6800      	ldr	r0, [r0, #0]
 8004ca4:	a902      	add	r1, sp, #8
 8004ca6:	9301      	str	r3, [sp, #4]
 8004ca8:	f000 f90a 	bl	8004ec0 <_svfiprintf_r>
 8004cac:	2300      	movs	r3, #0
 8004cae:	9a02      	ldr	r2, [sp, #8]
 8004cb0:	7013      	strb	r3, [r2, #0]
 8004cb2:	b01c      	add	sp, #112	; 0x70
 8004cb4:	bc08      	pop	{r3}
 8004cb6:	b003      	add	sp, #12
 8004cb8:	4718      	bx	r3
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	7fffffff 	.word	0x7fffffff
 8004cc0:	2000000c 	.word	0x2000000c
 8004cc4:	ffff0208 	.word	0xffff0208

08004cc8 <_strtol_l.isra.0>:
 8004cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	001e      	movs	r6, r3
 8004cce:	9005      	str	r0, [sp, #20]
 8004cd0:	9101      	str	r1, [sp, #4]
 8004cd2:	9202      	str	r2, [sp, #8]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d045      	beq.n	8004d64 <_strtol_l.isra.0+0x9c>
 8004cd8:	0008      	movs	r0, r1
 8004cda:	2b24      	cmp	r3, #36	; 0x24
 8004cdc:	d842      	bhi.n	8004d64 <_strtol_l.isra.0+0x9c>
 8004cde:	4b3f      	ldr	r3, [pc, #252]	; (8004ddc <_strtol_l.isra.0+0x114>)
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	469c      	mov	ip, r3
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	4661      	mov	r1, ip
 8004ce8:	781c      	ldrb	r4, [r3, #0]
 8004cea:	1c45      	adds	r5, r0, #1
 8004cec:	5d09      	ldrb	r1, [r1, r4]
 8004cee:	0028      	movs	r0, r5
 8004cf0:	000f      	movs	r7, r1
 8004cf2:	4017      	ands	r7, r2
 8004cf4:	4211      	tst	r1, r2
 8004cf6:	d1f5      	bne.n	8004ce4 <_strtol_l.isra.0+0x1c>
 8004cf8:	2c2d      	cmp	r4, #45	; 0x2d
 8004cfa:	d13a      	bne.n	8004d72 <_strtol_l.isra.0+0xaa>
 8004cfc:	2701      	movs	r7, #1
 8004cfe:	782c      	ldrb	r4, [r5, #0]
 8004d00:	1c9d      	adds	r5, r3, #2
 8004d02:	2e00      	cmp	r6, #0
 8004d04:	d065      	beq.n	8004dd2 <_strtol_l.isra.0+0x10a>
 8004d06:	2e10      	cmp	r6, #16
 8004d08:	d109      	bne.n	8004d1e <_strtol_l.isra.0+0x56>
 8004d0a:	2c30      	cmp	r4, #48	; 0x30
 8004d0c:	d107      	bne.n	8004d1e <_strtol_l.isra.0+0x56>
 8004d0e:	2220      	movs	r2, #32
 8004d10:	782b      	ldrb	r3, [r5, #0]
 8004d12:	4393      	bics	r3, r2
 8004d14:	2b58      	cmp	r3, #88	; 0x58
 8004d16:	d157      	bne.n	8004dc8 <_strtol_l.isra.0+0x100>
 8004d18:	2610      	movs	r6, #16
 8004d1a:	786c      	ldrb	r4, [r5, #1]
 8004d1c:	3502      	adds	r5, #2
 8004d1e:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <_strtol_l.isra.0+0x118>)
 8004d20:	0031      	movs	r1, r6
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	0018      	movs	r0, r3
 8004d26:	9303      	str	r3, [sp, #12]
 8004d28:	f7fb fa86 	bl	8000238 <__aeabi_uidivmod>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2201      	movs	r2, #1
 8004d30:	4684      	mov	ip, r0
 8004d32:	0018      	movs	r0, r3
 8004d34:	9104      	str	r1, [sp, #16]
 8004d36:	4252      	negs	r2, r2
 8004d38:	0021      	movs	r1, r4
 8004d3a:	3930      	subs	r1, #48	; 0x30
 8004d3c:	2909      	cmp	r1, #9
 8004d3e:	d81d      	bhi.n	8004d7c <_strtol_l.isra.0+0xb4>
 8004d40:	000c      	movs	r4, r1
 8004d42:	42a6      	cmp	r6, r4
 8004d44:	dd28      	ble.n	8004d98 <_strtol_l.isra.0+0xd0>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	db24      	blt.n	8004d94 <_strtol_l.isra.0+0xcc>
 8004d4a:	0013      	movs	r3, r2
 8004d4c:	4584      	cmp	ip, r0
 8004d4e:	d306      	bcc.n	8004d5e <_strtol_l.isra.0+0x96>
 8004d50:	d102      	bne.n	8004d58 <_strtol_l.isra.0+0x90>
 8004d52:	9904      	ldr	r1, [sp, #16]
 8004d54:	42a1      	cmp	r1, r4
 8004d56:	db02      	blt.n	8004d5e <_strtol_l.isra.0+0x96>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4370      	muls	r0, r6
 8004d5c:	1820      	adds	r0, r4, r0
 8004d5e:	782c      	ldrb	r4, [r5, #0]
 8004d60:	3501      	adds	r5, #1
 8004d62:	e7e9      	b.n	8004d38 <_strtol_l.isra.0+0x70>
 8004d64:	f7ff ff54 	bl	8004c10 <__errno>
 8004d68:	2316      	movs	r3, #22
 8004d6a:	6003      	str	r3, [r0, #0]
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	b007      	add	sp, #28
 8004d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d72:	2c2b      	cmp	r4, #43	; 0x2b
 8004d74:	d1c5      	bne.n	8004d02 <_strtol_l.isra.0+0x3a>
 8004d76:	782c      	ldrb	r4, [r5, #0]
 8004d78:	1c9d      	adds	r5, r3, #2
 8004d7a:	e7c2      	b.n	8004d02 <_strtol_l.isra.0+0x3a>
 8004d7c:	0021      	movs	r1, r4
 8004d7e:	3941      	subs	r1, #65	; 0x41
 8004d80:	2919      	cmp	r1, #25
 8004d82:	d801      	bhi.n	8004d88 <_strtol_l.isra.0+0xc0>
 8004d84:	3c37      	subs	r4, #55	; 0x37
 8004d86:	e7dc      	b.n	8004d42 <_strtol_l.isra.0+0x7a>
 8004d88:	0021      	movs	r1, r4
 8004d8a:	3961      	subs	r1, #97	; 0x61
 8004d8c:	2919      	cmp	r1, #25
 8004d8e:	d803      	bhi.n	8004d98 <_strtol_l.isra.0+0xd0>
 8004d90:	3c57      	subs	r4, #87	; 0x57
 8004d92:	e7d6      	b.n	8004d42 <_strtol_l.isra.0+0x7a>
 8004d94:	0013      	movs	r3, r2
 8004d96:	e7e2      	b.n	8004d5e <_strtol_l.isra.0+0x96>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da09      	bge.n	8004db0 <_strtol_l.isra.0+0xe8>
 8004d9c:	2322      	movs	r3, #34	; 0x22
 8004d9e:	9a05      	ldr	r2, [sp, #20]
 8004da0:	9803      	ldr	r0, [sp, #12]
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	9b02      	ldr	r3, [sp, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0e1      	beq.n	8004d6e <_strtol_l.isra.0+0xa6>
 8004daa:	1e6b      	subs	r3, r5, #1
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	e007      	b.n	8004dc0 <_strtol_l.isra.0+0xf8>
 8004db0:	2f00      	cmp	r7, #0
 8004db2:	d000      	beq.n	8004db6 <_strtol_l.isra.0+0xee>
 8004db4:	4240      	negs	r0, r0
 8004db6:	9a02      	ldr	r2, [sp, #8]
 8004db8:	2a00      	cmp	r2, #0
 8004dba:	d0d8      	beq.n	8004d6e <_strtol_l.isra.0+0xa6>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f4      	bne.n	8004daa <_strtol_l.isra.0+0xe2>
 8004dc0:	9b02      	ldr	r3, [sp, #8]
 8004dc2:	9a01      	ldr	r2, [sp, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e7d2      	b.n	8004d6e <_strtol_l.isra.0+0xa6>
 8004dc8:	2430      	movs	r4, #48	; 0x30
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	d1a7      	bne.n	8004d1e <_strtol_l.isra.0+0x56>
 8004dce:	3608      	adds	r6, #8
 8004dd0:	e7a5      	b.n	8004d1e <_strtol_l.isra.0+0x56>
 8004dd2:	2c30      	cmp	r4, #48	; 0x30
 8004dd4:	d09b      	beq.n	8004d0e <_strtol_l.isra.0+0x46>
 8004dd6:	260a      	movs	r6, #10
 8004dd8:	e7a1      	b.n	8004d1e <_strtol_l.isra.0+0x56>
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	0800574a 	.word	0x0800574a
 8004de0:	7fffffff 	.word	0x7fffffff

08004de4 <strtol>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	0013      	movs	r3, r2
 8004de8:	000a      	movs	r2, r1
 8004dea:	0001      	movs	r1, r0
 8004dec:	4802      	ldr	r0, [pc, #8]	; (8004df8 <strtol+0x14>)
 8004dee:	6800      	ldr	r0, [r0, #0]
 8004df0:	f7ff ff6a 	bl	8004cc8 <_strtol_l.isra.0>
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	2000000c 	.word	0x2000000c

08004dfc <__ssputs_r>:
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	688e      	ldr	r6, [r1, #8]
 8004e00:	b085      	sub	sp, #20
 8004e02:	0007      	movs	r7, r0
 8004e04:	000c      	movs	r4, r1
 8004e06:	9203      	str	r2, [sp, #12]
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	429e      	cmp	r6, r3
 8004e0c:	d83c      	bhi.n	8004e88 <__ssputs_r+0x8c>
 8004e0e:	2390      	movs	r3, #144	; 0x90
 8004e10:	898a      	ldrh	r2, [r1, #12]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	421a      	tst	r2, r3
 8004e16:	d034      	beq.n	8004e82 <__ssputs_r+0x86>
 8004e18:	2503      	movs	r5, #3
 8004e1a:	6909      	ldr	r1, [r1, #16]
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	1a5b      	subs	r3, r3, r1
 8004e20:	9302      	str	r3, [sp, #8]
 8004e22:	6963      	ldr	r3, [r4, #20]
 8004e24:	9802      	ldr	r0, [sp, #8]
 8004e26:	435d      	muls	r5, r3
 8004e28:	0feb      	lsrs	r3, r5, #31
 8004e2a:	195d      	adds	r5, r3, r5
 8004e2c:	9b01      	ldr	r3, [sp, #4]
 8004e2e:	106d      	asrs	r5, r5, #1
 8004e30:	3301      	adds	r3, #1
 8004e32:	181b      	adds	r3, r3, r0
 8004e34:	42ab      	cmp	r3, r5
 8004e36:	d900      	bls.n	8004e3a <__ssputs_r+0x3e>
 8004e38:	001d      	movs	r5, r3
 8004e3a:	0553      	lsls	r3, r2, #21
 8004e3c:	d532      	bpl.n	8004ea4 <__ssputs_r+0xa8>
 8004e3e:	0029      	movs	r1, r5
 8004e40:	0038      	movs	r0, r7
 8004e42:	f000 fb27 	bl	8005494 <_malloc_r>
 8004e46:	1e06      	subs	r6, r0, #0
 8004e48:	d109      	bne.n	8004e5e <__ssputs_r+0x62>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	2340      	movs	r3, #64	; 0x40
 8004e50:	2001      	movs	r0, #1
 8004e52:	89a2      	ldrh	r2, [r4, #12]
 8004e54:	4240      	negs	r0, r0
 8004e56:	4313      	orrs	r3, r2
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	b005      	add	sp, #20
 8004e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e5e:	9a02      	ldr	r2, [sp, #8]
 8004e60:	6921      	ldr	r1, [r4, #16]
 8004e62:	f7ff feff 	bl	8004c64 <memcpy>
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <__ssputs_r+0xc0>)
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	9b02      	ldr	r3, [sp, #8]
 8004e74:	6126      	str	r6, [r4, #16]
 8004e76:	18f6      	adds	r6, r6, r3
 8004e78:	6026      	str	r6, [r4, #0]
 8004e7a:	6165      	str	r5, [r4, #20]
 8004e7c:	9e01      	ldr	r6, [sp, #4]
 8004e7e:	1aed      	subs	r5, r5, r3
 8004e80:	60a5      	str	r5, [r4, #8]
 8004e82:	9b01      	ldr	r3, [sp, #4]
 8004e84:	429e      	cmp	r6, r3
 8004e86:	d900      	bls.n	8004e8a <__ssputs_r+0x8e>
 8004e88:	9e01      	ldr	r6, [sp, #4]
 8004e8a:	0032      	movs	r2, r6
 8004e8c:	9903      	ldr	r1, [sp, #12]
 8004e8e:	6820      	ldr	r0, [r4, #0]
 8004e90:	f000 faa3 	bl	80053da <memmove>
 8004e94:	68a3      	ldr	r3, [r4, #8]
 8004e96:	2000      	movs	r0, #0
 8004e98:	1b9b      	subs	r3, r3, r6
 8004e9a:	60a3      	str	r3, [r4, #8]
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	199e      	adds	r6, r3, r6
 8004ea0:	6026      	str	r6, [r4, #0]
 8004ea2:	e7da      	b.n	8004e5a <__ssputs_r+0x5e>
 8004ea4:	002a      	movs	r2, r5
 8004ea6:	0038      	movs	r0, r7
 8004ea8:	f000 fb52 	bl	8005550 <_realloc_r>
 8004eac:	1e06      	subs	r6, r0, #0
 8004eae:	d1e0      	bne.n	8004e72 <__ssputs_r+0x76>
 8004eb0:	0038      	movs	r0, r7
 8004eb2:	6921      	ldr	r1, [r4, #16]
 8004eb4:	f000 faa4 	bl	8005400 <_free_r>
 8004eb8:	e7c7      	b.n	8004e4a <__ssputs_r+0x4e>
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	fffffb7f 	.word	0xfffffb7f

08004ec0 <_svfiprintf_r>:
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	b0a1      	sub	sp, #132	; 0x84
 8004ec4:	9003      	str	r0, [sp, #12]
 8004ec6:	001d      	movs	r5, r3
 8004ec8:	898b      	ldrh	r3, [r1, #12]
 8004eca:	000f      	movs	r7, r1
 8004ecc:	0016      	movs	r6, r2
 8004ece:	061b      	lsls	r3, r3, #24
 8004ed0:	d511      	bpl.n	8004ef6 <_svfiprintf_r+0x36>
 8004ed2:	690b      	ldr	r3, [r1, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10e      	bne.n	8004ef6 <_svfiprintf_r+0x36>
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	f000 fadb 	bl	8005494 <_malloc_r>
 8004ede:	6038      	str	r0, [r7, #0]
 8004ee0:	6138      	str	r0, [r7, #16]
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d105      	bne.n	8004ef2 <_svfiprintf_r+0x32>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	9a03      	ldr	r2, [sp, #12]
 8004eea:	3801      	subs	r0, #1
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	b021      	add	sp, #132	; 0x84
 8004ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef2:	2340      	movs	r3, #64	; 0x40
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	ac08      	add	r4, sp, #32
 8004efa:	6163      	str	r3, [r4, #20]
 8004efc:	3320      	adds	r3, #32
 8004efe:	7663      	strb	r3, [r4, #25]
 8004f00:	3310      	adds	r3, #16
 8004f02:	76a3      	strb	r3, [r4, #26]
 8004f04:	9507      	str	r5, [sp, #28]
 8004f06:	0035      	movs	r5, r6
 8004f08:	782b      	ldrb	r3, [r5, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <_svfiprintf_r+0x52>
 8004f0e:	2b25      	cmp	r3, #37	; 0x25
 8004f10:	d147      	bne.n	8004fa2 <_svfiprintf_r+0xe2>
 8004f12:	1bab      	subs	r3, r5, r6
 8004f14:	9305      	str	r3, [sp, #20]
 8004f16:	42b5      	cmp	r5, r6
 8004f18:	d00c      	beq.n	8004f34 <_svfiprintf_r+0x74>
 8004f1a:	0032      	movs	r2, r6
 8004f1c:	0039      	movs	r1, r7
 8004f1e:	9803      	ldr	r0, [sp, #12]
 8004f20:	f7ff ff6c 	bl	8004dfc <__ssputs_r>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d100      	bne.n	8004f2a <_svfiprintf_r+0x6a>
 8004f28:	e0ae      	b.n	8005088 <_svfiprintf_r+0x1c8>
 8004f2a:	6962      	ldr	r2, [r4, #20]
 8004f2c:	9b05      	ldr	r3, [sp, #20]
 8004f2e:	4694      	mov	ip, r2
 8004f30:	4463      	add	r3, ip
 8004f32:	6163      	str	r3, [r4, #20]
 8004f34:	782b      	ldrb	r3, [r5, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d100      	bne.n	8004f3c <_svfiprintf_r+0x7c>
 8004f3a:	e0a5      	b.n	8005088 <_svfiprintf_r+0x1c8>
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	2300      	movs	r3, #0
 8004f40:	4252      	negs	r2, r2
 8004f42:	6062      	str	r2, [r4, #4]
 8004f44:	a904      	add	r1, sp, #16
 8004f46:	3254      	adds	r2, #84	; 0x54
 8004f48:	1852      	adds	r2, r2, r1
 8004f4a:	1c6e      	adds	r6, r5, #1
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	60e3      	str	r3, [r4, #12]
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	7013      	strb	r3, [r2, #0]
 8004f54:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f56:	2205      	movs	r2, #5
 8004f58:	7831      	ldrb	r1, [r6, #0]
 8004f5a:	4854      	ldr	r0, [pc, #336]	; (80050ac <_svfiprintf_r+0x1ec>)
 8004f5c:	f000 fa32 	bl	80053c4 <memchr>
 8004f60:	1c75      	adds	r5, r6, #1
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d11f      	bne.n	8004fa6 <_svfiprintf_r+0xe6>
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	06d3      	lsls	r3, r2, #27
 8004f6a:	d504      	bpl.n	8004f76 <_svfiprintf_r+0xb6>
 8004f6c:	2353      	movs	r3, #83	; 0x53
 8004f6e:	a904      	add	r1, sp, #16
 8004f70:	185b      	adds	r3, r3, r1
 8004f72:	2120      	movs	r1, #32
 8004f74:	7019      	strb	r1, [r3, #0]
 8004f76:	0713      	lsls	r3, r2, #28
 8004f78:	d504      	bpl.n	8004f84 <_svfiprintf_r+0xc4>
 8004f7a:	2353      	movs	r3, #83	; 0x53
 8004f7c:	a904      	add	r1, sp, #16
 8004f7e:	185b      	adds	r3, r3, r1
 8004f80:	212b      	movs	r1, #43	; 0x2b
 8004f82:	7019      	strb	r1, [r3, #0]
 8004f84:	7833      	ldrb	r3, [r6, #0]
 8004f86:	2b2a      	cmp	r3, #42	; 0x2a
 8004f88:	d016      	beq.n	8004fb8 <_svfiprintf_r+0xf8>
 8004f8a:	0035      	movs	r5, r6
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	200a      	movs	r0, #10
 8004f90:	68e3      	ldr	r3, [r4, #12]
 8004f92:	782a      	ldrb	r2, [r5, #0]
 8004f94:	1c6e      	adds	r6, r5, #1
 8004f96:	3a30      	subs	r2, #48	; 0x30
 8004f98:	2a09      	cmp	r2, #9
 8004f9a:	d94e      	bls.n	800503a <_svfiprintf_r+0x17a>
 8004f9c:	2900      	cmp	r1, #0
 8004f9e:	d111      	bne.n	8004fc4 <_svfiprintf_r+0x104>
 8004fa0:	e017      	b.n	8004fd2 <_svfiprintf_r+0x112>
 8004fa2:	3501      	adds	r5, #1
 8004fa4:	e7b0      	b.n	8004f08 <_svfiprintf_r+0x48>
 8004fa6:	4b41      	ldr	r3, [pc, #260]	; (80050ac <_svfiprintf_r+0x1ec>)
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	1ac0      	subs	r0, r0, r3
 8004fac:	2301      	movs	r3, #1
 8004fae:	4083      	lsls	r3, r0
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	002e      	movs	r6, r5
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	e7ce      	b.n	8004f56 <_svfiprintf_r+0x96>
 8004fb8:	9b07      	ldr	r3, [sp, #28]
 8004fba:	1d19      	adds	r1, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	9107      	str	r1, [sp, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	db01      	blt.n	8004fc8 <_svfiprintf_r+0x108>
 8004fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fc6:	e004      	b.n	8004fd2 <_svfiprintf_r+0x112>
 8004fc8:	425b      	negs	r3, r3
 8004fca:	60e3      	str	r3, [r4, #12]
 8004fcc:	2302      	movs	r3, #2
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	782b      	ldrb	r3, [r5, #0]
 8004fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fd6:	d10a      	bne.n	8004fee <_svfiprintf_r+0x12e>
 8004fd8:	786b      	ldrb	r3, [r5, #1]
 8004fda:	2b2a      	cmp	r3, #42	; 0x2a
 8004fdc:	d135      	bne.n	800504a <_svfiprintf_r+0x18a>
 8004fde:	9b07      	ldr	r3, [sp, #28]
 8004fe0:	3502      	adds	r5, #2
 8004fe2:	1d1a      	adds	r2, r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	9207      	str	r2, [sp, #28]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db2b      	blt.n	8005044 <_svfiprintf_r+0x184>
 8004fec:	9309      	str	r3, [sp, #36]	; 0x24
 8004fee:	4e30      	ldr	r6, [pc, #192]	; (80050b0 <_svfiprintf_r+0x1f0>)
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	0030      	movs	r0, r6
 8004ff4:	7829      	ldrb	r1, [r5, #0]
 8004ff6:	f000 f9e5 	bl	80053c4 <memchr>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d006      	beq.n	800500c <_svfiprintf_r+0x14c>
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	1b80      	subs	r0, r0, r6
 8005002:	4083      	lsls	r3, r0
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	3501      	adds	r5, #1
 8005008:	4313      	orrs	r3, r2
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	7829      	ldrb	r1, [r5, #0]
 800500e:	2206      	movs	r2, #6
 8005010:	4828      	ldr	r0, [pc, #160]	; (80050b4 <_svfiprintf_r+0x1f4>)
 8005012:	1c6e      	adds	r6, r5, #1
 8005014:	7621      	strb	r1, [r4, #24]
 8005016:	f000 f9d5 	bl	80053c4 <memchr>
 800501a:	2800      	cmp	r0, #0
 800501c:	d03c      	beq.n	8005098 <_svfiprintf_r+0x1d8>
 800501e:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <_svfiprintf_r+0x1f8>)
 8005020:	2b00      	cmp	r3, #0
 8005022:	d125      	bne.n	8005070 <_svfiprintf_r+0x1b0>
 8005024:	2207      	movs	r2, #7
 8005026:	9b07      	ldr	r3, [sp, #28]
 8005028:	3307      	adds	r3, #7
 800502a:	4393      	bics	r3, r2
 800502c:	3308      	adds	r3, #8
 800502e:	9307      	str	r3, [sp, #28]
 8005030:	6963      	ldr	r3, [r4, #20]
 8005032:	9a04      	ldr	r2, [sp, #16]
 8005034:	189b      	adds	r3, r3, r2
 8005036:	6163      	str	r3, [r4, #20]
 8005038:	e765      	b.n	8004f06 <_svfiprintf_r+0x46>
 800503a:	4343      	muls	r3, r0
 800503c:	0035      	movs	r5, r6
 800503e:	2101      	movs	r1, #1
 8005040:	189b      	adds	r3, r3, r2
 8005042:	e7a6      	b.n	8004f92 <_svfiprintf_r+0xd2>
 8005044:	2301      	movs	r3, #1
 8005046:	425b      	negs	r3, r3
 8005048:	e7d0      	b.n	8004fec <_svfiprintf_r+0x12c>
 800504a:	2300      	movs	r3, #0
 800504c:	200a      	movs	r0, #10
 800504e:	001a      	movs	r2, r3
 8005050:	3501      	adds	r5, #1
 8005052:	6063      	str	r3, [r4, #4]
 8005054:	7829      	ldrb	r1, [r5, #0]
 8005056:	1c6e      	adds	r6, r5, #1
 8005058:	3930      	subs	r1, #48	; 0x30
 800505a:	2909      	cmp	r1, #9
 800505c:	d903      	bls.n	8005066 <_svfiprintf_r+0x1a6>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0c5      	beq.n	8004fee <_svfiprintf_r+0x12e>
 8005062:	9209      	str	r2, [sp, #36]	; 0x24
 8005064:	e7c3      	b.n	8004fee <_svfiprintf_r+0x12e>
 8005066:	4342      	muls	r2, r0
 8005068:	0035      	movs	r5, r6
 800506a:	2301      	movs	r3, #1
 800506c:	1852      	adds	r2, r2, r1
 800506e:	e7f1      	b.n	8005054 <_svfiprintf_r+0x194>
 8005070:	ab07      	add	r3, sp, #28
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	003a      	movs	r2, r7
 8005076:	0021      	movs	r1, r4
 8005078:	4b10      	ldr	r3, [pc, #64]	; (80050bc <_svfiprintf_r+0x1fc>)
 800507a:	9803      	ldr	r0, [sp, #12]
 800507c:	e000      	b.n	8005080 <_svfiprintf_r+0x1c0>
 800507e:	bf00      	nop
 8005080:	9004      	str	r0, [sp, #16]
 8005082:	9b04      	ldr	r3, [sp, #16]
 8005084:	3301      	adds	r3, #1
 8005086:	d1d3      	bne.n	8005030 <_svfiprintf_r+0x170>
 8005088:	89bb      	ldrh	r3, [r7, #12]
 800508a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800508c:	065b      	lsls	r3, r3, #25
 800508e:	d400      	bmi.n	8005092 <_svfiprintf_r+0x1d2>
 8005090:	e72d      	b.n	8004eee <_svfiprintf_r+0x2e>
 8005092:	2001      	movs	r0, #1
 8005094:	4240      	negs	r0, r0
 8005096:	e72a      	b.n	8004eee <_svfiprintf_r+0x2e>
 8005098:	ab07      	add	r3, sp, #28
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	003a      	movs	r2, r7
 800509e:	0021      	movs	r1, r4
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <_svfiprintf_r+0x1fc>)
 80050a2:	9803      	ldr	r0, [sp, #12]
 80050a4:	f000 f87c 	bl	80051a0 <_printf_i>
 80050a8:	e7ea      	b.n	8005080 <_svfiprintf_r+0x1c0>
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	0800584a 	.word	0x0800584a
 80050b0:	08005850 	.word	0x08005850
 80050b4:	08005854 	.word	0x08005854
 80050b8:	00000000 	.word	0x00000000
 80050bc:	08004dfd 	.word	0x08004dfd

080050c0 <_printf_common>:
 80050c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050c2:	0015      	movs	r5, r2
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	688a      	ldr	r2, [r1, #8]
 80050c8:	690b      	ldr	r3, [r1, #16]
 80050ca:	000c      	movs	r4, r1
 80050cc:	9000      	str	r0, [sp, #0]
 80050ce:	4293      	cmp	r3, r2
 80050d0:	da00      	bge.n	80050d4 <_printf_common+0x14>
 80050d2:	0013      	movs	r3, r2
 80050d4:	0022      	movs	r2, r4
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	3243      	adds	r2, #67	; 0x43
 80050da:	7812      	ldrb	r2, [r2, #0]
 80050dc:	2a00      	cmp	r2, #0
 80050de:	d001      	beq.n	80050e4 <_printf_common+0x24>
 80050e0:	3301      	adds	r3, #1
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	069b      	lsls	r3, r3, #26
 80050e8:	d502      	bpl.n	80050f0 <_printf_common+0x30>
 80050ea:	682b      	ldr	r3, [r5, #0]
 80050ec:	3302      	adds	r3, #2
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	6822      	ldr	r2, [r4, #0]
 80050f2:	2306      	movs	r3, #6
 80050f4:	0017      	movs	r7, r2
 80050f6:	401f      	ands	r7, r3
 80050f8:	421a      	tst	r2, r3
 80050fa:	d027      	beq.n	800514c <_printf_common+0x8c>
 80050fc:	0023      	movs	r3, r4
 80050fe:	3343      	adds	r3, #67	; 0x43
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	1e5a      	subs	r2, r3, #1
 8005104:	4193      	sbcs	r3, r2
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	0692      	lsls	r2, r2, #26
 800510a:	d430      	bmi.n	800516e <_printf_common+0xae>
 800510c:	0022      	movs	r2, r4
 800510e:	9901      	ldr	r1, [sp, #4]
 8005110:	9800      	ldr	r0, [sp, #0]
 8005112:	9e08      	ldr	r6, [sp, #32]
 8005114:	3243      	adds	r2, #67	; 0x43
 8005116:	47b0      	blx	r6
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d025      	beq.n	8005168 <_printf_common+0xa8>
 800511c:	2306      	movs	r3, #6
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	682a      	ldr	r2, [r5, #0]
 8005122:	68e1      	ldr	r1, [r4, #12]
 8005124:	2500      	movs	r5, #0
 8005126:	4003      	ands	r3, r0
 8005128:	2b04      	cmp	r3, #4
 800512a:	d103      	bne.n	8005134 <_printf_common+0x74>
 800512c:	1a8d      	subs	r5, r1, r2
 800512e:	43eb      	mvns	r3, r5
 8005130:	17db      	asrs	r3, r3, #31
 8005132:	401d      	ands	r5, r3
 8005134:	68a3      	ldr	r3, [r4, #8]
 8005136:	6922      	ldr	r2, [r4, #16]
 8005138:	4293      	cmp	r3, r2
 800513a:	dd01      	ble.n	8005140 <_printf_common+0x80>
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	18ed      	adds	r5, r5, r3
 8005140:	2700      	movs	r7, #0
 8005142:	42bd      	cmp	r5, r7
 8005144:	d120      	bne.n	8005188 <_printf_common+0xc8>
 8005146:	2000      	movs	r0, #0
 8005148:	e010      	b.n	800516c <_printf_common+0xac>
 800514a:	3701      	adds	r7, #1
 800514c:	68e3      	ldr	r3, [r4, #12]
 800514e:	682a      	ldr	r2, [r5, #0]
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	42bb      	cmp	r3, r7
 8005154:	ddd2      	ble.n	80050fc <_printf_common+0x3c>
 8005156:	0022      	movs	r2, r4
 8005158:	2301      	movs	r3, #1
 800515a:	9901      	ldr	r1, [sp, #4]
 800515c:	9800      	ldr	r0, [sp, #0]
 800515e:	9e08      	ldr	r6, [sp, #32]
 8005160:	3219      	adds	r2, #25
 8005162:	47b0      	blx	r6
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d1f0      	bne.n	800514a <_printf_common+0x8a>
 8005168:	2001      	movs	r0, #1
 800516a:	4240      	negs	r0, r0
 800516c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800516e:	2030      	movs	r0, #48	; 0x30
 8005170:	18e1      	adds	r1, r4, r3
 8005172:	3143      	adds	r1, #67	; 0x43
 8005174:	7008      	strb	r0, [r1, #0]
 8005176:	0021      	movs	r1, r4
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	3145      	adds	r1, #69	; 0x45
 800517c:	7809      	ldrb	r1, [r1, #0]
 800517e:	18a2      	adds	r2, r4, r2
 8005180:	3243      	adds	r2, #67	; 0x43
 8005182:	3302      	adds	r3, #2
 8005184:	7011      	strb	r1, [r2, #0]
 8005186:	e7c1      	b.n	800510c <_printf_common+0x4c>
 8005188:	0022      	movs	r2, r4
 800518a:	2301      	movs	r3, #1
 800518c:	9901      	ldr	r1, [sp, #4]
 800518e:	9800      	ldr	r0, [sp, #0]
 8005190:	9e08      	ldr	r6, [sp, #32]
 8005192:	321a      	adds	r2, #26
 8005194:	47b0      	blx	r6
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	d0e6      	beq.n	8005168 <_printf_common+0xa8>
 800519a:	3701      	adds	r7, #1
 800519c:	e7d1      	b.n	8005142 <_printf_common+0x82>
	...

080051a0 <_printf_i>:
 80051a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a2:	b08b      	sub	sp, #44	; 0x2c
 80051a4:	9206      	str	r2, [sp, #24]
 80051a6:	000a      	movs	r2, r1
 80051a8:	3243      	adds	r2, #67	; 0x43
 80051aa:	9307      	str	r3, [sp, #28]
 80051ac:	9005      	str	r0, [sp, #20]
 80051ae:	9204      	str	r2, [sp, #16]
 80051b0:	7e0a      	ldrb	r2, [r1, #24]
 80051b2:	000c      	movs	r4, r1
 80051b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051b6:	2a78      	cmp	r2, #120	; 0x78
 80051b8:	d806      	bhi.n	80051c8 <_printf_i+0x28>
 80051ba:	2a62      	cmp	r2, #98	; 0x62
 80051bc:	d808      	bhi.n	80051d0 <_printf_i+0x30>
 80051be:	2a00      	cmp	r2, #0
 80051c0:	d100      	bne.n	80051c4 <_printf_i+0x24>
 80051c2:	e0c0      	b.n	8005346 <_printf_i+0x1a6>
 80051c4:	2a58      	cmp	r2, #88	; 0x58
 80051c6:	d052      	beq.n	800526e <_printf_i+0xce>
 80051c8:	0026      	movs	r6, r4
 80051ca:	3642      	adds	r6, #66	; 0x42
 80051cc:	7032      	strb	r2, [r6, #0]
 80051ce:	e022      	b.n	8005216 <_printf_i+0x76>
 80051d0:	0010      	movs	r0, r2
 80051d2:	3863      	subs	r0, #99	; 0x63
 80051d4:	2815      	cmp	r0, #21
 80051d6:	d8f7      	bhi.n	80051c8 <_printf_i+0x28>
 80051d8:	f7fa ff9e 	bl	8000118 <__gnu_thumb1_case_shi>
 80051dc:	001f0016 	.word	0x001f0016
 80051e0:	fff6fff6 	.word	0xfff6fff6
 80051e4:	fff6fff6 	.word	0xfff6fff6
 80051e8:	fff6001f 	.word	0xfff6001f
 80051ec:	fff6fff6 	.word	0xfff6fff6
 80051f0:	00a8fff6 	.word	0x00a8fff6
 80051f4:	009a0036 	.word	0x009a0036
 80051f8:	fff6fff6 	.word	0xfff6fff6
 80051fc:	fff600b9 	.word	0xfff600b9
 8005200:	fff60036 	.word	0xfff60036
 8005204:	009efff6 	.word	0x009efff6
 8005208:	0026      	movs	r6, r4
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	3642      	adds	r6, #66	; 0x42
 800520e:	1d11      	adds	r1, r2, #4
 8005210:	6019      	str	r1, [r3, #0]
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	7033      	strb	r3, [r6, #0]
 8005216:	2301      	movs	r3, #1
 8005218:	e0a7      	b.n	800536a <_printf_i+0x1ca>
 800521a:	6808      	ldr	r0, [r1, #0]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	1d0a      	adds	r2, r1, #4
 8005220:	0605      	lsls	r5, r0, #24
 8005222:	d50b      	bpl.n	800523c <_printf_i+0x9c>
 8005224:	680d      	ldr	r5, [r1, #0]
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	2d00      	cmp	r5, #0
 800522a:	da03      	bge.n	8005234 <_printf_i+0x94>
 800522c:	232d      	movs	r3, #45	; 0x2d
 800522e:	9a04      	ldr	r2, [sp, #16]
 8005230:	426d      	negs	r5, r5
 8005232:	7013      	strb	r3, [r2, #0]
 8005234:	4b61      	ldr	r3, [pc, #388]	; (80053bc <_printf_i+0x21c>)
 8005236:	270a      	movs	r7, #10
 8005238:	9303      	str	r3, [sp, #12]
 800523a:	e032      	b.n	80052a2 <_printf_i+0x102>
 800523c:	680d      	ldr	r5, [r1, #0]
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	0641      	lsls	r1, r0, #25
 8005242:	d5f1      	bpl.n	8005228 <_printf_i+0x88>
 8005244:	b22d      	sxth	r5, r5
 8005246:	e7ef      	b.n	8005228 <_printf_i+0x88>
 8005248:	680d      	ldr	r5, [r1, #0]
 800524a:	6819      	ldr	r1, [r3, #0]
 800524c:	1d08      	adds	r0, r1, #4
 800524e:	6018      	str	r0, [r3, #0]
 8005250:	062e      	lsls	r6, r5, #24
 8005252:	d501      	bpl.n	8005258 <_printf_i+0xb8>
 8005254:	680d      	ldr	r5, [r1, #0]
 8005256:	e003      	b.n	8005260 <_printf_i+0xc0>
 8005258:	066d      	lsls	r5, r5, #25
 800525a:	d5fb      	bpl.n	8005254 <_printf_i+0xb4>
 800525c:	680d      	ldr	r5, [r1, #0]
 800525e:	b2ad      	uxth	r5, r5
 8005260:	4b56      	ldr	r3, [pc, #344]	; (80053bc <_printf_i+0x21c>)
 8005262:	270a      	movs	r7, #10
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	2a6f      	cmp	r2, #111	; 0x6f
 8005268:	d117      	bne.n	800529a <_printf_i+0xfa>
 800526a:	2708      	movs	r7, #8
 800526c:	e015      	b.n	800529a <_printf_i+0xfa>
 800526e:	3145      	adds	r1, #69	; 0x45
 8005270:	700a      	strb	r2, [r1, #0]
 8005272:	4a52      	ldr	r2, [pc, #328]	; (80053bc <_printf_i+0x21c>)
 8005274:	9203      	str	r2, [sp, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	6821      	ldr	r1, [r4, #0]
 800527a:	ca20      	ldmia	r2!, {r5}
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	0608      	lsls	r0, r1, #24
 8005280:	d550      	bpl.n	8005324 <_printf_i+0x184>
 8005282:	07cb      	lsls	r3, r1, #31
 8005284:	d502      	bpl.n	800528c <_printf_i+0xec>
 8005286:	2320      	movs	r3, #32
 8005288:	4319      	orrs	r1, r3
 800528a:	6021      	str	r1, [r4, #0]
 800528c:	2710      	movs	r7, #16
 800528e:	2d00      	cmp	r5, #0
 8005290:	d103      	bne.n	800529a <_printf_i+0xfa>
 8005292:	2320      	movs	r3, #32
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	439a      	bics	r2, r3
 8005298:	6022      	str	r2, [r4, #0]
 800529a:	0023      	movs	r3, r4
 800529c:	2200      	movs	r2, #0
 800529e:	3343      	adds	r3, #67	; 0x43
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	6863      	ldr	r3, [r4, #4]
 80052a4:	60a3      	str	r3, [r4, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	db03      	blt.n	80052b2 <_printf_i+0x112>
 80052aa:	2204      	movs	r2, #4
 80052ac:	6821      	ldr	r1, [r4, #0]
 80052ae:	4391      	bics	r1, r2
 80052b0:	6021      	str	r1, [r4, #0]
 80052b2:	2d00      	cmp	r5, #0
 80052b4:	d102      	bne.n	80052bc <_printf_i+0x11c>
 80052b6:	9e04      	ldr	r6, [sp, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00c      	beq.n	80052d6 <_printf_i+0x136>
 80052bc:	9e04      	ldr	r6, [sp, #16]
 80052be:	0028      	movs	r0, r5
 80052c0:	0039      	movs	r1, r7
 80052c2:	f7fa ffb9 	bl	8000238 <__aeabi_uidivmod>
 80052c6:	9b03      	ldr	r3, [sp, #12]
 80052c8:	3e01      	subs	r6, #1
 80052ca:	5c5b      	ldrb	r3, [r3, r1]
 80052cc:	7033      	strb	r3, [r6, #0]
 80052ce:	002b      	movs	r3, r5
 80052d0:	0005      	movs	r5, r0
 80052d2:	429f      	cmp	r7, r3
 80052d4:	d9f3      	bls.n	80052be <_printf_i+0x11e>
 80052d6:	2f08      	cmp	r7, #8
 80052d8:	d109      	bne.n	80052ee <_printf_i+0x14e>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	07db      	lsls	r3, r3, #31
 80052de:	d506      	bpl.n	80052ee <_printf_i+0x14e>
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	6922      	ldr	r2, [r4, #16]
 80052e4:	4293      	cmp	r3, r2
 80052e6:	dc02      	bgt.n	80052ee <_printf_i+0x14e>
 80052e8:	2330      	movs	r3, #48	; 0x30
 80052ea:	3e01      	subs	r6, #1
 80052ec:	7033      	strb	r3, [r6, #0]
 80052ee:	9b04      	ldr	r3, [sp, #16]
 80052f0:	1b9b      	subs	r3, r3, r6
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	9b07      	ldr	r3, [sp, #28]
 80052f6:	0021      	movs	r1, r4
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	9805      	ldr	r0, [sp, #20]
 80052fc:	9b06      	ldr	r3, [sp, #24]
 80052fe:	aa09      	add	r2, sp, #36	; 0x24
 8005300:	f7ff fede 	bl	80050c0 <_printf_common>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d135      	bne.n	8005374 <_printf_i+0x1d4>
 8005308:	2001      	movs	r0, #1
 800530a:	4240      	negs	r0, r0
 800530c:	b00b      	add	sp, #44	; 0x2c
 800530e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005310:	2220      	movs	r2, #32
 8005312:	6809      	ldr	r1, [r1, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	6022      	str	r2, [r4, #0]
 8005318:	0022      	movs	r2, r4
 800531a:	2178      	movs	r1, #120	; 0x78
 800531c:	3245      	adds	r2, #69	; 0x45
 800531e:	7011      	strb	r1, [r2, #0]
 8005320:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <_printf_i+0x220>)
 8005322:	e7a7      	b.n	8005274 <_printf_i+0xd4>
 8005324:	0648      	lsls	r0, r1, #25
 8005326:	d5ac      	bpl.n	8005282 <_printf_i+0xe2>
 8005328:	b2ad      	uxth	r5, r5
 800532a:	e7aa      	b.n	8005282 <_printf_i+0xe2>
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	680d      	ldr	r5, [r1, #0]
 8005330:	1d10      	adds	r0, r2, #4
 8005332:	6949      	ldr	r1, [r1, #20]
 8005334:	6018      	str	r0, [r3, #0]
 8005336:	6813      	ldr	r3, [r2, #0]
 8005338:	062e      	lsls	r6, r5, #24
 800533a:	d501      	bpl.n	8005340 <_printf_i+0x1a0>
 800533c:	6019      	str	r1, [r3, #0]
 800533e:	e002      	b.n	8005346 <_printf_i+0x1a6>
 8005340:	066d      	lsls	r5, r5, #25
 8005342:	d5fb      	bpl.n	800533c <_printf_i+0x19c>
 8005344:	8019      	strh	r1, [r3, #0]
 8005346:	2300      	movs	r3, #0
 8005348:	9e04      	ldr	r6, [sp, #16]
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	e7d2      	b.n	80052f4 <_printf_i+0x154>
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	1d11      	adds	r1, r2, #4
 8005352:	6019      	str	r1, [r3, #0]
 8005354:	6816      	ldr	r6, [r2, #0]
 8005356:	2100      	movs	r1, #0
 8005358:	0030      	movs	r0, r6
 800535a:	6862      	ldr	r2, [r4, #4]
 800535c:	f000 f832 	bl	80053c4 <memchr>
 8005360:	2800      	cmp	r0, #0
 8005362:	d001      	beq.n	8005368 <_printf_i+0x1c8>
 8005364:	1b80      	subs	r0, r0, r6
 8005366:	6060      	str	r0, [r4, #4]
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	6123      	str	r3, [r4, #16]
 800536c:	2300      	movs	r3, #0
 800536e:	9a04      	ldr	r2, [sp, #16]
 8005370:	7013      	strb	r3, [r2, #0]
 8005372:	e7bf      	b.n	80052f4 <_printf_i+0x154>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	0032      	movs	r2, r6
 8005378:	9906      	ldr	r1, [sp, #24]
 800537a:	9805      	ldr	r0, [sp, #20]
 800537c:	9d07      	ldr	r5, [sp, #28]
 800537e:	47a8      	blx	r5
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d0c1      	beq.n	8005308 <_printf_i+0x168>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	079b      	lsls	r3, r3, #30
 8005388:	d415      	bmi.n	80053b6 <_printf_i+0x216>
 800538a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800538c:	68e0      	ldr	r0, [r4, #12]
 800538e:	4298      	cmp	r0, r3
 8005390:	dabc      	bge.n	800530c <_printf_i+0x16c>
 8005392:	0018      	movs	r0, r3
 8005394:	e7ba      	b.n	800530c <_printf_i+0x16c>
 8005396:	0022      	movs	r2, r4
 8005398:	2301      	movs	r3, #1
 800539a:	9906      	ldr	r1, [sp, #24]
 800539c:	9805      	ldr	r0, [sp, #20]
 800539e:	9e07      	ldr	r6, [sp, #28]
 80053a0:	3219      	adds	r2, #25
 80053a2:	47b0      	blx	r6
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d0af      	beq.n	8005308 <_printf_i+0x168>
 80053a8:	3501      	adds	r5, #1
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	42ab      	cmp	r3, r5
 80053b2:	dcf0      	bgt.n	8005396 <_printf_i+0x1f6>
 80053b4:	e7e9      	b.n	800538a <_printf_i+0x1ea>
 80053b6:	2500      	movs	r5, #0
 80053b8:	e7f7      	b.n	80053aa <_printf_i+0x20a>
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	0800585b 	.word	0x0800585b
 80053c0:	0800586c 	.word	0x0800586c

080053c4 <memchr>:
 80053c4:	b2c9      	uxtb	r1, r1
 80053c6:	1882      	adds	r2, r0, r2
 80053c8:	4290      	cmp	r0, r2
 80053ca:	d101      	bne.n	80053d0 <memchr+0xc>
 80053cc:	2000      	movs	r0, #0
 80053ce:	4770      	bx	lr
 80053d0:	7803      	ldrb	r3, [r0, #0]
 80053d2:	428b      	cmp	r3, r1
 80053d4:	d0fb      	beq.n	80053ce <memchr+0xa>
 80053d6:	3001      	adds	r0, #1
 80053d8:	e7f6      	b.n	80053c8 <memchr+0x4>

080053da <memmove>:
 80053da:	b510      	push	{r4, lr}
 80053dc:	4288      	cmp	r0, r1
 80053de:	d902      	bls.n	80053e6 <memmove+0xc>
 80053e0:	188b      	adds	r3, r1, r2
 80053e2:	4298      	cmp	r0, r3
 80053e4:	d303      	bcc.n	80053ee <memmove+0x14>
 80053e6:	2300      	movs	r3, #0
 80053e8:	e007      	b.n	80053fa <memmove+0x20>
 80053ea:	5c8b      	ldrb	r3, [r1, r2]
 80053ec:	5483      	strb	r3, [r0, r2]
 80053ee:	3a01      	subs	r2, #1
 80053f0:	d2fb      	bcs.n	80053ea <memmove+0x10>
 80053f2:	bd10      	pop	{r4, pc}
 80053f4:	5ccc      	ldrb	r4, [r1, r3]
 80053f6:	54c4      	strb	r4, [r0, r3]
 80053f8:	3301      	adds	r3, #1
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d1fa      	bne.n	80053f4 <memmove+0x1a>
 80053fe:	e7f8      	b.n	80053f2 <memmove+0x18>

08005400 <_free_r>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	0005      	movs	r5, r0
 8005404:	2900      	cmp	r1, #0
 8005406:	d010      	beq.n	800542a <_free_r+0x2a>
 8005408:	1f0c      	subs	r4, r1, #4
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	da00      	bge.n	8005412 <_free_r+0x12>
 8005410:	18e4      	adds	r4, r4, r3
 8005412:	0028      	movs	r0, r5
 8005414:	f000 f8d4 	bl	80055c0 <__malloc_lock>
 8005418:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <_free_r+0x90>)
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <_free_r+0x2c>
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6014      	str	r4, [r2, #0]
 8005424:	0028      	movs	r0, r5
 8005426:	f000 f8d3 	bl	80055d0 <__malloc_unlock>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	42a3      	cmp	r3, r4
 800542e:	d908      	bls.n	8005442 <_free_r+0x42>
 8005430:	6821      	ldr	r1, [r4, #0]
 8005432:	1860      	adds	r0, r4, r1
 8005434:	4283      	cmp	r3, r0
 8005436:	d1f3      	bne.n	8005420 <_free_r+0x20>
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	1841      	adds	r1, r0, r1
 800543e:	6021      	str	r1, [r4, #0]
 8005440:	e7ee      	b.n	8005420 <_free_r+0x20>
 8005442:	001a      	movs	r2, r3
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <_free_r+0x4e>
 800544a:	42a3      	cmp	r3, r4
 800544c:	d9f9      	bls.n	8005442 <_free_r+0x42>
 800544e:	6811      	ldr	r1, [r2, #0]
 8005450:	1850      	adds	r0, r2, r1
 8005452:	42a0      	cmp	r0, r4
 8005454:	d10b      	bne.n	800546e <_free_r+0x6e>
 8005456:	6820      	ldr	r0, [r4, #0]
 8005458:	1809      	adds	r1, r1, r0
 800545a:	1850      	adds	r0, r2, r1
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	4283      	cmp	r3, r0
 8005460:	d1e0      	bne.n	8005424 <_free_r+0x24>
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	1841      	adds	r1, r0, r1
 8005468:	6011      	str	r1, [r2, #0]
 800546a:	6053      	str	r3, [r2, #4]
 800546c:	e7da      	b.n	8005424 <_free_r+0x24>
 800546e:	42a0      	cmp	r0, r4
 8005470:	d902      	bls.n	8005478 <_free_r+0x78>
 8005472:	230c      	movs	r3, #12
 8005474:	602b      	str	r3, [r5, #0]
 8005476:	e7d5      	b.n	8005424 <_free_r+0x24>
 8005478:	6821      	ldr	r1, [r4, #0]
 800547a:	1860      	adds	r0, r4, r1
 800547c:	4283      	cmp	r3, r0
 800547e:	d103      	bne.n	8005488 <_free_r+0x88>
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	1841      	adds	r1, r0, r1
 8005486:	6021      	str	r1, [r4, #0]
 8005488:	6063      	str	r3, [r4, #4]
 800548a:	6054      	str	r4, [r2, #4]
 800548c:	e7ca      	b.n	8005424 <_free_r+0x24>
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	20000090 	.word	0x20000090

08005494 <_malloc_r>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	2303      	movs	r3, #3
 8005498:	1ccd      	adds	r5, r1, #3
 800549a:	439d      	bics	r5, r3
 800549c:	3508      	adds	r5, #8
 800549e:	0006      	movs	r6, r0
 80054a0:	2d0c      	cmp	r5, #12
 80054a2:	d21f      	bcs.n	80054e4 <_malloc_r+0x50>
 80054a4:	250c      	movs	r5, #12
 80054a6:	42a9      	cmp	r1, r5
 80054a8:	d81e      	bhi.n	80054e8 <_malloc_r+0x54>
 80054aa:	0030      	movs	r0, r6
 80054ac:	f000 f888 	bl	80055c0 <__malloc_lock>
 80054b0:	4925      	ldr	r1, [pc, #148]	; (8005548 <_malloc_r+0xb4>)
 80054b2:	680a      	ldr	r2, [r1, #0]
 80054b4:	0014      	movs	r4, r2
 80054b6:	2c00      	cmp	r4, #0
 80054b8:	d11a      	bne.n	80054f0 <_malloc_r+0x5c>
 80054ba:	4f24      	ldr	r7, [pc, #144]	; (800554c <_malloc_r+0xb8>)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <_malloc_r+0x38>
 80054c2:	0021      	movs	r1, r4
 80054c4:	0030      	movs	r0, r6
 80054c6:	f000 f869 	bl	800559c <_sbrk_r>
 80054ca:	6038      	str	r0, [r7, #0]
 80054cc:	0029      	movs	r1, r5
 80054ce:	0030      	movs	r0, r6
 80054d0:	f000 f864 	bl	800559c <_sbrk_r>
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	d12b      	bne.n	8005530 <_malloc_r+0x9c>
 80054d8:	230c      	movs	r3, #12
 80054da:	0030      	movs	r0, r6
 80054dc:	6033      	str	r3, [r6, #0]
 80054de:	f000 f877 	bl	80055d0 <__malloc_unlock>
 80054e2:	e003      	b.n	80054ec <_malloc_r+0x58>
 80054e4:	2d00      	cmp	r5, #0
 80054e6:	dade      	bge.n	80054a6 <_malloc_r+0x12>
 80054e8:	230c      	movs	r3, #12
 80054ea:	6033      	str	r3, [r6, #0]
 80054ec:	2000      	movs	r0, #0
 80054ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	1b5b      	subs	r3, r3, r5
 80054f4:	d419      	bmi.n	800552a <_malloc_r+0x96>
 80054f6:	2b0b      	cmp	r3, #11
 80054f8:	d903      	bls.n	8005502 <_malloc_r+0x6e>
 80054fa:	6023      	str	r3, [r4, #0]
 80054fc:	18e4      	adds	r4, r4, r3
 80054fe:	6025      	str	r5, [r4, #0]
 8005500:	e003      	b.n	800550a <_malloc_r+0x76>
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	42a2      	cmp	r2, r4
 8005506:	d10e      	bne.n	8005526 <_malloc_r+0x92>
 8005508:	600b      	str	r3, [r1, #0]
 800550a:	0030      	movs	r0, r6
 800550c:	f000 f860 	bl	80055d0 <__malloc_unlock>
 8005510:	0020      	movs	r0, r4
 8005512:	2207      	movs	r2, #7
 8005514:	300b      	adds	r0, #11
 8005516:	1d23      	adds	r3, r4, #4
 8005518:	4390      	bics	r0, r2
 800551a:	1ac2      	subs	r2, r0, r3
 800551c:	4298      	cmp	r0, r3
 800551e:	d0e6      	beq.n	80054ee <_malloc_r+0x5a>
 8005520:	1a1b      	subs	r3, r3, r0
 8005522:	50a3      	str	r3, [r4, r2]
 8005524:	e7e3      	b.n	80054ee <_malloc_r+0x5a>
 8005526:	6053      	str	r3, [r2, #4]
 8005528:	e7ef      	b.n	800550a <_malloc_r+0x76>
 800552a:	0022      	movs	r2, r4
 800552c:	6864      	ldr	r4, [r4, #4]
 800552e:	e7c2      	b.n	80054b6 <_malloc_r+0x22>
 8005530:	2303      	movs	r3, #3
 8005532:	1cc4      	adds	r4, r0, #3
 8005534:	439c      	bics	r4, r3
 8005536:	42a0      	cmp	r0, r4
 8005538:	d0e1      	beq.n	80054fe <_malloc_r+0x6a>
 800553a:	1a21      	subs	r1, r4, r0
 800553c:	0030      	movs	r0, r6
 800553e:	f000 f82d 	bl	800559c <_sbrk_r>
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	d1db      	bne.n	80054fe <_malloc_r+0x6a>
 8005546:	e7c7      	b.n	80054d8 <_malloc_r+0x44>
 8005548:	20000090 	.word	0x20000090
 800554c:	20000094 	.word	0x20000094

08005550 <_realloc_r>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	0007      	movs	r7, r0
 8005554:	000d      	movs	r5, r1
 8005556:	0016      	movs	r6, r2
 8005558:	2900      	cmp	r1, #0
 800555a:	d105      	bne.n	8005568 <_realloc_r+0x18>
 800555c:	0011      	movs	r1, r2
 800555e:	f7ff ff99 	bl	8005494 <_malloc_r>
 8005562:	0004      	movs	r4, r0
 8005564:	0020      	movs	r0, r4
 8005566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005568:	2a00      	cmp	r2, #0
 800556a:	d103      	bne.n	8005574 <_realloc_r+0x24>
 800556c:	f7ff ff48 	bl	8005400 <_free_r>
 8005570:	0034      	movs	r4, r6
 8005572:	e7f7      	b.n	8005564 <_realloc_r+0x14>
 8005574:	f000 f834 	bl	80055e0 <_malloc_usable_size_r>
 8005578:	002c      	movs	r4, r5
 800557a:	42b0      	cmp	r0, r6
 800557c:	d2f2      	bcs.n	8005564 <_realloc_r+0x14>
 800557e:	0031      	movs	r1, r6
 8005580:	0038      	movs	r0, r7
 8005582:	f7ff ff87 	bl	8005494 <_malloc_r>
 8005586:	1e04      	subs	r4, r0, #0
 8005588:	d0ec      	beq.n	8005564 <_realloc_r+0x14>
 800558a:	0029      	movs	r1, r5
 800558c:	0032      	movs	r2, r6
 800558e:	f7ff fb69 	bl	8004c64 <memcpy>
 8005592:	0029      	movs	r1, r5
 8005594:	0038      	movs	r0, r7
 8005596:	f7ff ff33 	bl	8005400 <_free_r>
 800559a:	e7e3      	b.n	8005564 <_realloc_r+0x14>

0800559c <_sbrk_r>:
 800559c:	2300      	movs	r3, #0
 800559e:	b570      	push	{r4, r5, r6, lr}
 80055a0:	4d06      	ldr	r5, [pc, #24]	; (80055bc <_sbrk_r+0x20>)
 80055a2:	0004      	movs	r4, r0
 80055a4:	0008      	movs	r0, r1
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f7fc fc14 	bl	8001dd4 <_sbrk>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d103      	bne.n	80055b8 <_sbrk_r+0x1c>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d000      	beq.n	80055b8 <_sbrk_r+0x1c>
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	2000052c 	.word	0x2000052c

080055c0 <__malloc_lock>:
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4802      	ldr	r0, [pc, #8]	; (80055cc <__malloc_lock+0xc>)
 80055c4:	f000 f814 	bl	80055f0 <__retarget_lock_acquire_recursive>
 80055c8:	bd10      	pop	{r4, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	20000534 	.word	0x20000534

080055d0 <__malloc_unlock>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4802      	ldr	r0, [pc, #8]	; (80055dc <__malloc_unlock+0xc>)
 80055d4:	f000 f80d 	bl	80055f2 <__retarget_lock_release_recursive>
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	20000534 	.word	0x20000534

080055e0 <_malloc_usable_size_r>:
 80055e0:	1f0b      	subs	r3, r1, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	1f18      	subs	r0, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	da01      	bge.n	80055ee <_malloc_usable_size_r+0xe>
 80055ea:	580b      	ldr	r3, [r1, r0]
 80055ec:	18c0      	adds	r0, r0, r3
 80055ee:	4770      	bx	lr

080055f0 <__retarget_lock_acquire_recursive>:
 80055f0:	4770      	bx	lr

080055f2 <__retarget_lock_release_recursive>:
 80055f2:	4770      	bx	lr

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
